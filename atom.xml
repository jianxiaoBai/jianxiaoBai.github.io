<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Swhite ★ Notes</title>
  <subtitle>星火燎原</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-13T15:35:27.072Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Small white</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何才能成为很厉害的人</title>
    <link href="http://yoursite.com/2017/04/13/rexue/"/>
    <id>http://yoursite.com/2017/04/13/rexue/</id>
    <published>2017-04-13T14:33:40.000Z</published>
    <updated>2017-04-13T15:35:27.072Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/imgs/hzw1.jpg" alt="markdown"></p>
<embed src="//music.163.com/style/swf/widget.swf?sid=33682157&type=2&auto=0&width=320&height=66" width="340" height="86" allownetworking="all">

<div class="note primary"><p>首先，少年，答应别人的承诺，就一定要兑现。</p>
</div>
<p>我以前啊，和你一样，很想成为一个很厉害很厉害很厉害的人。</p>
<p>喜欢看热血的东西，幻想自己是屠龙的勇士，登塔的先锋，我左手有剑，右手有光，没头没脑的燃烧自己，敌人的骑军来了，我说你们何人堪与之战，我的女人在等我。</p>
<a id="more"></a>
<p>后来我现实了一点，我觉得我要成为那种说走就走，说日就日的男人，我梳大背头，流浪在欧洲或者新几内亚的，我拍孩子，拍野兽，拍流浪的雏妓，与罗伯特德尼罗握手，说嘿，我给你写了愤怒的公牛2。</p>
<p>再后来，我觉得我人生的梦想，是在城市中心买上一间顶层公寓，把一整面墙都改造成钢化玻璃，在灯火通明的夜晚，我就要端着酒站在巨大的窗前，看整个城市在呼吸，然后我的朋友叩门，他带来了一打嫩模，我们就玩一些成年人的游戏现在，我发现龙并不存在，我不会骑马，不会用单反，家住2楼，我能做的，就是把眼前的事儿做好，赚到足够的钱，这样我可以给我的姑娘一个地球仪，然后用飞镖扎它，扎到哪儿，就去哪儿玩。</p>
<p>这样看来，虽然我的想法随着生殖器的发育，始终在变，但那个很厉害很厉害的人，一直离我很远，甚至越来越远。</p>
<p><strong>我心中曾经执剑的少年，此刻也混迹在市井之间。</strong></p>
<p>血似乎都凉了。</p>
<p>我也不是没有惶恐过，是不是我这一生，都不能左手持剑，右手握着罗伯特德尼罗，说这里的嫩模随便你玩但是你他妈别从窗户上掉下去。</p>
<p>这样一看，我逊得不行，我的朋友都是一些凡人，比我还逊，业余生活就是推塔、中单、跪。</p>
<p>我心想，我是不是这辈子都要做一个逊逼，直到我的坟墓上写好墓志铭，我甚至都想好了：我来，我见，我挂了。</p>
<p>最后我给了自己一个否定的答复，我不要。</p>
<p>我喜欢我的朋友们，喜欢我现在的生活，首先我希望你明白，没有厉害与逊逼得区分，只有血的凉与热，有的人觉得生活就这样吧，我算了，现在没什么不好。</p>
<p>有的人觉得生活这样挺好，但是我还要更好。</p>
<p>这种只要剧情稍微热血一点就会热泪盈眶的傻逼，已经不多了，一刻也不要停留。</p>
<p>所以现在，我和你不一样了，我仍然想成为一个很厉害很厉害很厉害的人，像我们这种剧情稍微热血一点就会热泪盈眶的傻逼，要好好珍惜自己。</p>
<p>很多人坐下来了，跟你说你不行，说你省点儿心吧，说你请静一静。</p>
<p>汹涌的人群就把你这样的少年淹没了，人群散去的时候，你也不见了，你那些承诺，谁也听不见，这个世界对于你，就再不可能有什么更有趣更漂亮的女朋友。</p>
<p>你就失约了，小逼崽子。</p>
<p>这么跟你说。</p>
<p>虽然随着年龄的增长，我趋于现实，不能像你那样分分钟冲动的燃烧，然而我每时每刻都有想做的事，有想达成的目标。</p>
<p>不排除以后的某一年，我会握着罗伯特德尼罗的手，他说这是你写得吗，愤怒的公牛2，只要他还没死。</p>
<p>故事里拳王拉莫塔忍着伤，他举着铁拳，挥汗如雨，要和命运斗争，他说我怎么能失约呢，我是那个要成为很厉害很厉害的拳王拉莫塔！小伙儿，成为很厉害很厉害的人，最重要的，就是要热血，永远也不要让你的血凉下去，你凉下去了，就再也不能找到一个更有趣更漂亮的女友，你就失约了，于是那天她踏梦而来，就成了一个彻头彻尾的笑话。</p>
<p>当有一天你成为你讨厌的那种人，浑浑噩噩，你走在街上，看见那些更有趣更漂亮的女孩，你会不会想起多年以前，你说我答应你，在一个承诺就是永远的年纪。</p>
<p>读书，交友，美容，都不如你这一腔狗血，滚烫，灼人，你要燃上大半辈子，才对得起你现在说的这些话。</p>
<p><code>我听闻最美的故事，是公主死去了，屠龙的少年还在燃烧。</code></p>
<p>火苗再小，你都要反复的点燃。</p>
<p>所谓热血的少年，青涩的爱恋，死亡与梦之约。</p>
<p>这么好的故事。</p>
<p>你可别演砸了。</p>
<p>最后我给你点个人建议：<br>  1.读书，读到倦，网上有很多方法，但你从来沉不下心看。<br>  2.学习，学到疼，网上有很多方法，但你从来沉不下心看。<br>  3.开口说话，冷场也要说话，脸皮薄也要说话，挨打也要说话。<br>  4.如果你现在不知道做什么，至少你还可以先从做一个牛逼的学生开始。<br>  5.更漂亮更有趣的女孩，五年以后再找。<br>  6.承诺是鞭子，不是兴奋剂。<br>  7.年纪大了，也不要说什么心如死灰。</p>
<p>改变自己是非常，非常，非常痛苦的，我能看出来你一腔热血的优点，自然知道你孤僻懒散自以为是的缺点，方法很多，不过我不确定你吃不吃得了苦，我和你共勉吧。</p>
<p>在成为最厉害最厉害最厉害的道路上。</p>
<p>作者：朱炫<br>链接：<a href="https://www.zhihu.com/question/22921426/answer/23330366" target="_blank" rel="external">https://www.zhihu.com/question/22921426/answer/23330366</a><br>来源：知乎</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/imgs/hzw1.jpg&quot; alt=&quot;markdown&quot;&gt;&lt;/p&gt;
&lt;embed src=&quot;//music.163.com/style/swf/widget.swf?sid=33682157&amp;type=2&amp;auto=0&amp;width=320&amp;height=66&quot; width=&quot;340&quot; height=&quot;86&quot;  allowNetworking=&quot;all&quot;&gt;&lt;/embed&gt;

&lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;首先，少年，答应别人的承诺，就一定要兑现。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我以前啊，和你一样，很想成为一个很厉害很厉害很厉害的人。&lt;/p&gt;
&lt;p&gt;喜欢看热血的东西，幻想自己是屠龙的勇士，登塔的先锋，我左手有剑，右手有光，没头没脑的燃烧自己，敌人的骑军来了，我说你们何人堪与之战，我的女人在等我。&lt;/p&gt;
    
    </summary>
    
      <category term="成长" scheme="http://yoursite.com/categories/%E6%88%90%E9%95%BF/"/>
    
    
      <category term="知乎" scheme="http://yoursite.com/tags/%E7%9F%A5%E4%B9%8E/"/>
    
  </entry>
  
  <entry>
    <title>Quotation</title>
    <link href="http://yoursite.com/2017/04/09/quotation/"/>
    <id>http://yoursite.com/2017/04/09/quotation/</id>
    <published>2017-04-09T15:56:04.000Z</published>
    <updated>2017-04-13T14:48:28.169Z</updated>
    
    <content type="html"><![CDATA[<p><embed src="//music.163.com/style/swf/widget.swf?sid=26577096&type=2&auto=0&width=320&height=66" width="340" height="86" allownetworking="all"><br><div class="note primary"><p>人不牺牲什么就什么也得不到，为了得到什么就要付出同样的代价，那就是炼金术的等价交换原则，那个时候，我们相信那是世界的真实。<br><span style="margin-left: 50%"><strong><em>出自『钢之炼金术师』</em></strong></span></p>
</div></p>
<div class="note danger"><p>思想中一旦有了依附，骨子里便失去了坚强；<br><span style="margin-left: 50%"><strong><em>出自『网络』</em></strong></span></p>
</div>
<a id="more"></a>
<div class="note info"><p>星星之火，可以燎原。<br><span style="margin-left: 50%"><strong><em>出自『张居正』</em></strong></span></p>
</div>
<div class="note danger"><p>纸上得来终觉浅，绝知此事要躬行。<br><span style="margin-left: 50%"><strong><em>出自『陆游』</em></strong></span></p>
</div>
<div class="note warning"><p>要保持剑的锋利就得时时磨拭，要保持头脑灵光就得看书。<br><span style="margin-left: 50%"><strong><em>出自『乔治·马丁』</em></strong></span></p>
</div>
<div class="note default"><p>俗话说不耻下问是一时之耻，耻而不问是一生之耻。<br><span style="margin-left: 50%"><strong><em>出自『白箱』</em></strong></span></p>
</div>
<div class="note default"><p>累过方得闲，苦过方知甜。<br><span style="margin-left: 50%"><strong><em>出自『网络』</em></strong></span></p>
</div>
<div class="note primary"><p>不以物喜，不以己悲。<br><span style="margin-left: 50%"><strong><em>出自『范仲淹』</em></strong></span></p>
</div>
<div class="note primary"><p>若有恒，何必三更眠五更起；最无益，莫过一日曝十日寒；<br><span style="margin-left: 50%"><strong><em>出自『毛泽东』</em></strong></span></p>
</div>
<div class="note default"><p>战略上藐视敌人，战术上重视敌人；<br><span style="margin-left: 50%"><strong><em>出自『毛泽东』</em></strong></span></p>
</div>
<div class="note default"><p>人生路很长，永远不要高兴太早。<br><span style="margin-left: 50%"><strong><em>出自『平常心』</em></strong></span></p>
</div>
<div class="note default"><p>人生就像一盒的巧克力，你永远不知道下一块是什么口味。<br><span style="margin-left: 50%"><strong><em>出自『阿甘正传』</em></strong></span></p>
</div>
<div class="note default"><p>如果你不努力，一天比一天容易，但一年比一年难；如果你努力了，一天比一天难，但一年比一年容易。<br><span style="margin-left: 50%"><strong><em>出自『网络』</em></strong></span></p>
</div>
<div class="note default"><p>只有内心强大，才能实现自我救赎；<br><span style="margin-left: 50%"><strong><em>出自『9.18』</em></strong></span></p>
</div>
<div class="note default"><p>富，亦指精神；强，亦指内心；<br><span style="margin-left: 50%"><strong><em>出自『9.18』</em></strong></span></p>
</div>
<div class="note default"><p>人一定要认清自己，自己能干什么，干得了什么，不要人云亦云。<br><span style="margin-left: 50%"><strong><em>出自『★』</em></strong></span></p>
</div>
<div class="note default"><p>对社会不要有太多的抱怨。创业的时候不要把自己当人看。有行动不一定能成功，没有行动就一定失败。<br><span style="margin-left: 50%"><strong><em>出自『俞敏洪』</em></strong></span></p>
</div>
<div class="note default"><p>那家伙永远都是挑战者<br><span style="margin-left: 50%"><strong><em>出自『棒球大联盟』</em></strong></span></p>
</div>
<div class="note default"><p>做没做过的事情是要建立在老老实实的成功之后的基础之上。<br><span style="margin-left: 50%"><strong><em>出自『★』</em></strong></span></p>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;embed src=&quot;//music.163.com/style/swf/widget.swf?sid=26577096&amp;type=2&amp;auto=0&amp;width=320&amp;height=66&quot; width=&quot;340&quot; height=&quot;86&quot;  allowNetworking=&quot;all&quot;&gt;&lt;/embed&gt;&lt;br&gt;&lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;人不牺牲什么就什么也得不到，为了得到什么就要付出同样的代价，那就是炼金术的等价交换原则，那个时候，我们相信那是世界的真实。&lt;br&gt;&lt;span  style=&quot;margin-left: 50%&quot;&gt;&lt;strong&gt;&lt;em&gt;出自『钢之炼金术师』&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;思想中一旦有了依附，骨子里便失去了坚强；&lt;br&gt;&lt;span  style=&quot;margin-left: 50%&quot;&gt;&lt;strong&gt;&lt;em&gt;出自『网络』&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
    
    </summary>
    
      <category term="语录" scheme="http://yoursite.com/categories/%E8%AF%AD%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>photo</title>
    <link href="http://yoursite.com/2017/04/07/photo/"/>
    <id>http://yoursite.com/2017/04/07/photo/</id>
    <published>2017-04-07T06:04:32.000Z</published>
    <updated>2017-04-09T15:19:51.782Z</updated>
    
    <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="http://oapjp6spr.bkt.clouddn.com/224147.jpg" alt=""></div><div class="group-picture-column" style="width: 50%;"><img src="http://oapjp6spr.bkt.clouddn.com/196232.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="http://oapjp6spr.bkt.clouddn.com/18210.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="http://oapjp6spr.bkt.clouddn.com/213318.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="http://oapjp6spr.bkt.clouddn.com/199301.jpg" alt=""></div></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;group-picture&quot;&gt;&lt;div class=&quot;group-picture-container&quot;&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;widt
    
    </summary>
    
    
      <category term="picture" scheme="http://yoursite.com/tags/picture/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/04/05/hello-world/"/>
    <id>http://yoursite.com/2017/04/05/hello-world/</id>
    <published>2017-04-05T08:41:22.242Z</published>
    <updated>2017-04-07T08:59:22.958Z</updated>
    
    <content type="html"><![CDATA[<h3 id="历程"><a href="#历程" class="headerlink" title="历程"></a>历程</h3><p>还记得在 Github 上生成的第一个page时的新奇<br>还记得在 CSDN 的第一次开通博客的 Hello world 的兴奋<br>如今在Github的page上生成了自己的博客，那可谓是即新奇 + 兴奋带来的激动<br>可以在自己的这块领地为所欲为，光想想就有一种迎风而来的酸爽</p>
<h3 id="致敬"><a href="#致敬" class="headerlink" title="致敬"></a>致敬</h3><p>每一次的开始都仿佛打开一扇门<br>而每扇门的背后都有着无数默默付出和无私奉献的人<br>是他们让现在的这个圈子有了生态<br>没有他们的付出我不会这么顺利的把这个博客搭建起来<br>再次由衷的致敬这些人<br>我愿成为向你们一样的人</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;历程&quot;&gt;&lt;a href=&quot;#历程&quot; class=&quot;headerlink&quot; title=&quot;历程&quot;&gt;&lt;/a&gt;历程&lt;/h3&gt;&lt;p&gt;还记得在 Github 上生成的第一个page时的新奇&lt;br&gt;还记得在 CSDN 的第一次开通博客的 Hello world 的兴奋&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript - 面向对象</title>
    <link href="http://yoursite.com/2017/04/05/Object/"/>
    <id>http://yoursite.com/2017/04/05/Object/</id>
    <published>2017-04-05T05:00:04.000Z</published>
    <updated>2017-04-13T14:26:12.439Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>转自</strong>： <a href="http://www.cwyaml.top/" target="_blank" rel="external">http://www.cwyaml.top/</a></p>
</blockquote>
<p><div class="out-img-topic"><img src="http://on5pjsxrv.bkt.clouddn.com/object.png" alt="Markdown"></div><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;面向对象的语言有一个标志，那就是“类”的概念，所谓的“类”就是对象的模板，对象就是“类”的实例。但是，JavaScript语言的对象体系，不是基于“类”的，而是基于 <strong>构造函数</strong>（constructor）和 <strong>原型链</strong>（prototype）。</p>
<a id="more"></a>
<h2 id="对象的概念"><a href="#对象的概念" class="headerlink" title="对象的概念"></a>对象的概念</h2><p>我们从两个层次来理解：<br>1、<strong>“对象”是单个实物的抽象</strong><br>一本书、一辆汽车、一个人都可以是“对象”，一个数据库、一张网页、一个与远程服务器的连接也可以是“对象”。当实物被抽象成“对象”，实物之间的关系就变成了“对象”之间的关系，从而就可以模拟现实情况，针对“对象”进行编程。<br>2、<strong>“对象”是一个容器，封装了“属性”（property）和“方法”（method）</strong><br>所谓“属性”，就是对象的状态；所谓“方法”，就是对象的行为（完成某种任务）。比如，我们可以把动物抽象为 animal 对象，“属性”记录具体是那一种动物，“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。</p>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>虽然 Object 构造函数和对象字面量都可以用来创建单个对象，但这些方式有明显的缺点：使用一个接口创建很多对象，会产生大量的重复代码。未解决这个问题，开发者们不停在探索。</p>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂模式是软件工程领域一种广为人知的设计模式。开发人员封装了一个函数，用函数来封装一个对象“模板”，这样可以少些一些代码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">people</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="string">'name'</span> : name,</div><div class="line">    <span class="string">'age'</span> : age</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> people1 = people(<span class="string">'Tom'</span>,<span class="number">23</span>);</div><div class="line"><span class="keyword">var</span> people2 = people(<span class="string">'Peter'</span>,<span class="number">24</span>);</div><div class="line">alert(people1.age);       <span class="comment">//23</span></div></pre></td></tr></table></figure></p>
<p>这种模式虽然解决了创建多个相似对象的问题，这种方法的问题是，people1 和 people2 之间没有内在的联系，不能反映出它们是同一个原型对象的实例。然后，又出现了一种新的模式。</p>
<h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><p>所谓“构造函数”，其实就是一个普通函数，但是内部使用了 <code>this</code> 变量。对构造函数使用 <code>new</code> 运算符，就能生成实例，并且 <code>this</code> 变量会绑定在实例对象上。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> people1 = <span class="keyword">new</span> People(<span class="string">'Tom'</span>,<span class="number">23</span>);</div><div class="line"><span class="keyword">var</span> people2 = <span class="keyword">new</span> People(<span class="string">'Peter'</span>,<span class="number">24</span>);</div><div class="line">alert(people2.name);      <span class="comment">//Peter</span></div></pre></td></tr></table></figure></p>
<p>这时 people1 和 people2 会自动拥有一个 <code>constructor</code> 属性，指向他们的构造函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert(people1.constructor == People);    <span class="comment">//true</span></div><div class="line">alert(people2.constructor == People);    <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>或者也可以使用 <code>instanceof</code> 运算符，验证原型与实例之间的关系：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert(people1 <span class="keyword">instanceof</span> People);        <span class="comment">//true</span></div><div class="line">alert(people2 <span class="keyword">instanceof</span> People);        <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p id="div-border-left-red">构造函数应注意：<br>1、函数名一般首字母大写，用来和普通函数区分；<br>2、调用时必须使用 <code>new</code> 运算符，否则 <code>this</code> 将指向全局（属性和方法将属于 <strong>window</strong>）<br>3、买有 <code>return</code> 语句。<br></p>

<p>构造函数模式虽然好用，但也不是没有缺点：造成内存浪费。我们给 People 添加一个方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'我会跑！'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> people1 = <span class="keyword">new</span> People(<span class="string">'Tom'</span>,<span class="number">23</span>);</div><div class="line"><span class="keyword">var</span> people2 = <span class="keyword">new</span> People(<span class="string">'Peter'</span>,<span class="number">24</span>);</div><div class="line">people1.run();</div></pre></td></tr></table></figure></p>
<p>貌似没有什么为题。实际上，<code>run</code> 这个方法应该是每个实例共享的（因为每个人都会跑），但是我们每 <code>new</code> 一次，就会为新的实例重新定义 <code>run</code> 方法，造成内存浪费。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(people1.run == people2.run);      <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>Javascript 规定，每一个构造函数都有一个 <code>prototype</code> 属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line">People.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'我会跑！'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> people1 = <span class="keyword">new</span> People(<span class="string">'Tom'</span>,<span class="number">23</span>);</div><div class="line"><span class="keyword">var</span> people2 = <span class="keyword">new</span> People(<span class="string">'Peter'</span>,<span class="number">24</span>);</div><div class="line">people1.run();        <span class="comment">//我会跑！</span></div><div class="line">alert(people1.run == people2.run);      <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>说明 people1 和 people2 的 <code>run()</code> 方法指向相同内存地址，是共享的。减少了内存的使用，提高了运行效率。</p>
<p id="div-border-left-red"><strong>原型搜索机制：</strong><br>当访问一个实例属性时，首先会在实例中搜索该属性，如果找不到，则会继续搜索实例的原型。</p>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote>
<p>一句话，<strong>继承</strong> 就是让一个对象拥有另一个对象的属性或方法。（我是这么理解的）</p>
</blockquote>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p><strong>原型链</strong> 是 js 继承的主要方法。其主要思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。首先明确一下 <strong>构造函数</strong>、<strong>原型</strong> 和 <strong>实例</strong> 的关系：<em>每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型的内部指针</em>(对照下图理解这句话)。</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/Object1.png" alt="markdown"></p>
<p>假如我们让原型对象等于另一个类型的实例，此时的原型对象将包含一个指向另一个原型的指针，相应的，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立，如此层层递进，就构成了实例与原型的链条。这就是 <strong>原型链</strong>。<br>原型链的基本模式：（一个构造函数的原型指向另一个构造函数的实例）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Animal.prototype.type = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'动物'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line">People.prototype = <span class="keyword">new</span> Animal();    <span class="comment">//实现继承Animai()</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> people1 = <span class="keyword">new</span> People();</div><div class="line">alert(people1.type());              <span class="comment">//动物</span></div></pre></td></tr></table></figure></p>
<p>最终的结果是：people1 指向 People 的原型，People 的原型又指向 Animal 的原型。</p>
<p><span id="inline-blue">需要注意：</span><br><strong>注意一：</strong> 原型链的顶层为 Object 。这也是所有自定义类型都可以使用 <code>toString()</code>、<code>valueOf()</code> 的原因。<br><strong>注意二：</strong> 如果存在继承，那么子对象的实例属于所有所继承的对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alert(people1 <span class="keyword">instanceof</span> People);     <span class="comment">//true</span></div><div class="line">alert(people1 <span class="keyword">instanceof</span> Animal);     <span class="comment">//true</span></div><div class="line">alert(people1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);     <span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p><strong>注意三：</strong> 如果需要给子类型添加超类型中不存的方法，或者说要替换掉超类型中的方法，那么给原型添加方法的代码一定要放在替换原型的语句之后。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Animal.prototype.type = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'动物'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line">People.prototype = <span class="keyword">new</span> Animal();    <span class="comment">//实现继承Animai()</span></div><div class="line">People.prototype.type = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'我也是动物'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> people1 = <span class="keyword">new</span> People();</div><div class="line">alert(people1.type());        <span class="comment">//我也是动物   //超类型中的方法被覆盖</span></div><div class="line"></div><div class="line">People.prototype.type = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'我也是动物'</span>;</div><div class="line">&#125;</div><div class="line">People.prototype = <span class="keyword">new</span> Animal();</div><div class="line"><span class="keyword">var</span> people1 = <span class="keyword">new</span> People();</div><div class="line">alert(people1.type());         <span class="comment">//动物</span></div></pre></td></tr></table></figure></p>
<p><strong>注意四：</strong> 不能使用对象字面量创建原型方法，因为这样会重写原型链。</p>
<p><span id="inline-red"><strong>原型链的问题：</strong></span><br><strong>问题一：</strong> 前面说过，包含引用类型值得原型属性会被所有实例共享。在通过原型实现继承时，原型实际上会变成另一个类型的实例。于是，原先的实例属性也就顺理成章地变成现在的原型属性了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Color</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.color = [<span class="string">'red'</span>,<span class="string">'blue'</span>,<span class="string">'green'</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Flower</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line">Flower.prototype = <span class="keyword">new</span> Color();    <span class="comment">//继承Color</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> flower1 = <span class="keyword">new</span> Flower();</div><div class="line">flower1.color.push(<span class="string">'black'</span>);</div><div class="line">alert(flower1.color);      <span class="comment">//red,blue,green,black</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> flower2 = <span class="keyword">new</span> Flower();</div><div class="line">alert(flower2.color);      <span class="comment">//red,blue,green,black</span></div></pre></td></tr></table></figure></p>
<p><strong>问题二：</strong> 没有办法在不影响所有对象实例的情况下，给超类型的构造函数传递参数。</p>
<h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><p>这种技术是为了解决 <strong>原型链</strong> 中的问题而产生的，他的基本思想是：在子类型构造函数的内部调用超类型的构造函数。方式是使用  <code>call()</code> 或 <code>apply()</code> 方法，将父对象的构造函数绑定在子对象上。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Color</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.color = [<span class="string">'red'</span>,<span class="string">'blue'</span>,<span class="string">'green'</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Flower</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  Color.call(<span class="keyword">this</span>);         <span class="comment">//继承Color</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> flower1 = <span class="keyword">new</span> Flower();</div><div class="line">flower1.color.push(<span class="string">'black'</span>);</div><div class="line">alert(flower1.color);      <span class="comment">//red,blue,green,black</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> flower2 = <span class="keyword">new</span> Flower();</div><div class="line">alert(flower2.color);      <span class="comment">//red,blue,green</span></div></pre></td></tr></table></figure></p>
<p>我们实际上在新创建的 Flower 实例的环境下调用了 Color 构造函数。这样一来，就会在新 Flower 对象上执行 Color 函数中定义的所有对象初始化代码。结果， Flower 的每个实例都会具有自己的 color 属性的副本。<br><span id="inline-red"><strong>借用构造函数的问题：</strong></span><br>方法都在函数中定义，因此函数复用就无从谈起。所以很少单独使用。</p>
<h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>将 <strong>原型链</strong> 和 <strong>构造函数</strong> 相结合，从而发挥两者之长的继承方式。思路是：使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，即通过在原型上定义方法实现了函数复用，又能保证每个实例都有它自己的属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.color = [<span class="string">'red'</span>,<span class="string">'blue'</span>,<span class="string">'green'</span>];</div><div class="line">&#125;</div><div class="line">People.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">  People.call(<span class="keyword">this</span>,name);    <span class="comment">//继承了People的name属性</span></div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line">Book.prototype = <span class="keyword">new</span> People();    <span class="comment">//继承方法</span></div><div class="line">Book.prototype.constructor = Book;</div><div class="line">Book.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="keyword">this</span>.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> book1 = <span class="keyword">new</span> Book(<span class="string">'js'</span>,<span class="number">23</span>);</div><div class="line">book1.color.push(<span class="string">'black'</span>);</div><div class="line">alert(book1.color);      <span class="comment">//red,blue,green,black</span></div><div class="line">book1.sayName();         <span class="comment">//js</span></div><div class="line">book1.sayAge();          <span class="comment">//23</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> book2 = <span class="keyword">new</span> Book(<span class="string">'java'</span>,<span class="number">44</span>);</div><div class="line">alert(book2.color);      <span class="comment">//red,blue,green</span></div><div class="line">book2.sayName();         <span class="comment">//java</span></div><div class="line">book2.sayAge();          <span class="comment">//44</span></div></pre></td></tr></table></figure></p>
<p>People 构造函数定义了两个属性：<code>name</code> 和 <code>color</code>，然后给 People 的原型定义了 <code>sayName()</code> 方法。Book 构造函数在调用 People 构造函数是传入了 <code>name</code> 参数，紧接着又定义了自己的属性 <code>age</code>。然后，将 People 的实例赋值给 Book 的原型，然后又在该新原型上定义了 <code>sayAge()</code> 方法。这样一来，就可以让两个不同的 Book 实例即分别有自己的属性，又可以使用相同方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;转自&lt;/strong&gt;： &lt;a href=&quot;http://www.cwyaml.top/&quot;&gt;http://www.cwyaml.top/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;div class=&quot;out-img-topic&quot;&gt;&lt;img src=&quot;http://on5pjsxrv.bkt.clouddn.com/object.png&quot; alt=&quot;Markdown&quot;&gt;&lt;/div&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;面向对象的语言有一个标志，那就是“类”的概念，所谓的“类”就是对象的模板，对象就是“类”的实例。但是，JavaScript语言的对象体系，不是基于“类”的，而是基于 &lt;strong&gt;构造函数&lt;/strong&gt;（constructor）和 &lt;strong&gt;原型链&lt;/strong&gt;（prototype）。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - 事件</title>
    <link href="http://yoursite.com/2017/04/02/event/"/>
    <id>http://yoursite.com/2017/04/02/event/</id>
    <published>2017-04-02T13:14:46.000Z</published>
    <updated>2017-04-13T14:25:28.799Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>转自</strong>： <a href="http://www.cwyaml.top/" target="_blank" rel="external">http://www.cwyaml.top/</a></p>
</blockquote>
<div class="out-img-topic"><img src="http://on5pjsxrv.bkt.clouddn.com/event.png" alt="markdown"></div>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Javascript 和 HTML 之间的交互是通过 <strong>事件</strong> 来实现的。最早在 IE 中出现，被作为分担服务器端运算负载的一种手段。到现在，几乎所有的浏览器都支持事件处理。在 DOM2 级中得到规范。</p>
<a id="more"></a>
<h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p><strong>事件流</strong> 描述的是从页面中接受事件的顺序。IE 和 Netscape 提出了完全相反的事件流概念。</p>
<p><strong>事件冒泡：</strong> IE 中的事件流叫做 <strong>事件冒泡</strong> ,即从最具体的元素逐级向外传播到较不具体的元素。（所有现代浏览器都支持事件冒泡）<br><strong>事件捕获：</strong> Netscape 提出了另一种事件流叫做 <strong>事件捕获</strong> 。他们的思想是最具体的元素应该最后接受到事件，所以事件捕获是 “从外向内” 传播的。<br><strong>DOM事件流：</strong> “DOM2级事件”规定了事件流包括三个阶段：首先发生事件捕获，然后是实际的目标接受到事件，最后一个阶段是事件冒泡。</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/event03.png" alt="markdown"></p>
<blockquote>
<p><span id="inline-blue"> <strong>汇总：</strong></span> IE8及更早的版本不支持 DOM2 级事件流。</p>
</blockquote>
<h2 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h2><p>事件就是用户或浏览器自身执行的某种动作。像<code>click</code>、<code>load</code>等都是事件的名字，而响应这个事件的函数就叫做 <strong>事件处理程序</strong> 。事件处理程序以 <code>on</code> 开头。Javascript 有三种事件模型：<strong>内联模型</strong> 、 <strong>脚本模型</strong> 和 <strong>DOM2级模型</strong> 。</p>
<p><strong>内链模型：</strong> 被淘汰的方式，举个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"Click me"</span> onclick=<span class="string">"alert('Clicked')"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p><strong>脚本模型：</strong> 这个是现在用的最多的一种方式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'button'</span>);</div><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   <span class="comment">//指定事件</span></div><div class="line">  alert(<span class="string">'Clicked'</span>);</div><div class="line">&#125;</div><div class="line">btn.onclick = <span class="literal">null</span>;         <span class="comment">//删除事件</span></div></pre></td></tr></table></figure></p>
<h3 id="DOM2级模型"><a href="#DOM2级模型" class="headerlink" title="DOM2级模型"></a>DOM2级模型</h3><p>“DOM2级事件”定义了两个方法：（可用于所有 DOM 节点）</p>
<ul>
<li><strong>addEventListener()</strong>  &nbsp;&nbsp;      添加事件</li>
<li><strong>removeEventListener()</strong>   &nbsp;&nbsp;  移除事件</li>
</ul>
<p>这两个方法都接受三个参数：要处理的事件名（<code>click</code>、<code>mouseover</code>）、事件处理程序（一个匿名函数） 和 一个布尔值（最后一个布尔值如果是 <strong>true</strong> 表示在捕获阶段执行事件，如果是 <strong>false</strong> 表示在冒泡阶段执行事件。）</p>
<blockquote>
<p><strong>PS:</strong>  大多数情况下，都将事件处理程序添加到事件流的冒泡阶段，这样可以最大限度兼容不同的浏览器。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'button'</span>);</div><div class="line">btn.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'Clicked'</span>);</div><div class="line">  &#125;,<span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p id="div-border-left-red"><strong>DOM2方式的特点：</strong><br>1、可以为同一个元素添加多个事件处理程序，他们会按照顺序依次执行。<br>2、移除事件貌似麻烦了很多。</p>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'button'</span>);</div><div class="line">btn.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'Clicked'</span>);</div><div class="line">  &#125;,<span class="literal">false</span>);</div><div class="line">btn.removeEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </div><div class="line">  alert(<span class="string">'Clicked'</span>);             <span class="comment">//这样是不能移除事件的              </span></div><div class="line">  &#125;,<span class="literal">false</span>);                     <span class="comment">//因为这两个匿名函数已经不是同一个函数了</span></div><div class="line"></div><div class="line"><span class="comment">//必须这样写</span></div><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'button'</span>);</div><div class="line"><span class="keyword">var</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'Clicked'</span>);</div><div class="line">&#125;</div><div class="line">btn.addEventListener(<span class="string">'click'</span>,handler,<span class="literal">false</span>);</div><div class="line">btn.removeEventListener(<span class="string">'click'</span>,handler,<span class="literal">false</span>);   <span class="comment">//这样才行</span></div></pre></td></tr></table></figure>
<h3 id="IE中的事件处理程序"><a href="#IE中的事件处理程序" class="headerlink" title="IE中的事件处理程序"></a>IE中的事件处理程序</h3><p>IE 实现了与 DOM 中类似的两个方法：</p>
<ul>
<li><strong>attachEvent()</strong> &nbsp;&nbsp;  添加事件</li>
<li><strong>detachEvent()</strong>  &nbsp;&nbsp;  移除事件</li>
</ul>
<p>这两个方法接受两个参数：事件处理程序的名称（<code>onclick</code>、<code>onmouseover</code>） 和 事件处理函数（一个匿名函数）。（IE 默认使用冒泡方式）</p>
<p id="div-border-left-blue">需要注意的是它 DOM2 中两个方法的区别：<br><strong>区别一：</strong> 第一个参数是 <strong>onclick</strong> ，而不是 <strong>click</strong> 。<br><strong>区别二：</strong> 事件处理程序会在全局作用于下运行，里面的 <code>this 指的是 window</code> 。（在做跨浏览器是这一点要特别注意） </p>

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'button'</span>);</div><div class="line">btn.attachEvent(<span class="string">'onclick'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="keyword">this</span> === <span class="built_in">window</span>);     <span class="comment">//true</span></div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p id="div-border-left-red"><strong>优缺点：</strong><br>优点：同样可以添加多个事件处理程序。<em>但是，这些事件是按添加的相反顺序执行。</em><br>缺点：和上面一样，使用匿名函数是不能被移除。<em>需要传入对相同函数的引用。</em> </p>

<h3 id="跨浏览器事件处理程序"><a href="#跨浏览器事件处理程序" class="headerlink" title="跨浏览器事件处理程序"></a>跨浏览器事件处理程序</h3><p>我们要创建一个方法，视情况分别使用 <strong>传统模型</strong>、<strong>DOM2级模型</strong> 或者 <strong>IE</strong> 事件处理程序。<br>这个方法接受三个参数：要操作的元素、事件类型 和 事件处理函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加事件</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">element,type,fn</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(element.addEventListener)&#123;</div><div class="line">    element.addEventListener(type,fn,<span class="literal">false</span>);</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent)&#123;</div><div class="line">    element.attachEvent(<span class="string">'on'</span>+type,fn);</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    element[<span class="string">'on'</span>+type] = fn;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//移除事件</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeEvent</span>(<span class="params">element,type,fn</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(element.removeEventListener)&#123;</div><div class="line">    element.removeEventListener(type,fn,<span class="literal">false</span>);</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.detachEvent)&#123;</div><div class="line">    element.detachEvent(<span class="string">'on'</span>+type,fn);</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    element[<span class="string">'on'</span>+type] = <span class="literal">null</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>在触发 DOM 上的某个事件时，会产生一个事件对象 <code>event</code>，这个对象中包含着所有与事件有关的信息。包括导致事件的元素、事件的类型以及其他与特定事件相关的信息。例如鼠标操作导致的事件对象中，包含鼠标位置的信息，键盘操作导致的事件对象中，包含与按键有关的信息。所有浏览器都支持 <code>event</code> 对象，不过支持的方式不同。</p>
<h3 id="W3C中的事件对象"><a href="#W3C中的事件对象" class="headerlink" title="W3C中的事件对象"></a>W3C中的事件对象</h3><p>无论指定事件处理程序时使用什么方法（DOM0级、DOM2级等），都会传入 <code>event</code> 对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">btn = <span class="built_in">document</span>.getElementById(<span class="string">'button'</span>);</div><div class="line">addEvent(btn,<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  alert(event.type);    <span class="comment">//click</span></div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<p><strong>event 对象的属性和方法：</strong> (这里之列举最常用的)</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性/方法</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">target</td>
<td style="text-align:center">事件的目标</td>
</tr>
<tr>
<td style="text-align:center">type</td>
<td style="text-align:center">被触发的事件类型</td>
</tr>
<tr>
<td style="text-align:center">currentTarget</td>
<td style="text-align:center">其事件处理程序当前正在处理事件的那个元素</td>
</tr>
<tr>
<td style="text-align:center">cancelable</td>
<td style="text-align:center">表明是否可以取消当前事件的默认行为</td>
</tr>
<tr>
<td style="text-align:center">preventDefault()</td>
<td style="text-align:center">取消时间的默认行为。如果 cancelable 是 true 就可以使用这个方法</td>
</tr>
<tr>
<td style="text-align:center">bubbles</td>
<td style="text-align:center">表明事件是否冒泡</td>
</tr>
<tr>
<td style="text-align:center">stopPropagation()</td>
<td style="text-align:center">取消时间的进一步捕获或冒泡。如果 bubbles 为 true 则可以使用这个方法</td>
</tr>
</tbody>
</table>
<p><span id="inline-red">注意：</span><br>1、在事件执行内部， <u><code>this</code> 始终等于 <code>currentTarget</code></u> 。而 <code>target</code> 只包含事件的实际目标。也就是说 <code>this</code> 和 <code>currentTarget</code> 返回的是你为事件指定的目标元素，而 <code>target</code> 是真正触发这个事件的目标。<br>2、只有 <code>cancelable</code> 的值为 <code>true</code> 的事件，才可以使用 <code>preventDefault()</code> 来取消器默认行为。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.getElementById(<span class="string">'myLink'</span>);</div><div class="line">link.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  event.preventDefault();   <span class="comment">//点击链接不会跳转</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、<strong>stopPropagation()</strong> 方法用于立即停止事件冒泡或捕获。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'button'</span>);</div><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  alert(<span class="string">'Clicked'</span>);</div><div class="line">  event.stopPropagation();    <span class="comment">//如果不阻止事件的传播，点击 btn 后下面的事件也会执行</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'Body Element'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="IE中的事件对象"><a href="#IE中的事件对象" class="headerlink" title="IE中的事件对象"></a>IE中的事件对象</h3><p>与访问 W3C 中的 event 对象不同，IE 中的 <code>event</code> 对象的访问 <u>取决于指定事件处理程序的方法</u>。<br><strong>脚本模式：</strong> event 作为 <code>window</code> 对象的一个属性存在<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> event = <span class="built_in">window</span>.event;</div><div class="line">  alert(event.type);    <span class="comment">//click</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>DOM2级：</strong> <code>event</code> 作为一个参数被传入事件处理程序。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">btn.attachEvent(<span class="string">'onlick'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  alert(event.type);    <span class="comment">//click</span></div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<p><strong>IE 中的 event 对象的属性和方法：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">属性/方法</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">cancelBubble</td>
<td style="text-align:center">默认值为 false，将其设置为 true 时可以取消事件冒泡（相当于 DOM 中的 stopPropagation() 方法）</td>
</tr>
<tr>
<td style="text-align:center">returnValue</td>
<td style="text-align:center">默认值为 true，将其设置为 false 是可以取消时间的默认行为（相当于 DOM 中的 preventDefault() 方法）</td>
</tr>
<tr>
<td style="text-align:center">srcElement</td>
<td style="text-align:center">事件的目标（和 DOM 中的 target 一样）</td>
</tr>
<tr>
<td style="text-align:center">type</td>
<td style="text-align:center">被触发事件的类型</td>
</tr>
</tbody>
</table>
<p><span id="inline-red">注意：</span><br>1、因为事件处理程序的 <strong>作用域</strong> 是由指定的方式决定的，所以要特别注意<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="built_in">window</span>.event.srcElement === <span class="keyword">this</span>);    <span class="comment">//true</span></div><div class="line">&#125;                                             <span class="comment">//这里的this指的是btnDOM</span></div><div class="line">btn.attachEvent(<span class="string">'onclick'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  alert(event.srcElement === <span class="keyword">this</span>);     <span class="comment">//false</span></div><div class="line">  &#125;);                                   <span class="comment">//因为这里的this指的是window</span></div></pre></td></tr></table></figure></p>
<p>2、只要将 <strong>returnValue</strong> 属性的值设置为 <strong>false</strong>  就可以阻止事件的默认行为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.getElementById(<span class="string">'myLink'</span>);</div><div class="line">link.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">window</span>.event.returnValue = fasle;     <span class="comment">//链接不会跳转</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、<strong>cancelBubble</strong> 属性用来停止事件的冒泡（IE不支持事件捕获）这里就不举例了。</p>
<h3 id="跨浏览器的事件对象"><a href="#跨浏览器的事件对象" class="headerlink" title="跨浏览器的事件对象"></a>跨浏览器的事件对象</h3><p>这里有4个方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEvent</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</div><div class="line">&#125;</div><div class="line"><span class="comment">//获取事件目标元素target</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTarget</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> event.target || event.srcElement;</div><div class="line">&#125;</div><div class="line"><span class="comment">//阻止默认行为</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">preventDefault</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(event.preventDefault)&#123;</div><div class="line">    event.preventDefault();</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.returnValue)&#123;</div><div class="line">    event.returnValue = <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//阻止冒泡</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopPropagation</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(event.stopPropagation)&#123;</div><div class="line">    event.stopPropagation();</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.cancelable)&#123;</div><div class="line">    event.cancelable = <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="常用事件类型汇总"><a href="#常用事件类型汇总" class="headerlink" title="常用事件类型汇总"></a>常用事件类型汇总</h2><p>常用的事件类型和具体用法你都可以在这里找到：<a href="http://www.w3cschool.cn/jsref/dom-obj-event.html" target="_blank" rel="external">HTML DOM 事件对象</a><br>自己介绍一下 <strong>鼠标事件</strong> 和 <strong>键盘事件</strong></p>
<h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><p>当浏览器执行鼠标事件的时候回以函数的形式返回一个 <strong>event</strong> 对象<br>event对象有一个 button 属相，按下鼠标的不同按键会返回不同的值（貌似很有用）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    event = event || <span class="built_in">window</span>.event;</div><div class="line">    alert(event.button);      <span class="comment">//chrome 左键弹出0 其它不支持；FF 左键0 中键1 右键2；</span></div><div class="line">                              <span class="comment">//IE 左键0 中键1 右键不支持</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//尝试一次别的事件</span></div><div class="line"><span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    event = event || <span class="built_in">window</span>.event;</div><div class="line">    alert(event.button);      <span class="comment">//chrome 、IE 和 Firefox都符合W3C标准，做到了兼容</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>键盘事件一共有三种：<br><strong>keydown</strong> &nbsp;&nbsp;  键盘按下是执行<br><strong>keyup</strong>  &nbsp;&nbsp;  键盘松开是执行<br><strong>keypress</strong> &nbsp;&nbsp; 只支持字符键（能打印出字符的键，不包括enter、shift、Ctrl等）<br>这里理解一个概念<br><strong>键码：</strong> 键盘上每个键都会对应一个数字，这个数字就称为键码。（字符的键码就是其对应的ASICC编码（字母的话按小写来），非字符也会有一个对应的值）。怎么获得这个键码呢？？用到event对象的另一个属性 <strong>keyCode</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    event = event || <span class="built_in">window</span>.event;</div><div class="line">    alert(event.keyCode);           <span class="comment">//这时按下键盘上的每个键都会返回对应的键码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果使用keypress方法来返回keyCode呢？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.onkeypress = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    event = event || <span class="built_in">window</span>.event;</div><div class="line">    alert(event.keyCode);           <span class="comment">//Chrome和IE 非字符键不返回，字符键返回对应ASCII编码，并且区分大小写</span></div><div class="line">                                    <span class="comment">//forefox 非字符键不返回，字符键全部返回 0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意：键码在不同浏览器上可能会有所不同（比如 ; 分号，，可以自己试一下）。那么怎么做到兼容呢？？再来认识一个概念：<br><strong>字符编码：</strong> 这个是唯一的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="built_in">document</span>.onkeypress = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    event = event || <span class="built_in">window</span>.event;</div><div class="line">    alert(event.charCode);           <span class="comment">//返回对应的字符编码，（;分号可以兼容了）</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p id="div-border-left-red">如果只用到字符的事件就用 keypress 的 charCode方法</p>

<h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>由于事件处理程序可以为现代 WEB 应用程序提供交互能力，因此许多开发人员会不分青红皂白地想页面中添加大量的处理程序。这样做会导致什么问题呢？首先，每个函数都是对象，都会占用内存；其次，必须事件指定好所有事件处理程序而导致 DOM 访问次数过多，延迟整个页面的交互就绪时间。<br>对“事件处理程序过多”问题的解决方案就是 <strong>事件委托</strong> 。事件委托利用 <strong>事件冒泡</strong>，只指定一个事件处理程序，就可以管理某一类型的所有事件。<br><strong>举个例子：</strong> 下面是三个不同的按钮。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>这是按钮A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>这是按钮B<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn3"</span>&gt;</span>这是按钮C<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>我们要为他们指定 <code>click</code> 事件，传统意义上我们会分别为他们指定事件，就像下面这样做：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn1 = <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</div><div class="line"><span class="keyword">var</span> btn2 = <span class="built_in">document</span>.getElementById(<span class="string">'btn2'</span>);</div><div class="line"><span class="keyword">var</span> btn3 = <span class="built_in">document</span>.getElementById(<span class="string">'btn3'</span>);</div><div class="line">btn1.click = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'这是按钮A！'</span>);</div><div class="line">&#125;</div><div class="line">btn2.click = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'这是按钮B！'</span>);</div><div class="line">&#125;</div><div class="line">btn3.click = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'这是按钮C！'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在来看看用 <strong>事件委托</strong> 应该怎么做：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">addEvent(<span class="built_in">document</span>,<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> event = getEvent(event);</div><div class="line">  <span class="keyword">var</span> target = getTarget(event);</div><div class="line">  <span class="keyword">switch</span>(target.id)&#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'btn1'</span>:</div><div class="line">      alert(<span class="string">'这是按钮A！'</span>);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'btn2'</span>:</div><div class="line">      alert(<span class="string">'这是按钮B！'</span>);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'btn3'</span>:</div><div class="line">      alert(<span class="string">'这是按钮C！'</span>);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>对比就会发现这种方式的优势，首先，我们只指定了一个事件就完成了为三个按钮添加事件的功能，较少了程序运行所需的内存；另外，只有一次 DOM 操作，这使得交互会很快就绪。是不是很完美。</p>
<p id="div-border-left-red">适合采用 <strong>事件委托</strong> 的事件包括 <code>click</code>、<code>mousedown</code>、<code>mouseup</code>、<code>keydown</code>、<code>keyup</code> 和 <code>keypress</code>。(必须支持事件冒泡)</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;转自&lt;/strong&gt;： &lt;a href=&quot;http://www.cwyaml.top/&quot;&gt;http://www.cwyaml.top/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;out-img-topic&quot;&gt;&lt;img src=&quot;http://on5pjsxrv.bkt.clouddn.com/event.png&quot; alt=&quot;markdown&quot;&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Javascript 和 HTML 之间的交互是通过 &lt;strong&gt;事件&lt;/strong&gt; 来实现的。最早在 IE 中出现，被作为分担服务器端运算负载的一种手段。到现在，几乎所有的浏览器都支持事件处理。在 DOM2 级中得到规范。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="事件" scheme="http://yoursite.com/tags/%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 文本编辑器 Atom</title>
    <link href="http://yoursite.com/2017/04/02/atom/"/>
    <id>http://yoursite.com/2017/04/02/atom/</id>
    <published>2017-04-02T02:25:45.000Z</published>
    <updated>2017-04-13T14:25:20.548Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>转自</strong>： <a href="http://www.cwyaml.top/" target="_blank" rel="external">http://www.cwyaml.top/</a></p>
</blockquote>
<div class="out-img-topic"><img src="http://on5pjsxrv.bkt.clouddn.com/atom.jpg" alt="markdown"></div>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在代码编辑器、文本编辑器领域，有着不少的「神器」级的产品，如历史悠久的 VIM、Emacs 以及如今当红的 SublimeText。另外还有 VS Code、EditPlus、NotePad++、UltraEdit 等一大堆流行的利器，可谓百家争鸣。</p>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>作为目前全球范围内影响力最大的代码仓库/开源社区，GitHub 的程序员们并不满足于此。他们使用目前最先进流行的技术重新打造了一款称为“属于21世纪”的代码编辑器——Atom， 它开源免费跨平台，并且整合 GIT 并提供类似 SublimeText 的包管理功能，支持插件扩展，可配置性非常高……</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li><strong>开源</strong>，完全 <strong>免费</strong>；</li>
<li>它提供了与 SublimeText 上类似的 <strong>Package Control</strong> (包管理)功能，人们可以非常方便地安装和管理各种插件，并将 Atom 打造成真正适合自己的开发工具；</li>
<li>Atom 编辑器可以和 <strong>GIT</strong> 完美结合，所有对代码、文本的修改都能体现在编辑器的界面上。比如在文件内新写的代码会在左边标记为绿色，删除的标记为红色，修改的标记为黄色。在左边的目录导航也能方便的看到文件改动：有改动的文件其文件名和所在文件夹名都会被标记为高亮显示。编辑器底部会显示当前所在分支和对文件的修改行数统计，对于 GIT 用户来说非常方便。</li>
<li>对前端友好。<strong>基于 WEB 技术</strong>（Chromium+Node.js）开发的，这足以让无数 WEB 工程师为之兴奋！用户可以用 Javascript 来编写编辑器插件，用 CSS 把主题界面改成任何你喜欢的样式等，这使得编写插件、主题、二次开发的门槛的降低了许多。这也能解释从 Atom 发布到现在不长的时间里，Atom 的 Package 和主题数量都快速增长上来了。</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>启动速度慢，打开大文件慢，貌似就这一个缺点！！</li>
</ul>
<h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><h3 id="Package推荐"><a href="#Package推荐" class="headerlink" title="Package推荐"></a>Package推荐</h3><ul>
<li><strong>atom-simplified-chinese-menu</strong>  汉化（如果你需要的话）</li>
<li><strong>Emmet</strong>  前端神器</li>
<li><strong>javascript-snippets</strong> js中的 emmet</li>
<li><strong>minimap</strong>  小地图（跟 sublime 上的一样）</li>
<li><strong>docblockr</strong> 养成良好的注释习惯</li>
<li><strong>atom-beautiful</strong>  代码格式化。支持HTML, CSS, JavaScript, PHP, Python, Ruby, Java, C, C++, C#, Objective-C…..</li>
<li><strong>pigments</strong>  显示颜色（rgb等都会显示）</li>
<li><strong>tree-view-background</strong> 左侧文件列表背景图片（个人感觉很简介、方便）</li>
<li><strong>Sublime-Style-Column-Selection</strong>  列编辑（也是sublime中的功能）</li>
<li><strong>markdown-scroll-sync</strong>  编辑markdown时预览页面随光标移动</li>
<li><strong>markdown-writer</strong> markdown方便管理图片链接等</li>
<li><strong>markdown-table-formatte</strong> markdown表格格式化</li>
<li><strong>highlight-selected</strong>  选中时相同文本高亮</li>
<li><strong>vimMode</strong>  如果你会使用 vim 的话（如果你不会的话最好别装，因为会有好多快捷键冲突）</li>
<li><strong>autocomplete-plus</strong>   当输入时提供可能的候选项</li>
<li><strong>autocomplete-paths</strong>  路径自动补全</li>
<li><strong>activate-power-mode</strong>  动感打字特效（这个很火但是我不喜欢）</li>
</ul>
<h3 id="Thems推荐"><a href="#Thems推荐" class="headerlink" title="Thems推荐"></a>Thems推荐</h3><ul>
<li><strong>atom-material-ui</strong>  非常漂亮的一个主题</li>
<li><strong>monokai</strong>  代码高亮</li>
</ul>
<h2 id="常见问题汇总"><a href="#常见问题汇总" class="headerlink" title="常见问题汇总"></a>常见问题汇总</h2><h3 id="关于安装插件"><a href="#关于安装插件" class="headerlink" title="关于安装插件"></a>关于安装插件</h3><p>不知道是什么原因，在编辑器里面搜索插件，一直安装不成功，翻墙也不行。所以只能本地安装。<br>1、先把插件代码库 clone 到 atom 的 <strong>插件源码目录</strong> （如果你不知道这个文件夹在哪的话，在设置中可以直接打开）。<br>2、在 插件文件夹中 执行 <code>npm install</code> (注意不要用 <code>apm install</code>)</p>
<blockquote>
<p>可能会报错，说你的 npm 版本低什么的，不要管，大概几分钟时间，一直等下去就会安装成功。</p>
</blockquote>
<h3 id="怎么修改UI"><a href="#怎么修改UI" class="headerlink" title="怎么修改UI"></a>怎么修改UI</h3><p>1、打开 <code>文件 &gt; 用户样式设置</code> 就会显示编辑器主题 style 文件，我们可以用 css 语言来自定义样式。<br>2、<code>Ctrl+shift+I</code> 快捷键打开开发者工具（跟 chrome 上的一样），你就会发现定义主题是如此的简单。</p>
<p>###代码括号配对高亮<br>atom 默认的括号匹配太不明显了，跟没有差不多。修改方法：在用户样式设置文件中添加<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//匹配括号</div><div class="line">atom-text-editor.editor .bracket-matcher .region &#123;</div><div class="line">    border-top:yellow;</div><div class="line">    border-bottom:yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="隐藏缩进指示线（中间的白线）"><a href="#隐藏缩进指示线（中间的白线）" class="headerlink" title="隐藏缩进指示线（中间的白线）"></a>隐藏缩进指示线（中间的白线）</h3><p>解决方案：编辑 &gt; 用户样式设置，添加以下代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">atom-text-editor</span><span class="selector-pseudo">::shadow</span> <span class="selector-class">.wrap-guide</span> &#123;</div><div class="line">    <span class="attribute">visibility</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="设置菜单的字体太小"><a href="#设置菜单的字体太小" class="headerlink" title="设置菜单的字体太小"></a>设置菜单的字体太小</h3><p>解决方案：编辑 &gt; 用户样式设置，添加以下代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.settings-view</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="文件标题的字体太小"><a href="#文件标题的字体太小" class="headerlink" title="文件标题的字体太小"></a>文件标题的字体太小</h3><p>解决方案：编辑 &gt; 用户样式设置，添加以下代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.tab-bar</span> <span class="selector-class">.tab</span> <span class="selector-class">.title</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;转自&lt;/strong&gt;： &lt;a href=&quot;http://www.cwyaml.top/&quot;&gt;http://www.cwyaml.top/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;out-img-topic&quot;&gt;&lt;img src=&quot;http://on5pjsxrv.bkt.clouddn.com/atom.jpg&quot; alt=&quot;markdown&quot;&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在代码编辑器、文本编辑器领域，有着不少的「神器」级的产品，如历史悠久的 VIM、Emacs 以及如今当红的 SublimeText。另外还有 VS Code、EditPlus、NotePad++、UltraEdit 等一大堆流行的利器，可谓百家争鸣。&lt;/p&gt;
    
    </summary>
    
      <category term="编辑器" scheme="http://yoursite.com/categories/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="编辑器" scheme="http://yoursite.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="Atom" scheme="http://yoursite.com/tags/Atom/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - Ajax学习笔记</title>
    <link href="http://yoursite.com/2017/03/30/Ajax/"/>
    <id>http://yoursite.com/2017/03/30/Ajax/</id>
    <published>2017-03-30T14:53:52.000Z</published>
    <updated>2017-04-13T14:24:52.848Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>转自：</strong> <a href="http://www.cwyaml.top/" target="_blank" rel="external">http://www.cwyaml.top/</a></p>
</blockquote>
<div class="out-img-topic"><img src="http://on5pjsxrv.bkt.clouddn.com/ajax.png" alt="Markdown"></div>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2005年 <strong>Jesse James Garrett</strong> 发表了一篇文章，介绍了 <strong>Ajax</strong> 这门技术。这种技术能够向服务器请求额外的数据而无需刷新页面，带来了很好的用户体验，一时间席卷全球。</p>
<a id="more"></a>
<h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><p>Ajax 技术的核心是 <code>XMLHttpRequest</code> 对象（简称XHR）。这是微软首先引入的一个特性，其他浏览器后来也都有相同的实现。XHR 为向服务器请求和解析服务器响应提供了流畅的接口。用异步的方式从服务器获取更多信息。这意味着，只要用户触发了某一事件，再不刷新网页的情况下，更新服务器最新数据。</p>
<blockquote>
<p>虽然 Ajax 中的 X 代表 XML ，但 Ajax 通信和数据格式无关，也就是说这种技术不一定使用 XML。</p>
</blockquote>
<h3 id="XHR使用方法"><a href="#XHR使用方法" class="headerlink" title="XHR使用方法"></a>XHR使用方法</h3><p>XHR 对象的使用方法总体上分为三步：<br><strong>第一步：</strong> 创建 <code>XMLHttpRequest</code> 对象。<br>W3C 支持原生的 <code>XMLHttpRequest</code> 对象，IE6使用的是 <code>MSXML</code> 库中的 <code>ActiveXObject</code> 对象，所以要做兼容！<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">'undefined'</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> ActiveXObject != <span class="string">'undefined'</span>)&#123;</div><div class="line">        <span class="keyword">var</span> version = [</div><div class="line">            <span class="string">'MSXML2.XMLhttp.6.0'</span>,</div><div class="line">            <span class="string">'MSXML2.XMLhttp.3.0'</span>,</div><div class="line">            <span class="string">'MSXML2.XMLhttp'</span></div><div class="line">        ];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; version.length;i++)&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject();</div><div class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</div><div class="line">                <span class="comment">//跳过</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'不支持Ajax！！'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> xhr = createXHR();  <span class="comment">//创建对象</span></div></pre></td></tr></table></figure></p>
<p><strong>第二步：</strong> 准备发送请求用 <code>open()</code> 方法，接受三个参数：发送方式（<code>get/post</code>）、请求的 url、同步或者异步（同步为false、异步为true）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xhr.open(<span class="string">'get'</span>,<span class="string">'demo.php'</span>,<span class="string">'false'</span>);</div></pre></td></tr></table></figure></p>
<p><strong>php 文件内容为：</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    <span class="keyword">echo</span> Date(<span class="string">'Y-m-d H:i:s'</span>);   <span class="comment">//当前时间</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>第三步：</strong> 发送请求 <code>send()</code> 方法 ，接受一个参数作为请求主体发送的数据（非 post 方式一般填 <code>null</code> 即可）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xhr.send(<span class="literal">null</span>);</div></pre></td></tr></table></figure></p>
<h2 id="同步方式"><a href="#同步方式" class="headerlink" title="同步方式"></a>同步方式</h2><p>当请求发送到服务器端，收到响应后，相应的数据会自动填充 XHR 对象的属性。一共有四个属性：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">responseText</td>
<td style="text-align:center">作为响应主体被返回</td>
</tr>
<tr>
<td style="text-align:center">responseXML</td>
<td style="text-align:center">如果响应主体内容类型是 <code>text/xml</code> 或 <code>application/xml</code>，返回包含响应数据的 XMLDOM 文档</td>
</tr>
<tr>
<td style="text-align:center">status</td>
<td style="text-align:center">响应的 HTTP 状态</td>
</tr>
<tr>
<td style="text-align:center">statusText</td>
<td style="text-align:center">HTTP 状态的说明</td>
</tr>
</tbody>
</table>
<p>接受响应之后，第一步检查 <code>status</code> 属性，以确定响应已经成功返回。<u>一般把 HTTP 状<br>态代码为 200 作为成功的标志。</u>（304 代表本地缓存中存在请求的页面缓存，也是响应成功的标志）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> xhr =  createXHR();</div><div class="line">    xhr.open(<span class="string">'get'</span>,<span class="string">'demo.php'</span>,<span class="literal">false</span>);</div><div class="line">    xhr.send(<span class="literal">null</span>);</div><div class="line">    <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</div><div class="line">        alert(xhr.responseText);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        alert(<span class="string">'请求失败'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><span id="inline-blue">注意:</span> 同步方式 <code>send()</code> 后才能收到返回数据</p>
</blockquote>
<h2 id="异步方式："><a href="#异步方式：" class="headerlink" title="异步方式："></a>异步方式：</h2><p>使用异步调用才是我们真正常用的手段。使用异步调用的时候 ，需要触发 <code>readystatechange</code> 事件，然后检测 <code>readyState</code> 属性值。<u>值为 4 时表示 接受到全部响应数据，并且可以使用</u>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> xhr = createXHR();</div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;    <span class="comment">//完全响应</span></div><div class="line">            <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</div><div class="line">                alert(xhr.responseText);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                alert(<span class="string">'请求失败！'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    xhr.open(<span class="string">'get'</span>,<span class="string">'demo.php'</span>,<span class="literal">true</span>);</div><div class="line">    xhr.send(<span class="literal">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>PS: <code>readystatechange</code> 事件要放在发送请求之前！！！</p>
</blockquote>
<h2 id="GET方式"><a href="#GET方式" class="headerlink" title="GET方式"></a>GET方式</h2><p>GET方式主要用于向服务器请求获取数据，反应在 <code>URL</code> 中：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> xhr = createXHR();</div><div class="line">   xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</div><div class="line">           <span class="keyword">if</span>(xhr.status == <span class="number">200</span> || xhr.status == <span class="number">304</span>)&#123;</div><div class="line">               alert(xhr.responseText);</div><div class="line">           &#125;<span class="keyword">else</span>&#123;</div><div class="line">               alert(<span class="string">'Ajax错误！'</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;;</div><div class="line">   <span class="keyword">var</span> url = <span class="string">'demo.php'</span>;</div><div class="line">   url = addURLParam(url,<span class="string">'name'</span>,<span class="string">'cwyaml'</span>);</div><div class="line">   url = addURLParam(url,<span class="string">'age'</span>,<span class="number">100</span>);</div><div class="line">   xhr.open(<span class="string">'get'</span>,url,<span class="literal">true</span>);</div><div class="line">   xhr.send(<span class="literal">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//编码函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addURLParam</span>(<span class="params">url,name,value</span>)</span>&#123;</div><div class="line">   url += url.indexOf(<span class="string">'?'</span>) == <span class="number">-1</span> ? <span class="string">'?'</span> : <span class="string">'&amp;'</span>;</div><div class="line">   url += <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(value);</div><div class="line">   <span class="keyword">return</span> url;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="POST方式"><a href="#POST方式" class="headerlink" title="POST方式"></a>POST方式</h2><p>在 <code>send()</code> 执行之前需要修改头部信息<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> xhr = createXHR();</div><div class="line">   xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</div><div class="line">           <span class="keyword">if</span>(xhr.status == <span class="number">200</span> || xhr.status == <span class="number">304</span>)&#123;</div><div class="line">               alert(xhr.responseText);</div><div class="line">           &#125;<span class="keyword">else</span>&#123;</div><div class="line">               alert(<span class="string">'Ajax错误！'</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;;</div><div class="line">   <span class="keyword">var</span> url = strParam(<span class="string">'name'</span>,<span class="string">'cwyaml'</span>);</div><div class="line">   url += strParam(<span class="string">'age'</span>,<span class="number">23</span>);</div><div class="line">   xhr.open(<span class="string">'get'</span>,<span class="string">'demo.php'</span>,<span class="literal">true</span>);</div><div class="line">   xhr.send(url);</div><div class="line">&#125;</div><div class="line"><span class="comment">//字符编码</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">strParam</span>(<span class="params">name,value</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(value) + <span class="string">'&amp;'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h2><p>这里的实现方式和 <code>JQuery</code> 实现 Ajax 的方式相同<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">'undefined'</span>)&#123;   <span class="comment">//W3C</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> ActiveXObject != <span class="string">'undefined'</span>)&#123;  <span class="comment">//IE</span></div><div class="line">        <span class="keyword">var</span> version = [</div><div class="line">            <span class="string">'MSXML2.XMLHttp.6.0'</span>,</div><div class="line">            <span class="string">'MSXML2.XMLHttp.3.0'</span>,</div><div class="line">            <span class="string">'MSXML2.XMLHttp'</span></div><div class="line">        ];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; version.length;i++)&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(version[i]);</div><div class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</div><div class="line">                <span class="comment">//跳过！</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'不支持Ajax!'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Ajax请求</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> xhr = createXHR();</div><div class="line">    obj.date = strParam(obj.date);  <span class="comment">//字符编码是为了解决IE缓存问题</span></div><div class="line"></div><div class="line">    <span class="comment">//判断异步</span></div><div class="line">    <span class="keyword">if</span>(obj.async === <span class="literal">true</span>)&#123;</div><div class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</div><div class="line">                callback();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//判断get</span></div><div class="line">    <span class="keyword">if</span>(obj.method === <span class="string">'get'</span>)&#123;</div><div class="line">        obj.url = obj.url + <span class="string">'?rand='</span> + <span class="built_in">Math</span>.random() + <span class="string">'&amp;'</span> + obj.date;</div><div class="line">        xhr.open(obj.method,obj.url,obj.async);</div><div class="line">        xhr.send(<span class="literal">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//判断post</span></div><div class="line">    <span class="keyword">if</span>(obj.method === <span class="string">'post'</span>)&#123;</div><div class="line">        xhr.open(obj.method,obj.url,obj.async);</div><div class="line">        xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</div><div class="line">        xhr.send(obj.date);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//判断同步      同步要放在 send 后面！！！一定要注意</span></div><div class="line">    <span class="keyword">if</span>(obj.async === <span class="literal">false</span>)&#123;</div><div class="line">        callback();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</div><div class="line">            obj.success(xhr.responseText);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            alert(<span class="string">'Ajax错误！'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//字符编码</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">strParam</span>(<span class="params">date</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> date)&#123;</div><div class="line">        arr.push(<span class="built_in">encodeURIComponent</span>(i) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(date[i]));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr.join(<span class="string">'&amp;'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//调用方法</span></div><div class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    ajax(&#123;</div><div class="line">        <span class="attr">method</span> : <span class="string">'get'</span>,</div><div class="line">        <span class="attr">url</span> : <span class="string">'demo.php'</span>,</div><div class="line">        <span class="attr">date</span>:&#123;</div><div class="line">            <span class="string">'name'</span> : <span class="string">'cwyaml'</span>,</div><div class="line">            <span class="string">'age'</span> : <span class="number">123</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</div><div class="line">            alert(text);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">async</span> : <span class="literal">true</span></div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在写浏览器兼容的时候出现了一个问题：<br>同步请求时 <code>xhr.status</code> 始终返回 0 。这令我百思不得其解，检查代码好几遍没发现错误，上百度找解决办法也没有结果，折腾了一上午时间才发现原来 <strong>把同步请求写在了 send() 前面</strong> 。我也是醉了，同步是单线程的，不发送请求怎么能得到返回数据。<br>不过这也是学习中的一点乐趣，解决问题后的心情还是很爽的。以后一定要细心再细心，不要再这些小问题上浪费太多时间。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;转自：&lt;/strong&gt; &lt;a href=&quot;http://www.cwyaml.top/&quot;&gt;http://www.cwyaml.top/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;out-img-topic&quot;&gt;&lt;img src=&quot;http://on5pjsxrv.bkt.clouddn.com/ajax.png&quot; alt=&quot;Markdown&quot;&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2005年 &lt;strong&gt;Jesse James Garrett&lt;/strong&gt; 发表了一篇文章，介绍了 &lt;strong&gt;Ajax&lt;/strong&gt; 这门技术。这种技术能够向服务器请求额外的数据而无需刷新页面，带来了很好的用户体验，一时间席卷全球。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>搭建PHP环境</title>
    <link href="http://yoursite.com/2017/03/30/php/"/>
    <id>http://yoursite.com/2017/03/30/php/</id>
    <published>2017-03-30T06:35:34.000Z</published>
    <updated>2017-04-13T14:26:20.625Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>转自</strong>： <a href="http://www.cwyaml.top/" target="_blank" rel="external">http://www.cwyaml.top/</a></p>
</blockquote>
<div class="out-img-topic"><img src="http://on5pjsxrv.bkt.clouddn.com/php.png" alt="Markdown"></div>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学习 JS Ajax 之前，先来搭建一个本地服务器环境。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们使用 WampServer，它集成了<strong>PHP + Apache + MySQL</strong>，并且有 <strong>phpmyAdmin</strong> 可视化数据库，这个对我这个新手前端来说还是很有必要的。</p>
<a id="more"></a>
<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p><strong>PHP：</strong> PHP 是一种后台操作语言，可以制作 web 页面，创建 ajax 请求，访问数据库的请求，操作数据库表格等。<br><strong>MySQL：</strong> MySQL 是数据库的服务。如果没有开启 Mysql 服务，php 中的脚本不能链接到数据库，请求服务时会提示没有 mysql 对象。<br><strong>Apache：</strong> Apache 服务，它可以解析 html 文件，解析 php 文件，提供 html 发出的 http 请求，并响应这个请求，返回给 html 一个 php 或者其他后台脚本的请求，如果你不开启 Apache 的服务，请求不能进行，无法使用 php 访问后台数据。这是一个中间的过程，目前的理解是这样的。</p>
<p><span id="inline-blue">总结:</span><br>前端访问后台，总共需要三个过程：<br><strong>首先</strong>，html 通过 Apache 服务请求 php 文件，或者其他 url 链接，如果是访问本地 php 文件，则要求两个文件在同一个服务下；<br><strong>第二步</strong>，php 文件被 Apache 服务器解析，执行 php 文件，访问后台数据库；<br><strong>第三步</strong>，执行 php 文件里的指令，访问数据库中的表，返回数据作为 html 文件中创建的请求的响应。</p>
<h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>到 <a href="http://www.wampserver.com/" target="_blank" rel="external">WampServer官网</a> 下载最新版本。<br>安装很简单，一路 next 即可。最后让你选择默认浏览器和编辑器，默认就好。<br>安装完成后用浏览器访问 localhost 就能看到：</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/php03.png" alt="markdown"></p>
<p><strong>Tools 栏目:</strong><br><code>phpinfo()</code>   查看PHP的详细配置信息；<br><code>phpmyadmin</code>  可以使用其管理界面对数据库进行管理！<br><strong>Your Aliases栏目：</strong><br><code>adminer</code> 和 <code>phpmyadmin</code> 是对数据库进行讲解的，<br><code>phpsysinfo</code> 是用来对PHP程序进行分析的。</p>
<h3 id="加载php文件"><a href="#加载php文件" class="headerlink" title="加载php文件"></a>加载php文件</h3><p>以后你自己做的 PHP 文件（html文件也行了）就放在 <code>www</code> 下就可以了。</p>
<blockquote>
<p>上面 <code>localhost</code> 打开的其实就是这个文件夹下面的 <code>index.php</code> 文件。里面的文件都可以删除。</p>
</blockquote>
<p>举个例子：打开 <code>www</code> 目录：新建一个文件夹 <code>website</code> 再在里面新建一个 <code>index.php</code> 文件，在里面输入：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"这是一个测试文件！"</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>保存（要用 UTF-8 格式）<br>在浏览器中输入 <code>localhost/website</code> 就会显示这个 <code>php</code> 文件了。</p>
<p><strong>切换语言：</strong> 打开软件后，默认最小化在系统的任务栏里。<code>右键点击 &gt; language &gt; chinese</code> 切换到中文。</p>
<p>还需要一些常用的配置。</p>
<h2 id="MySQL以及phpmyAdmin配置"><a href="#MySQL以及phpmyAdmin配置" class="headerlink" title="MySQL以及phpmyAdmin配置"></a>MySQL以及phpmyAdmin配置</h2><p>MySQL是数据库服务，顾名思义就是用来管理数据库的。（数据库就是你硬盘里的一个文件夹）</p>
<p><strong>设置密码：</strong> 左键点击软件选中 phpmyAdmin 就会进入数据库用户登录界面。默认用户名为：<code>root</code> &nbsp;&nbsp; 默认<code>密码为空</code>。</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/php01.png" alt="markdown"></p>
<p>进入后选择账户，我们会看到已经有两个默认账户了。我们来给 root 用户修改密码。<br>点 root 用户后面用户权限，然后修改密码后执行。</p>
<p>这一步只是修改了 <code>phpmyAdmin</code> 账户密码，还需要修改 MySQL 密码。</p>
<p>依次进入 <code>wamp64\apps\phpmyadmin4.6.4</code> 找到 <code>config.inc.php</code> 文件，修改 <code>$cfg[&#39;Servers&#39;][$i][&#39;password&#39;]</code> 的值（就是你刚才改的密码）。然后保存，重启 phpmyAdmin 输入用户名和密码就可以了。</p>
<p><strong>创建用户：</strong> 点击新建用户，填入用户名和密码，勾选创建与用户同名的数据库并授予所有权限，勾选全局权限，然后执行。 以后就使用我们新建的这个数据库。</p>
<p>修改后是这个样子：</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/php02.png" alt="markdown"></p>
<h2 id="Apache配置"><a href="#Apache配置" class="headerlink" title="Apache配置"></a>Apache配置</h2><h3 id="更改根目录："><a href="#更改根目录：" class="headerlink" title="更改根目录："></a>更改根目录：</h3><p>www目录 默认为 <code>X:\wamp\www</code>，也就是<u> wampserver 安装目录下的 www文件夹</u>。实际使用中，默认设置往往不是我们想要的，可能改成其他文件夹更适合，比如 D:\site 或者 E:\www 等等。那该如何更改呢？</p>
<p>下面以改为 <code>D:\site</code> 为例：</p>
<p>打开 <code>wamp\scripts\config.inc.php</code><br>第47行 $wwwDir = $c_installDir.’/www’;<br>改为：<code>$wwwDir = &#39;D:/site&#39;;</code></p>
<blockquote>
<p><strong>$c_installDir</strong> 是个变量，指 WAMPserver 安装根目录。</p>
</blockquote>
<p>打开 <code>wamp64\bin\apache\apache2.4.23\conf\httpd.conf</code><br>修改 <strong>DocumentRoot</strong> 后面双引号中的值<br>比如将  DocumentRoot ‘D:/wamp/www/‘’<br>改成   <code>DocumentRoot &#39;D:/site/&#39;</code><br>同时将     &lt;Directory ‘D:/wamp/www/‘&gt;<br>改成  <code>&lt;Directory &#39;D:/site/&#39;&gt;;</code></p>
<h3 id="修改默认端口"><a href="#修改默认端口" class="headerlink" title="修改默认端口"></a>修改默认端口</h3><p>找到 Apache 安装目录下的 <code>httpd.conf</code> 文件（在 wamp 上的 Apache 项下面）<br>打开它，找到 <code>Listen 80</code>（IPV4）、<code>Listen [::0]:80</code>(IPV6) 和 <code>ServerName localhost:80</code>  紧接着 Listen 的数字就是端口号，默认状态下为  80 。修改为 8080 保存即可。</p>
<p>上面只是修改了 Apache 服务的端口，还要修改：</p>
<p>找到 <code>X:\wamp\wampmanager.tpl</code> 文件，用文本编辑器打开，Ctrl+F 搜索 <code>http://localhost</code> 关键字，改成下面：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Type: item; Caption: <span class="string">"$&#123;w_localhost&#125;"</span>; Action: run; FileName: <span class="string">"$&#123;c_navigator&#125;"</span>; Parameters: <span class="string">"$&#123;c_edge&#125;http://localhost:8080$&#123;UrlPort&#125;/"</span>; Glyph: <span class="number">27</span></div><div class="line">Type: item; Caption: <span class="string">"$&#123;w_phpmyadmin&#125;"</span>; Action: run; FileName: <span class="string">"$&#123;c_navigator&#125;"</span>; Parameters: <span class="string">"$&#123;c_edge&#125;http://localhost:8080$&#123;UrlPort&#125;/phpmyadmin/"</span>; Glyph: <span class="number">28</span></div></pre></td></tr></table></figure></p>
<p id="div-border-left-red">PS： 网上还有一些配置，比如说外网访问什么的，个人感觉不需要，自己也没去实验就不写了！！什么时候用到了在折腾。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;转自&lt;/strong&gt;： &lt;a href=&quot;http://www.cwyaml.top/&quot;&gt;http://www.cwyaml.top/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;out-img-topic&quot;&gt;&lt;img src=&quot;http://on5pjsxrv.bkt.clouddn.com/php.png&quot; alt=&quot;Markdown&quot;&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;学习 JS Ajax 之前，先来搭建一个本地服务器环境。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;我们使用 WampServer，它集成了&lt;strong&gt;PHP + Apache + MySQL&lt;/strong&gt;，并且有 &lt;strong&gt;phpmyAdmin&lt;/strong&gt; 可视化数据库，这个对我这个新手前端来说还是很有必要的。&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="PHP环境" scheme="http://yoursite.com/tags/PHP%E7%8E%AF%E5%A2%83/"/>
    
      <category term="WampServer" scheme="http://yoursite.com/tags/WampServer/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - JSON学习笔记</title>
    <link href="http://yoursite.com/2017/03/29/json/"/>
    <id>http://yoursite.com/2017/03/29/json/</id>
    <published>2017-03-29T14:31:56.000Z</published>
    <updated>2017-04-13T14:26:01.841Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>转自</strong>： <a href="http://www.cwyaml.top/" target="_blank" rel="external">http://www.cwyaml.top/</a></p>
</blockquote>
<div class="out-img-topic"><img src="http://on5pjsxrv.bkt.clouddn.com/json.png" alt="Markdown"></div>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前几天学习了 XML ，趁热打铁也把 JSON 做一下总结。首先 JSON 也是一种结构化数据，它的产生解决了 XML 过于繁琐的问题。它是 JS 的一个严格子集，利用 js 中的一些模式来表述数据化结构。不仅仅是 JS ，java、.NET 等其他语言也可以对 JSON 进行解析和序列化。</p>
<a id="more"></a>
<h2 id="JSON语法"><a href="#JSON语法" class="headerlink" title="JSON语法"></a>JSON语法</h2><p>JSON 的语法可以表示三种类型的值：<strong>简单值</strong>（字符串、数值、布尔值和null）、<strong>对象</strong>和<strong>数组</strong>。（<em>JSON 中没有 undefined</em>）<br>JSON 简单值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">100</span>,cwyaml,<span class="literal">true</span>,<span class="literal">null</span>    <span class="comment">//这些都是JSON简单值</span></div></pre></td></tr></table></figure></p>
<p>JSON 对象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'&#123;"name":"cwyaml","age":23&#125;'</span></div></pre></td></tr></table></figure></p>
<p>JSON 数组：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'[100,"cwyaml",true]'</span></div></pre></td></tr></table></figure></p>
<p>相比普通的对象和数组，JSON 对象和数组少了结尾的分号和变量赋值，但是要用单引号包裹，用字符串形式表示。<br><strong>最常用的 JSON 形式：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">&#123;</div><div class="line">    <span class="string">"name"</span> : <span class="string">"a"</span>,</div><div class="line">    <span class="string">"num"</span> : <span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">&#123;</div><div class="line">    <span class="string">"name"</span> : <span class="string">"b"</span>,</div><div class="line">    <span class="string">"num"</span> : <span class="number">2</span></div><div class="line">    &#125;,</div><div class="line">&#123;</div><div class="line">    <span class="string">"name"</span> : <span class="string">"c"</span>,</div><div class="line">    <span class="string">"num"</span> : <span class="number">3</span></div><div class="line">&#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>ECMAScript5 对解析 JSON 的行为进行了规范，定义了全局对象JSON。但是支持这个对象的浏览器有IE8+ FireFox3.5+ Safari4+ Chrome10.5+ 。（版本较高），不支持的浏览器可以通过一个开源库 json.js 来模拟执行。</p>
<p><strong>JSON 对象提供了两个方法：</strong></p>
<h3 id="stringify-方法"><a href="#stringify-方法" class="headerlink" title="stringify()方法"></a>stringify()方法</h3><p>stringify()  &nbsp;&nbsp;   将源生的 js 值转换为 JSON 对象<br>这个方法可以传三个参数，分别是需要转换的对象，过滤参数（数组的形式），转换的格式。<br>最简单的用法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> box = [</div><div class="line">    &#123;</div><div class="line">        <span class="attr">name</span> : <span class="string">'a'</span>,</div><div class="line">        <span class="attr">num</span> : <span class="number">1</span></div><div class="line">    &#125;,&#123;</div><div class="line">        <span class="attr">name</span> : <span class="string">'b'</span>,</div><div class="line">        <span class="attr">num</span> : <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">];</div><div class="line"><span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(box);</div><div class="line">alert(str);     <span class="comment">//[&#123;"name":"a","num":1&#125;,&#123;"name":"b","num":2&#125;]</span></div></pre></td></tr></table></figure></p>
<p>三个参数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(box,[<span class="string">'name'</span>],<span class="number">4</span>);</div><div class="line"><span class="built_in">console</span>.log(str);  </div><div class="line"></div><div class="line"><span class="comment">//打印出来的字符串是有格式的：     </span></div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"name"</span>: <span class="string">"a"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"name"</span>: <span class="string">"b"</span></div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>第二个参数也可以是一个函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="built_in">JSON</span>.stringify(box,<span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(key == <span class="string">'name'</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'Mr.'</span> + value;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(str);   <span class="comment">//[&#123;"name":"Mr.a","num":1&#125;,&#123;"name":"Mr.b","num":2&#125;]</span></div></pre></td></tr></table></figure></p>
<h3 id="parse-方法"><a href="#parse-方法" class="headerlink" title="parse()方法"></a>parse()方法</h3><p><strong>parse()</strong>  &nbsp;&nbsp;   将JSON 字符串转换为js原生值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> box = <span class="string">'[&#123;"name":"a","num":1&#125;,&#123;"name":"b","num":2&#125;]'</span>;</div><div class="line"><span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(box);</div><div class="line">alert(json[<span class="number">0</span>].name);    <span class="comment">//a</span></div><div class="line"></div><div class="line"><span class="comment">//也可以传递两个参数</span></div><div class="line"><span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(box,<span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(key == <span class="string">'name'</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">'Mr'</span>+ value;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">alert(json[<span class="number">0</span>].name);    <span class="comment">//Mr.a</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;转自&lt;/strong&gt;： &lt;a href=&quot;http://www.cwyaml.top/&quot;&gt;http://www.cwyaml.top/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;out-img-topic&quot;&gt;&lt;img src=&quot;http://on5pjsxrv.bkt.clouddn.com/json.png&quot; alt=&quot;Markdown&quot;&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前几天学习了 XML ，趁热打铁也把 JSON 做一下总结。首先 JSON 也是一种结构化数据，它的产生解决了 XML 过于繁琐的问题。它是 JS 的一个严格子集，利用 js 中的一些模式来表述数据化结构。不仅仅是 JS ，java、.NET 等其他语言也可以对 JSON 进行解析和序列化。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="JSON" scheme="http://yoursite.com/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - XPath学习笔记</title>
    <link href="http://yoursite.com/2017/03/12/xPath/"/>
    <id>http://yoursite.com/2017/03/12/xPath/</id>
    <published>2017-03-12T13:29:31.000Z</published>
    <updated>2017-04-13T14:26:47.307Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>转自</strong>： <a href="http://www.cwyaml.top/" target="_blank" rel="external">http://www.cwyaml.top/</a></p>
</blockquote>
<div class="out-img-topic"><img src="http://on5pjsxrv.bkt.clouddn.com/xpath.png" alt="Markdown"></div>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XPath 是一种节点查找手段。它比使用 标准DOM 去查找 XML 节点更加方便、更加简单。但是 XPath 是 DOM3 中才支持的标准，并且 IE 有自己的实现方式。（IE总是自己造马车）</p>
<a id="more"></a>
<h2 id="IE中的XPath"><a href="#IE中的XPath" class="headerlink" title="IE中的XPath"></a>IE中的XPath</h2><p>IE 提供了两种方法：</p>
<ul>
<li><p><strong>selectSingleNode()</strong>  获取单一节点</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xmlStr = <span class="string">'&lt;root&gt;&lt;user id="1"&gt;Tom&lt;/user&gt;&lt;user id="2"&gt;Lucy&lt;/user&gt;&lt;/root&gt;'</span>;</div><div class="line"><span class="keyword">var</span> xmlDom = parseXML(xmlStr);  <span class="comment">//创建xmlDom对象</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> node = xmlDom.selectSingleNode(<span class="string">'root/user'</span>);    <span class="comment">//种方式称为节点树查找，必须从最外层开始，由外向内</span></div><div class="line"><span class="comment">//只会获得第一个 user</span></div><div class="line">alert(node.tagName);    <span class="comment">//user</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>selectNodes() </strong>    获取节点集合</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nodes = xmlDom.selectNodes(<span class="string">'root/user'</span>);    <span class="comment">//返回的是一个数组</span></div><div class="line">alert(nodes.length);    <span class="comment">//2</span></div><div class="line"></div><div class="line"><span class="comment">//一般这样用</span></div><div class="line"><span class="keyword">var</span> nodes = xmlDom.selectNodes(<span class="string">'root[1]/user'</span>); <span class="comment">//获取第二个root下的所有user</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="W3C中的XPath"><a href="#W3C中的XPath" class="headerlink" title="W3C中的XPath"></a>W3C中的XPath</h2><p>在 DOM3 中 XPath 规范中，最重要的两个类型是 XPathEvaluator 和 XPathResult 。其中 XPathEvaluator 用于在特定上下文对 XPath 表达式求值。</p>
<p><strong>XPathEvaluator</strong> 方法一共需要传递五个参数：<br>1.XPath路径 2.上下文节点 3.命名空间求解器（null） 4.返回结果类型 5.保存结果的 XPath 对象（null）<br>获取成功就返回对应的类型值，获取失败返回 null。</p>
<p><strong>返回的结果类型</strong>一共有十种，常用的就两种：</p>
<table>
<thead>
<tr>
<th style="text-align:center">常量</th>
<th style="text-align:center">值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">XPathResult_FIRST_ORDERED_NODE_TYPE</td>
<td style="text-align:center">返回单一节点  </td>
</tr>
<tr>
<td style="text-align:center">XPathResult_ORDERED_NODE_ITERATOR_TYPE</td>
<td style="text-align:center">返回节点集合  </td>
</tr>
</tbody>
</table>
<h3 id="获取单一节点"><a href="#获取单一节点" class="headerlink" title="获取单一节点"></a>获取单一节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = xmlDom.evaluate(<span class="string">'root/user'</span>,xmlDom,<span class="literal">null</span>,XPathResult.FIRST_ORDERED_NODE_TYPE,<span class="literal">null</span>);</div><div class="line"><span class="keyword">if</span>(result !== <span class="literal">null</span>)&#123;</div><div class="line">  alert(result.singleNodeValue.textContent);  <span class="comment">//Tom   </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取节点集合"><a href="#获取节点集合" class="headerlink" title="获取节点集合"></a>获取节点集合</h3><p>获取的时候只需要把返回值的类型修改为 <strong>获取节点集合</strong> 即可。<br>得到的节点集合需要用 <strong>iterateNext()</strong> 方法使用迭代方法存入一个数组。这样就可以对数据进行操作了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = xmlDom.evaluate(<span class="string">'root/user'</span>,xmlDom,<span class="literal">null</span>,XPathResult.ORDERED_NODE_ITERATOR_TYPE,<span class="literal">null</span>);</div><div class="line"><span class="keyword">if</span>(result !== <span class="literal">null</span>)&#123;</div><div class="line">    <span class="keyword">var</span> nodes = [];</div><div class="line">    <span class="keyword">var</span> node = result.iterateNext();</div><div class="line">    <span class="keyword">while</span>(node !== <span class="literal">null</span>)&#123;</div><div class="line">        nodes.push(node);</div><div class="line">        node = result.iterateNext();</div><div class="line">    &#125;</div><div class="line"><span class="built_in">console</span>.log(nodes[<span class="number">1</span>].innerHTML);    <span class="comment">//Lucy</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="XPath-常用语法"><a href="#XPath-常用语法" class="headerlink" title="XPath 常用语法"></a>XPath 常用语法</h2><p>XML加载之后就可以使用标准DOM来进行各种操作，比如上面的返回 tagName 。当然 XPath 也提供了一套方法：（这里只列举最常用的）</p>
<ul>
<li>相同标签问题<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> node = xmlDom.selectSingleNode(<span class="string">'root/user[1]'</span>); </div><div class="line">alert(serializeXML(node));  <span class="comment">//&lt;user id="2"&gt;Lucy&lt;/user&gt;  第二个user</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p id="div-border-left-red" style="margin-left: 25px"><strong>IE中下标从 0 开始！！   W3C中下标从 1 开始！！</strong></p>

<ul>
<li><p>获取元素内文本</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> node = xmlDom.selectSingleNode(<span class="string">'root/user/text()'</span>);</div><div class="line">alert(serializeXML(node));    <span class="comment">//Tom</span></div></pre></td></tr></table></figure>
</li>
<li><p>跨结构查找(不关心结构层次)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> node = xmlDom.selectSingleNode(<span class="string">'//user'</span>);   <span class="comment">//查找整个文档中第一个user</span></div><div class="line"><span class="keyword">var</span> node = xmlDom.selectSingleNode(<span class="string">'b//user'</span>);  <span class="comment">//也可以限制在一个标签内查找</span></div><div class="line">alert(serializeXML(node));</div></pre></td></tr></table></figure>
</li>
<li><p>通过属性查找</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> node = xmlDom.selectSingleNode(<span class="string">'root/user[@id=2]'</span>);</div><div class="line">alert(serializeXML(node));  <span class="comment">//&lt;user id="2"&gt;Tom&lt;/user&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="跨浏览器兼容"><a href="#跨浏览器兼容" class="headerlink" title="跨浏览器兼容"></a>跨浏览器兼容</h2><p>鉴于IE中的相对功能较少，首先考虑 W3C。</p>
<h3 id="获取单一节点-1"><a href="#获取单一节点-1" class="headerlink" title="获取单一节点"></a>获取单一节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取单一节点  </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectSingleNode</span>(<span class="params">xmlDom,xpath</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> node = <span class="literal">null</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> xmlDom.evaluate != <span class="string">'undefined'</span>)&#123;  <span class="comment">//W3C</span></div><div class="line">        <span class="comment">//让下标从 0 开始</span></div><div class="line">        <span class="keyword">var</span> patten = <span class="regexp">/\[(\d+)\]/</span>;</div><div class="line">        <span class="keyword">var</span> flag = xpath.match(patten);</div><div class="line">        <span class="keyword">var</span> num = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(flag != <span class="literal">null</span>)&#123;</div><div class="line">            num = <span class="built_in">parseInt</span>(<span class="built_in">RegExp</span>.$<span class="number">1</span>) + <span class="number">1</span>;</div><div class="line">            xpath = xpath.replace(patten,<span class="string">'['</span> + num + <span class="string">']'</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> result = xmlDom.evaluate(xpath,xmlDom,<span class="literal">null</span>,XPathResult.FIRST_ORDERED_NODE_TYPE,<span class="literal">null</span>);</div><div class="line">        <span class="keyword">if</span>(result !== <span class="literal">null</span>)&#123;</div><div class="line">            node = result.singleNodeValue;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> xmlDom.selectSingleNode != <span class="string">'undefined'</span>)&#123;    <span class="comment">//IE</span></div><div class="line">        node = xmlDom.selectSingleNode(xpath);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> node;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取节点集合-1"><a href="#获取节点集合-1" class="headerlink" title="获取节点集合"></a>获取节点集合</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取节点集合</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectNodes</span>(<span class="params">xmlDom,xpath</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> nodes = [];</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> xmlDom.evaluate != <span class="string">'undefined'</span>)&#123;  <span class="comment">//W3C</span></div><div class="line">        <span class="comment">//让下标从 0 开始</span></div><div class="line">        <span class="keyword">var</span> patten = <span class="regexp">/\[(\d+)\]/</span>;</div><div class="line">        <span class="keyword">var</span> flag = xpath.match(patten);</div><div class="line">        <span class="keyword">var</span> num = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(flag != <span class="literal">null</span>)&#123;</div><div class="line">            num = <span class="built_in">parseInt</span>(<span class="built_in">RegExp</span>.$<span class="number">1</span>) + <span class="number">1</span>;</div><div class="line">            xpath = xpath.replace(patten,<span class="string">'['</span> + num + <span class="string">']'</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> result = xmlDom.evaluate(xpath,xmlDom,<span class="literal">null</span>,XPathResult.ORDERED_NODE_ITERATOR_TYPE,<span class="literal">null</span>);</div><div class="line">        <span class="keyword">if</span>(result !== <span class="literal">null</span>)&#123;</div><div class="line">            <span class="keyword">var</span> node = <span class="literal">null</span>;</div><div class="line">            <span class="keyword">while</span>((node = result.iterateNext())!= <span class="literal">null</span>)&#123;</div><div class="line">                nodes.push(node);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> xmlDom.selectNodes != <span class="string">'undefined'</span>)&#123; <span class="comment">//IE</span></div><div class="line">        nodes = xmlDom.selectNodes(xpath);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> nodes;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;转自&lt;/strong&gt;： &lt;a href=&quot;http://www.cwyaml.top/&quot;&gt;http://www.cwyaml.top/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;out-img-topic&quot;&gt;&lt;img src=&quot;http://on5pjsxrv.bkt.clouddn.com/xpath.png&quot; alt=&quot;Markdown&quot;&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;XPath 是一种节点查找手段。它比使用 标准DOM 去查找 XML 节点更加方便、更加简单。但是 XPath 是 DOM3 中才支持的标准，并且 IE 有自己的实现方式。（IE总是自己造马车）&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="XPath" scheme="http://yoursite.com/tags/XPath/"/>
    
  </entry>
  
  <entry>
    <title>HEXO+GitHub,搭建博客 - 域名绑定</title>
    <link href="http://yoursite.com/2017/03/09/wwwyuming/"/>
    <id>http://yoursite.com/2017/03/09/wwwyuming/</id>
    <published>2017-03-09T06:50:21.000Z</published>
    <updated>2017-04-13T14:26:43.021Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>转自</strong>： <a href="http://www.cwyaml.top/" target="_blank" rel="external">http://www.cwyaml.top/</a></p>
</blockquote>
<div class="out-img-topic"><img src="http://on5pjsxrv.bkt.clouddn.com/%E5%9F%9F%E5%90%8D.jpg" alt="Markdown"></div>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面也讲过了，我们把博客同时托管到 Github 和 Coding。我们就有两个域名可以访问站点，但是又出现几个问题：使用的不是自己的域名；两个地址的统计信息（文章阅读量，访问量等）相互独立，不能合并；github pages国内访问速度慢（300ms左右，毕竟国外的服务器）。</p>
<a id="more"></a>
<p>这就有点坑爹了，强迫症怎么能忍。下面给出解决方法。。</p>
<p><span id="inline-blue">解决方案：</span><br>我们知道 github 和 coding 的 pages 服务都提供 <code>自定义域名</code> 功能。我们可以利用这一点，绑定自己的域名。域名解析的时候实现国内访问 coding pages ，国外访问 github pages ,从而加快访问速度。 具体怎么实现，往下看：</p>
<h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><p>首先我们要购买一个域名，推荐到 <a href="https://wanwang.aliyun.com/?spm=5176.8142029.388261.25.nvxK84" target="_blank" rel="external">万网</a> 购买。（毕竟很方便）<br>具体步骤可以参考这篇文章：<a href="http://jingyan.baidu.com/article/4853e1e513d0061908f7265b.html" target="_blank" rel="external">万网域名注册教程</a>。</p>
<p id="div-border-left-red">购买域名一定要实名认证，否则会停止解析</p>

<h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>这一步是最重要的，我们要把域名指向 github 和 coding 的服务器空间。</p>
<ul>
<li>登录阿里云，进入 <strong>控制台</strong> 。依次点击 <strong>域名与网站</strong> &gt; <strong>云解析DNS</strong> 就会出现你购买的域名信息</li>
</ul>
<p><img src="http://on5sixmz1.bkt.clouddn.com/%E5%9F%9F%E5%90%8D01.png" alt="Markdown"></p>
<ul>
<li>点击 <strong>解析</strong>，然后按照下图依次添加解析：（这张图片可以放大）</li>
</ul>
<p><img src="http://on5sixmz1.bkt.clouddn.com/%E5%9F%9F%E5%90%8D02.png" alt="Markdown"></p>
<p id="div-border-left-red">从上图可以看出，我们的解析实现了分流。国内线路访问Coding pages，国际线路访问Github Pages。</p>

<h3 id="托管平台设置"><a href="#托管平台设置" class="headerlink" title="托管平台设置"></a>托管平台设置</h3><h4 id="Coding平台"><a href="#Coding平台" class="headerlink" title="Coding平台"></a>Coding平台</h4><p>进入对应项目的 pages 设置页面（项目 &gt; 代码 &gt; pages服务）</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/%E5%9F%9F%E5%90%8D04.png" alt="Markdown"></p>
<p>成功后会显示：</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/%E5%9F%9F%E5%90%8D03.png" alt="Markdown"></p>
<h4 id="Github平台"><a href="#Github平台" class="headerlink" title="Github平台"></a>Github平台</h4><p>进入对应项目的 pages 设置页面（setting &gt; github pages &gt; Custom domain)</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/%E5%9F%9F%E5%90%8D05.png" alt="Markdown"></p>
<p>成功后会显示：</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/%E5%9F%9F%E5%90%8D06.png" alt="Markdown"></p>
<p>到此我们的博客就可以正常运行了！！</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一切搞定后，在回头看一下我们的问题：<br><strong>@</strong> 两个地址的统计信息（文章阅读量，访问量等）相互独立，不能合并；</p>
<blockquote>
<p>从两个地址访问都会跳转到我们绑定的域名。统计信息自然也是绑定后域名的信息。</p>
</blockquote>
<p><strong>@</strong> github pages国内访问速度慢（300ms左右） </p>
<blockquote>
<p>我们测试一下 Ping：(表现不错)</p>
</blockquote>
<p><img src="http://on5sixmz1.bkt.clouddn.com/%E5%9F%9F%E5%90%8D07.png" alt="Markdown"></p>
<p><strong>@</strong> 托管平台给出的二级域名太丑。</p>
<blockquote>
<p>不存在的…..</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;转自&lt;/strong&gt;： &lt;a href=&quot;http://www.cwyaml.top/&quot;&gt;http://www.cwyaml.top/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;out-img-topic&quot;&gt;&lt;img src=&quot;http://on5pjsxrv.bkt.clouddn.com/%E5%9F%9F%E5%90%8D.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前面也讲过了，我们把博客同时托管到 Github 和 Coding。我们就有两个域名可以访问站点，但是又出现几个问题：使用的不是自己的域名；两个地址的统计信息（文章阅读量，访问量等）相互独立，不能合并；github pages国内访问速度慢（300ms左右，毕竟国外的服务器）。&lt;/p&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Next+Hexo" scheme="http://yoursite.com/tags/Next-Hexo/"/>
    
      <category term="博客搭建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="域名" scheme="http://yoursite.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>HEXO 博客同时部署到 GitHub &amp; Coding</title>
    <link href="http://yoursite.com/2017/03/08/github&amp;coding/"/>
    <id>http://yoursite.com/2017/03/08/github&amp;coding/</id>
    <published>2017-03-08T05:08:44.000Z</published>
    <updated>2017-04-13T14:24:25.171Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>转自：</strong> <a href="http://www.cwyaml.top/" target="_blank" rel="external">http://www.cwyaml.top/</a></p>
</blockquote>
<div class="out-img-topic"><img src="http://on5pjsxrv.bkt.clouddn.com/github&amp;coding.png" alt="Markdown"></div>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很多人都把 hexo 托管到 Github 上，因为 Github 大家都用的比较久了。但是，你的博客主要访问者肯定还是国内的用户，国内的用户访问 coding 比 github 是要快不少的。还可以<u>利用域名解析实现国内的走 coding，海外的走github，</u>分流网站的访问。</p>
<a id="more"></a>
<h3 id="注册GitHub和Coding"><a href="#注册GitHub和Coding" class="headerlink" title="注册GitHub和Coding"></a>注册GitHub和Coding</h3><p><a href="https://github.com/" target="_blank" rel="external">github官网</a>  &nbsp;&nbsp;||&nbsp;&nbsp;   <a href="https://coding.net" target="_blank" rel="external">Coding官网</a> &nbsp;&nbsp;注册就不必多说，不会的可自行百度。<br><strong>需要注意的是</strong>：最好使用同一个 <strong>用户名</strong> 和 <strong>邮箱</strong> ，以免引起不必要的麻烦。</p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>在GitHub上创建项目，名称为：<strong>yourname.github.io</strong><br>在Coding上创建项目，名称为：<strong>yourname</strong></p>
<h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><p>配置 shh key 是让本地 git 项目与远程的 github 建立联系</p>
<h4 id="获取ssh"><a href="#获取ssh" class="headerlink" title="获取ssh"></a>获取ssh</h4><ul>
<li><p>检查是否已经有SSH Key，打开 <code>Git Bash</code>，输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh</div></pre></td></tr></table></figure>
</li>
<li><p>如果没有 <strong>.ssh</strong> 这个目录，则生成一个新的 SSH，输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;your e-mail&quot;</div></pre></td></tr></table></figure>
<p id="div-border-left-red"> <strong>注意:</strong>  此处的邮箱地址，是你注册 <strong>GitHub</strong> 和 <strong>coding</strong> 时的邮箱地址; 此处的<strong>「-C」</strong>的是大写的<strong>「C」</strong> 。</p>
</li>
<li><p>接下来几步都直接按回车键,然后系统会要你输入密码 (防止别人往你的项目里提交内容)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;</div><div class="line">Enter same passphrase again:&lt;再次输入加密串&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>成功后，我们打开 <em>C:\Users\cwyaml.ssh</em> 打开 <em>id_rsa.pub</em> 文件。里面的代码就是 ssh key。</p>
<h4 id="添加-SSH-Key-到-GitHub-和-Coding"><a href="#添加-SSH-Key-到-GitHub-和-Coding" class="headerlink" title="添加 SSH Key 到 GitHub 和 Coding"></a>添加 SSH Key 到 GitHub 和 Coding</h4><p><strong>GitHub添加方法：</strong></p>
<ul>
<li>进入Github官网，点击头像，再按 <em>settings</em> 进入设置。</li>
<li>点击 <em>New SSH key</em> 创建 </li>
<li>title输入邮箱，key里面粘贴刚才右击复制的内容,再点 <em>Add SSH key</em> 即可。（会让你输入密码）</li>
</ul>
<p><img src="http://on5sixmz1.bkt.clouddn.com/github&amp;coding01.png" alt="Markdown"></p>
<p><strong>Coding添加方法：</strong></p>
<ul>
<li>登录账号后点击 <em>左侧账户</em></li>
<li>在点 <em>SSH公钥</em> 设置即可 。（同样要输入密码）</li>
</ul>
<p><img src="http://on5sixmz1.bkt.clouddn.com/github&amp;coding02.png" alt="Markdown"></p>
<h4 id="测试SSH是否配置成功"><a href="#测试SSH是否配置成功" class="headerlink" title="测试SSH是否配置成功"></a>测试SSH是否配置成功</h4><p>打开 <code>Git Bash</code>，首先测试 GitHub 是否成功？输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>(如配置了密码则要输入密码,输完按回车。)如果显示以下内容，则说明 Github 中的 ssh 配置成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not</div><div class="line">provide shell access.</div></pre></td></tr></table></figure></p>
<p>然后测试 Coding 是否成功？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@git.coding.net</div></pre></td></tr></table></figure></p>
<p>如果显示以下则说明配置成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello username You&apos;ve connected to Coding.net by SSH successfully!</div></pre></td></tr></table></figure></p>
<h3 id="上传博客文件"><a href="#上传博客文件" class="headerlink" title="上传博客文件"></a>上传博客文件</h3><p><strong>修改站点配置文件：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo:</div><div class="line">    github: git@github.com:cwyaml/cwyaml.github.io.git,master</div><div class="line">    coding: git@git.coding.net:cwyaml/cwyaml.git,master</div></pre></td></tr></table></figure></p>
<p>然后你就可以 <code>hexo c、hexo g、hexo d</code> 了。</p>
<h3 id="开启pages服务"><a href="#开启pages服务" class="headerlink" title="开启pages服务"></a>开启pages服务</h3><p>GitHub 已经默认开启，就不必多说了。<br>Coding 进入对应项目，点击 <strong>代码&gt;pages服务</strong> ，把部署来源改为 <strong>master</strong> 即可。</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/github&amp;coding03.png" alt="Markdown"></p>
<h3 id="访问博客"><a href="#访问博客" class="headerlink" title="访问博客"></a>访问博客</h3><p>这样我们整个部署过程就完成了。有两个地址可以访问我们的博客：<br>GitHub pages：<a href="https://cwyaml.github.io" target="_blank" rel="external">https://cwyaml.github.io</a><br>Coding pages：<a href="https://cwyaml.coding.me" target="_blank" rel="external">https://cwyaml.coding.me</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;转自：&lt;/strong&gt; &lt;a href=&quot;http://www.cwyaml.top/&quot;&gt;http://www.cwyaml.top/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;out-img-topic&quot;&gt;&lt;img src=&quot;http://on5pjsxrv.bkt.clouddn.com/github&amp;amp;coding.png&quot; alt=&quot;Markdown&quot;&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;很多人都把 hexo 托管到 Github 上，因为 Github 大家都用的比较久了。但是，你的博客主要访问者肯定还是国内的用户，国内的用户访问 coding 比 github 是要快不少的。还可以&lt;u&gt;利用域名解析实现国内的走 coding，海外的走github，&lt;/u&gt;分流网站的访问。&lt;/p&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Next+Hexo" scheme="http://yoursite.com/tags/Next-Hexo/"/>
    
      <category term="博客搭建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>HEXO+GitHub,搭建博客 - 备份</title>
    <link href="http://yoursite.com/2017/03/07/backup/"/>
    <id>http://yoursite.com/2017/03/07/backup/</id>
    <published>2017-03-07T08:26:30.000Z</published>
    <updated>2017-04-13T14:25:14.115Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>转自</strong>： <a href="http://www.cwyaml.top/" target="_blank" rel="external">http://www.cwyaml.top/</a></p>
</blockquote>
<div class="out-img-topic"><img src="http://on5pjsxrv.bkt.clouddn.com/backup.png" alt="Markdown"></div>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用Hexo写博客是一件比较享受的事情，无奈如果换电脑或者系统崩了的话，你就会一脸懵B了，备份博客就显得尤为重要。先说说我的感受，博客刚搭建好的时候就想过这个问题，那时候对 <code>git</code> 似懂非懂吧。在网上找了很多教程方法，大概就是说要创建一个分支来存放 blog 文件，但是翻腾来翻腾去还是没有搞定。<a id="more"></a> 最后索性简单粗暴点，<u><strong>在 GitHub 上创建一个仓库，把 blog 文件整个打包上传。</strong></u>使用过程中发现这个方法还不错，至少对于小白来说很容易理解，也很难出错，就一直沿用到现在。</p>
<p id="div-border-left-red">这种方式虽然能够备份 Hexo 博客的源文件，但是对于博主这种懒人，每次更新博文都需要输入两三行重复的Git命令真是一件麻烦的事情。</p> 

<h3 id="自动备份"><a href="#自动备份" class="headerlink" title="自动备份"></a>自动备份</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>本方法需要提前将 Hexo 加入 Git仓库 并与 Github 远程仓库绑定之后，才能正常工作。<br><strong>具体做法可以参考：</strong><a href="https://cwyaml.github.io/2017/01/08/update%20to%20github/" target="_blank" rel="external">上传本地项目到GitHub</a></p>
<h4 id="安装-shelljs-模块"><a href="#安装-shelljs-模块" class="headerlink" title="安装 shelljs 模块"></a>安装 shelljs 模块</h4><p>要实现这个自动备份功能，需要依赖 <code>NodeJs</code> 的一个 <code>shelljs 模块</code>,该模块重新包装了 child_process,调用系统命令更加的方便。<br>使用以下命令，完成 shelljs 模块的安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save shelljs</div></pre></td></tr></table></figure></p>
<h4 id="编写自动备份脚本"><a href="#编写自动备份脚本" class="headerlink" title="编写自动备份脚本"></a>编写自动备份脚本</h4><p>待到模块安装完成，在<strong>Hexo根目录</strong> 的 <strong>scripts</strong>文件夹下新建一个js文件，文件名随意取。<br><strong><em>如果没有scripts目录，请新建一个。</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">require(&apos;shelljs/global&apos;);</div><div class="line">try &#123;</div><div class="line">    hexo.on(&apos;deployAfter&apos;, function() &#123;//当deploy完成后执行备份</div><div class="line">        run();</div><div class="line">    &#125;);</div><div class="line">&#125; catch (e) &#123;</div><div class="line">    console.log(&quot;产生了一个错误&lt;(￣3￣)&gt; !，错误详情为：&quot; + e.toString());</div><div class="line">&#125;</div><div class="line">function run() &#123;</div><div class="line">    if (!which(&apos;git&apos;)) &#123;</div><div class="line">        echo(&apos;Sorry, this script requires git&apos;);</div><div class="line">        exit(1);</div><div class="line">    &#125; else &#123;</div><div class="line">        echo(&quot;======================Auto Backup Begin===========================&quot;);</div><div class="line">        cd(&apos;C:/Blog&apos;);    //此处修改为Hexo根目录路径</div><div class="line">        if (exec(&apos;git add .&apos;).code !== 0) &#123;</div><div class="line">            echo(&apos;Error: Git add failed&apos;);</div><div class="line">            exit(1);</div><div class="line">        &#125;</div><div class="line">        if (exec(&apos;git commit -m &quot;Form auto backup script\&apos;s commit&quot;&apos;).code !== 0) &#123;</div><div class="line">            echo(&apos;Error: Git commit failed&apos;);</div><div class="line">            exit(1);</div><div class="line">        &#125;</div><div class="line">        if (exec(&apos;git push origin master&apos;).code !== 0) &#123;</div><div class="line">            echo(&apos;Error: Git push failed&apos;);</div><div class="line">            exit(1);</div><div class="line">        &#125;</div><div class="line">        echo(&quot;==================Auto Backup Complete============================&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><span id="inline-red">注意：</span></p>
<ul>
<li>其中，需要修改第17行的 <code>D:/hexo</code> 路径为 <code>Hexo的根目录</code> 路径。（脚本中的路径为博主的Hexo路径）</li>
<li>如果你的Git远程仓库名称不为 <code>origin</code> 的话，还需要修改第28行执行的push命令，修改成自己的远程仓库名和相应的分支名。</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>保存脚本并退出，然后执行 <code>hexo d</code> 命令，将会得到类似以下结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">INFO  Deploying: git</div><div class="line">INFO  Clearing .deploy_git folder...</div><div class="line">INFO  Copying files from public folder...</div><div class="line">......</div><div class="line">======================Auto Backup Begin===========================</div><div class="line">warning: LF will be replaced by CRLF in package.json.</div><div class="line">The file will have its original line endings in your working directory.</div><div class="line">warning: LF will be replaced by CRLF in source/_posts/hexo1.md.</div><div class="line">The file will have its original line endings in your working directory.</div><div class="line">warning: LF will be replaced by CRLF in source/_posts/update to github.md.</div><div class="line">The file will have its original line endings in your working directory.</div><div class="line">warning: LF will be replaced by CRLF in source/_posts/wangyimusic.md.</div><div class="line">The file will have its original line endings in your working directory.</div><div class="line">warning: LF will be replaced by CRLF in themes/next-5.0.1/layout/_partials/head.swig.</div><div class="line">The file will have its original line endings in your working directory.</div><div class="line">warning: LF will be replaced by CRLF in source/_posts/backup.md.</div><div class="line">The file will have its original line endings in your working directory.</div><div class="line">warning: LF will be replaced by CRLF in source/_posts/encrypt.md.</div><div class="line">The file will have its original line endings in your working directory.</div><div class="line">[master 1bb6cc5] Form auto backup script&apos;s commit</div><div class="line"> Committer: unknown </div><div class="line">Your name and email address were configured automatically based</div><div class="line">on your username and hostname. Please check that they are accurate.</div><div class="line">You can suppress this message by setting them explicitly. Run the</div><div class="line">following command and follow the instructions in your editor to edit</div><div class="line">your configuration file:</div><div class="line"></div><div class="line">    git config --global --edit</div><div class="line"></div><div class="line">After doing this, you may fix the identity used for this commit with:</div><div class="line"></div><div class="line">    git commit --amend --reset-author</div><div class="line"></div><div class="line"> 6 files changed, 177 insertions(+), 2 deletions(-)</div><div class="line"> create mode 100644 scripts/autobackup.js</div><div class="line"> create mode 100644 source/_posts/backup.md</div><div class="line"> create mode 100644 source/_posts/encrypt.md</div><div class="line">To https://github.com/cwyaml/blog-backup.git</div><div class="line">   d7bc718..1bb6cc5  master -&gt; master</div><div class="line">==================Auto Backup Complete============================</div></pre></td></tr></table></figure></p>
<p>这样子，每次更新博文并 deploy 到服务器上之后，备份就自动启动并完成备份啦~是不是很方便呢？</p>
<p><strong>Enjoy it！</strong></p>
<blockquote>
<p>参考：wanghao大神 <a href="https://notes.wanghao.work/2015-07-06-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6.html" target="_blank" rel="external">自动备份Hexo博客源文件</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;转自&lt;/strong&gt;： &lt;a href=&quot;http://www.cwyaml.top/&quot;&gt;http://www.cwyaml.top/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;out-img-topic&quot;&gt;&lt;img src=&quot;http://on5pjsxrv.bkt.clouddn.com/backup.png&quot; alt=&quot;Markdown&quot;&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;用Hexo写博客是一件比较享受的事情，无奈如果换电脑或者系统崩了的话，你就会一脸懵B了，备份博客就显得尤为重要。先说说我的感受，博客刚搭建好的时候就想过这个问题，那时候对 &lt;code&gt;git&lt;/code&gt; 似懂非懂吧。在网上找了很多教程方法，大概就是说要创建一个分支来存放 blog 文件，但是翻腾来翻腾去还是没有搞定。
    
    </summary>
    
      <category term="博客搭建" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Next+Hexo" scheme="http://yoursite.com/tags/Next-Hexo/"/>
    
      <category term="博客搭建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="backup" scheme="http://yoursite.com/tags/backup/"/>
    
  </entry>
  
  <entry>
    <title>教你制作音乐外链</title>
    <link href="http://yoursite.com/2017/03/02/wangyimusic/"/>
    <id>http://yoursite.com/2017/03/02/wangyimusic/</id>
    <published>2017-03-02T13:12:04.000Z</published>
    <updated>2017-04-13T14:26:39.434Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>转自</strong>： <a href="http://www.cwyaml.top/" target="_blank" rel="external">http://www.cwyaml.top/</a></p>
</blockquote>
<div class="out-img-topic"><img src="http://on5pjsxrv.bkt.clouddn.com/couldmusic.png" alt="Markdown"></div>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本篇文章讲怎样制作音乐外链，我主要用来为自己的博客添加背景音乐。（其实主要用来装X）</p>
<a id="more"></a>
<h2 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h2><p>首先你需要下载想要的歌曲：<br>QQ音乐、网易云音乐需要安装客户端才能下载。虾米音乐可以在网页直接下载。<br>总之把需要的歌曲下载下来就可以了！！</p>
<p>我们利用 <a href="http://www.qiniu.com/" target="_blank" rel="external">七牛云存储</a> 来自动生成歌曲外链。<br>第一步：注册、登录<br>第二步：在对象存储中新建一个仓库，命名为 music 。<br>第三步：在内容管理中上传歌曲文件</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/%E7%BD%91%E6%98%93%E4%BA%91.png" alt="markdown"></p>
<p></p><p id="div-border-left-red">用这种方法所有歌曲（只要能下载）都能获得，并且永久有效</p><p></p>
<h2 id="网易云音乐获取方法"><a href="#网易云音乐获取方法" class="headerlink" title="网易云音乐获取方法"></a>网易云音乐获取方法</h2><p>第一步： 先获取歌曲id，直接打开网易云音乐网页版: <a href="http://music.163.com" target="_blank" rel="external">http://music.163.com</a><br>搜索自己喜欢的音乐，并获取歌曲的 <code>ID</code> 。举个例子：（id很明显吧）</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://music.163.com/#/song?id=443205403" target="_blank" rel="external">http://music.163.com/#/song?id=443205403</a></p>
<p>第二步： 将下面网址中的两处id替换成的歌曲id<br><a href="http://music.163.com/api/song/detail/?id=425137664&amp;ids=[425137664]&amp;csrf_token=" target="_blank" rel="external">http://music.163.com/api/song/detail/?id=425137664&amp;ids=[425137664]&amp;csrf_token=</a><br>你将会获得一大串代码：<u>外链就隐藏其中。</u>。<br>找不到的话就把这段代码复制到编辑器里，ctrl+F 查找 <strong>.mp3</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;songs&quot;:[&#123;&quot;name&quot;:&quot;原来都是梦 &quot;,&quot;id&quot;:425137664,&quot;position&quot;:1,&quot;alias&quot;:[],&quot;status&quot;:0,&quot;fee&quot;:0,&quot;copyrightId&quot;:0,&quot;disc&quot;:&quot;&quot;,&quot;no&quot;:1,&quot;artists&quot;:[&#123;&quot;name&quot;:&quot;李行</div><div class="line">亮&quot;,&quot;id&quot;:4093,&quot;picId&quot;:0,&quot;img1v1Id&quot;:0,&quot;briefDesc&quot;:&quot;&quot;,&quot;picUrl&quot;:&quot;http://p3.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;,&quot;img1v1Url&quot;:&quot;http://p4.music.126.net/6y</div><div class="line">-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;,&quot;albumSize&quot;:0,&quot;alias&quot;:[],&quot;trans&quot;:&quot;&quot;,&quot;musicSize&quot;:0&#125;],&quot;album&quot;:&#123;&quot;name&quot;:&quot;原来都是</div><div class="line">梦&quot;,&quot;id&quot;:34816208,&quot;type&quot;:&quot;EP/Single&quot;,&quot;size&quot;:2,&quot;picId&quot;:3432675310535810,&quot;blurPicUrl&quot;:&quot;http://p3.music.126.net/LNL0l5xhstsgIILEaVkprg==/3432675310535810.jpg&quot;,&quot;companyId&quot;:0,&quot;pic&quot;:3432675310535810,&quot;picUrl&quot;:&quot;http://p3.music.126.net/LNL0l5xhstsgIILEaVkprg==/3432675310535810.jpg&quot;,&quot;publishTime&quot;:1470844800007,&quot;description&quot;:&quot;&quot;,&quot;tags&quot;:&quot;&quot;,&quot;company&quot;:&quot;百</div><div class="line">纳娱乐&quot;,&quot;briefDesc&quot;:&quot;&quot;,&quot;artist&quot;:&#123;&quot;name&quot;:&quot;&quot;,&quot;id&quot;:0,&quot;picId&quot;:0,&quot;img1v1Id&quot;:0,&quot;briefDesc&quot;:&quot;&quot;,&quot;picUrl&quot;:&quot;http://p3.music.126.net/6y-</div><div class="line">UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;,&quot;img1v1Url&quot;:&quot;http://p3.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;,&quot;albumSize&quot;:0,&quot;alias&quot;:[],&quot;trans&quot;:&quot;&quot;,&quot;musicSize&quot;:0&#125;,&quot;songs&quot;:[],&quot;alias&quot;:[],&quot;status&quot;:0,&quot;copyrightId&quot;:0,&quot;commentThreadId&quot;:&quot;R_AL_3_34816208&quot;,&quot;artists&quot;:[&#123;&quot;name&quot;:&quot;李行</div><div class="line">亮&quot;,&quot;id&quot;:4093,&quot;picId&quot;:0,&quot;img1v1Id&quot;:0,&quot;briefDesc&quot;:&quot;&quot;,&quot;picUrl&quot;:&quot;http://p3.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;,&quot;img1v1Url&quot;:&quot;http://p3.music.126.net/6y-</div><div class="line">UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;,&quot;albumSize&quot;:0,&quot;alias&quot;:[],&quot;trans&quot;:&quot;&quot;,&quot;musicSize&quot;:0&#125;],&quot;subType&quot;:&quot;录音室</div><div class="line">版&quot;&#125;,&quot;starred&quot;:false,&quot;popularity&quot;:100.0,&quot;score&quot;:100,&quot;starredNum&quot;:0,&quot;duration&quot;:262500,&quot;playedNum&quot;:0,&quot;dayPlays&quot;:0,&quot;hearTime&quot;:0,&quot;ringtone&quot;:null,&quot;crbt&quot;:null,&quot;audition&quot;:null,&quot;copyFrom&quot;:&quot;&quot;,&quot;commentThreadId&quot;:&quot;R_SO_4_425137664&quot;,&quot;rtUrl&quot;:null,&quot;ftype&quot;:0,&quot;rtUrls&quot;:</div><div class="line">[],&quot;copyright&quot;:0,&quot;rurl&quot;:null,&quot;mvid&quot;:0,&quot;rtype&quot;:0,&quot;bMusic&quot;:</div><div class="line">&#123;&quot;name&quot;:null,&quot;id&quot;:1225538623,&quot;size&quot;:3150725,&quot;extension&quot;:&quot;mp3&quot;,&quot;sr&quot;:44100,&quot;dfsId&quot;:1413971967605233,&quot;bitrate&quot;:96000,&quot;playTime&quot;:262500,&quot;volumeDelta&quot;:-2.21&#125;,&quot;mp3Url&quot;:&quot;http://m2.music.126.net/eU871p87-mpm5JcrqnsP2w==/1413971967605233.mp3&quot;,&quot;hMusic&quot;:</div><div class="line">&#123;&quot;name&quot;:null,&quot;id&quot;:1225538621,&quot;size&quot;:10502313,&quot;extension&quot;:&quot;mp3&quot;,&quot;sr&quot;:44100,&quot;dfsId&quot;:1413971967605231,&quot;bitrate&quot;:320000,&quot;playTime&quot;:262500,&quot;volumeDelta&quot;:-2.63&#125;,&quot;mMusic&quot;:</div><div class="line">&#123;&quot;name&quot;:null,&quot;id&quot;:1225538622,&quot;size&quot;:5251179,&quot;extension&quot;:&quot;mp3&quot;,&quot;sr&quot;:44100,&quot;dfsId&quot;:1413971967605232,&quot;bitrate&quot;:160000,&quot;playTime&quot;:262500,&quot;volumeDelta&quot;:-2.19&#125;,&quot;lMusic&quot;:</div><div class="line">&#123;&quot;name&quot;:null,&quot;id&quot;:1225538623,&quot;size&quot;:3150725,&quot;extension&quot;:&quot;mp3&quot;,&quot;sr&quot;:44100,&quot;dfsId&quot;:1413971967605233,&quot;bitrate&quot;:96000,&quot;playTime&quot;:262500,&quot;volumeDelta&quot;:-2.21&#125;&#125;],&quot;equalizers&quot;:&#123;&#125;,&quot;code&quot;:200&#125;</div></pre></td></tr></table></figure></p>
<p>第三步： 将上一步中获取到的网址放到地址栏中，若能正常播放音乐说明获取到的网址是正确的。然后你就可以把这些歌曲添加到自己的网页中了！！</p>
<p></p><p id="div-border-left-red">用这种方法有些歌曲并不能获得，不过时效很长（只要网易云能听）</p><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;转自&lt;/strong&gt;： &lt;a href=&quot;http://www.cwyaml.top/&quot;&gt;http://www.cwyaml.top/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;out-img-topic&quot;&gt;&lt;img src=&quot;http://on5pjsxrv.bkt.clouddn.com/couldmusic.png&quot; alt=&quot;Markdown&quot;&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;本篇文章讲怎样制作音乐外链，我主要用来为自己的博客添加背景音乐。（其实主要用来装X）&lt;/p&gt;
    
    </summary>
    
      <category term="Music" scheme="http://yoursite.com/categories/Music/"/>
    
    
      <category term="Music" scheme="http://yoursite.com/tags/Music/"/>
    
      <category term="网易云音乐" scheme="http://yoursite.com/tags/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>最简单的翻墙方法</title>
    <link href="http://yoursite.com/2017/03/01/host/"/>
    <id>http://yoursite.com/2017/03/01/host/</id>
    <published>2017-03-01T04:01:05.000Z</published>
    <updated>2017-04-13T14:25:50.678Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>转自</strong>： <a href="http://www.cwyaml.top/" target="_blank" rel="external">http://www.cwyaml.top/</a></p>
</blockquote>
<div class="out-img-topic"><img src="http://on5pjsxrv.bkt.clouddn.com/host.png" alt="Markdown"></div>

<p>分享一个可用的翻墙方法，解决 Google、Facebook、及 Twitter 等被墙问题。</p>
<p><div>※※※ <span id="yu-1"><strong>本页面长期更新可用 hosts 文件。</strong></span> ※※※</div></p><p></p>
<a id="more"></a>
<h4 id="废话不多说-直接讲方法"><a href="#废话不多说-直接讲方法" class="headerlink" title="废话不多说,直接讲方法"></a>废话不多说,直接讲方法</h4><p>只需要替换系统的 <code>hosts</code> 文件，就可以使用google、facebook…</p>
<p><strong>hosts 所在文件夹：</strong></p>
<ul>
<li><strong>Windows</strong> 系统hosts位于  <code>C:\Windows\System32\drivers\etc\hosts</code></li>
<li><strong>Android</strong>（安卓）系统hosts位于  <code>/etc/hosts</code></li>
<li><strong>Mac</strong>（苹果电脑）系统hosts位于  <code>/etc/hosts</code></li>
<li><strong>iPhone</strong>（iOS）系统hosts位于  <code>/etc/hosts</code></li>
<li><strong>Linux</strong> 系统hosts位于  <code>/etc/hosts</code></li>
</ul>
<p>绝大多数Unix系统都是在  <code>/etc/hosts</code></p>
<p><a href="http://pan.baidu.com/s/1nv0mETj" target="_blank" rel="external">可用hosts文件</a> 提取码：b69i  解压密码：laod</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>Google、Gmail、维基百科、Twitter、Facebook等必须请用https加密方式打开。一般这些网站都是SSL加密链接，如：<br><strong>谷歌学术：</strong><a href="https://scholar.google.com/" target="_blank" rel="external">https://scholar.google.com/</a><br><strong>谷歌：</strong><a href="https://www.google.com/ncr" target="_blank" rel="external">https://www.google.com/ncr</a><br><strong>谷歌香港：</strong><a href="https://www.google.com.hk/ncr" target="_blank" rel="external">https://www.google.com.hk/ncr</a><br><strong>Twitter：</strong><a href="https://twitter.com/?lang=zh-cn" target="_blank" rel="external">https://twitter.com/?lang=zh-cn</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;转自&lt;/strong&gt;： &lt;a href=&quot;http://www.cwyaml.top/&quot;&gt;http://www.cwyaml.top/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;out-img-topic&quot;&gt;&lt;img src=&quot;http://on5pjsxrv.bkt.clouddn.com/host.png&quot; alt=&quot;Markdown&quot;&gt;&lt;/div&gt;

&lt;p&gt;分享一个可用的翻墙方法，解决 Google、Facebook、及 Twitter 等被墙问题。&lt;/p&gt;
&lt;p&gt;&lt;div&gt;※※※ &lt;span id=&quot;yu-1&quot;&gt;&lt;strong&gt;本页面长期更新可用 hosts 文件。&lt;/strong&gt;&lt;/span&gt; ※※※&lt;/p&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="外面的世界" scheme="http://yoursite.com/categories/%E5%A4%96%E9%9D%A2%E7%9A%84%E4%B8%96%E7%95%8C/"/>
    
    
      <category term="翻墙" scheme="http://yoursite.com/tags/%E7%BF%BB%E5%A2%99/"/>
    
      <category term="hosts" scheme="http://yoursite.com/tags/hosts/"/>
    
  </entry>
  
  <entry>
    <title>Naruto-Pictures</title>
    <link href="http://yoursite.com/2017/02/28/top-pitcure/"/>
    <id>http://yoursite.com/2017/02/28/top-pitcure/</id>
    <published>2017-02-28T06:36:04.000Z</published>
    <updated>2017-04-06T14:04:58.000Z</updated>
    
    <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="http://on5pjsxrv.bkt.clouddn.com/aaaa.jpg" alt="Markdown"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="http://on5pjsxrv.bkt.clouddn.com/aaaaa.jpg" alt="Markdown"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="http://on5pjsxrv.bkt.clouddn.com/aaa.jpg" alt="Markdown"></div></div><div class="group-picture-row"></div></div></div>
<hr style="width: 15%;height: 1px;margin: 40px auto;background: #ccc;">
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;group-picture&quot;&gt;&lt;div class=&quot;group-picture-container&quot;&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;widt
    
    </summary>
    
      <category term="图片" scheme="http://yoursite.com/categories/%E5%9B%BE%E7%89%87/"/>
    
    
      <category term="picture" scheme="http://yoursite.com/tags/picture/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 使用中常见的问题及解决方法</title>
    <link href="http://yoursite.com/2017/02/14/markdown/"/>
    <id>http://yoursite.com/2017/02/14/markdown/</id>
    <published>2017-02-14T13:05:06.000Z</published>
    <updated>2017-04-13T14:26:08.053Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>转自</strong>： <a href="http://www.cwyaml.top/" target="_blank" rel="external">http://www.cwyaml.top/</a></p>
</blockquote>
<div class="out-img-topic"><img src="http://on5pjsxrv.bkt.clouddn.com/markdown.jpg" alt="Markdown"></div>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;就像 Markdown 官方文档里描述的一样：<strong><em>可读性，无论如何，都是最重要的。</em></strong> Markdown 的目标是实现 &nbsp; <span id="yu-1">『易读易写』</span> 。&nbsp;Markdown 从发布到现在备受好评，经过这一段的使用，整体感觉挺顺手，不过还是存在很多问题，所以总结一下喽。。</p>
<a id="more"></a>
<h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><p>其实自己喜欢的才是最好的。(像 vim 、emacs什么的不推荐，因为我也不会用)</p>
<h3 id="MAC平台"><a href="#MAC平台" class="headerlink" title="MAC平台"></a>MAC平台</h3><p>自己没用过，不做推荐。你可以看看这个帖子：<a href="https://www.zhihu.com/question/28886671" target="_blank" rel="external">Mac 上适合码农用的 Markdown 编辑器是什么？</a></p>
<h3 id="Windows平台"><a href="#Windows平台" class="headerlink" title="Windows平台"></a>Windows平台</h3><h4 id="印象笔记"><a href="#印象笔记" class="headerlink" title="印象笔记"></a>印象笔记</h4><p><a href="https://maxiang.io/" target="_blank" rel="external">马克飞象传送门</a>，界面不是很好看，书写的时候感觉很别扭</p>
<h4 id="有道云笔记"><a href="#有道云笔记" class="headerlink" title="有道云笔记"></a>有道云笔记</h4><p><a href="http://note.youdao.com/" target="_blank" rel="external">有道传送门</a>，同样很丑，强迫症受不了</p>
<h4 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h4><p>强大的 Sublime Text 总是能给我们很多惊喜，经过各种对比，sublime 满足了我对审美的要求。首先我们需要安装两个插件：（至于怎么安装就不说了）</p>
<ul>
<li><strong>markdownEditing</strong> 用来书写</li>
<li><strong>markdownPreview</strong> 用来预览</li>
</ul>
<h4 id="Atom（强烈推荐）"><a href="#Atom（强烈推荐）" class="headerlink" title="Atom（强烈推荐）"></a>Atom（强烈推荐）</h4><p>GitHub 推出的编辑器，界面很好（就是启动有点慢），必须支持一下。默认继承了 markdown 预览，快捷键为 <code>Ctrl+shift+M</code>。推荐插件：</p>
<ul>
<li><strong>markdown-preview</strong> 实时预览</li>
<li><strong>markdown-scroll-sync</strong>  编辑区和预览区同步滚动</li>
<li><strong>markdown-writer</strong> 方便管理图片链接等</li>
<li><strong>markdown-table-formatte</strong> 表格格式化</li>
</ul>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p><a href="http://www.markdown.cn/" target="_blank" rel="external">Markdown官方文档</a></p>
<h2 id="常见问题汇总"><a href="#常见问题汇总" class="headerlink" title="常见问题汇总"></a>常见问题汇总</h2><h3 id="html标签显示"><a href="#html标签显示" class="headerlink" title="html标签显示"></a>html标签显示</h3><p>比如说我要写一篇博客，标题为“html中 &lt;canvas&gt; 的使用”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">## html中 &lt;canvas&gt; 的使用</div></pre></td></tr></table></figure></p>
<p>如果这样写就会出现排版上的问题（不信你试一下），那么怎么解决呢？其实认真想一下就能明白，Markdown 的语法是基于 html 的，我们直接写 &lt;canvas&gt;，自然会被理解为一个标签，而不是要显示的文本。。所以，问题回归到 html 上。在网页中，我们要显示 &lt;canvas&gt; 时要用到 <code>转义字符</code>, 所以 Markdown 中也一样，我们应该这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">## html中 &amp;lt;canvas&amp;gt; 的使用</div></pre></td></tr></table></figure></p>
<h3 id="代码语法高亮"><a href="#代码语法高亮" class="headerlink" title="代码语法高亮"></a>代码语法高亮</h3><p>这个问题困扰了我好久，官方文档里竟然没有说明！只好自己去查找方法。Markdown 中显示代码块是这样的格式：<br><img src="http://on5sixmz1.bkt.clouddn.com/markdown01.png" alt="Markdown"><br>显示为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;这是一个p标签&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>而我们这样写：<br><img src="http://on5sixmz1.bkt.clouddn.com/markdown02.png" alt="Markdown"><br>就可以实现代码高亮了<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>据说这种方式一共支持四十多种语言，有兴趣的话你可以研究一下。</p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>Markdown 中嵌入图片，如果使用本地图片就要用到 html 标签来引用，这种方法很稳定，但是使文档变得很大（一张图片最少几百k吧）。所以我们要用到 <strong>图床</strong> 。</p>
<h4 id="贴图库"><a href="#贴图库" class="headerlink" title="贴图库"></a>贴图库</h4><p>推荐使用 &nbsp; <a href="http://www.tietuku.com/" target="_blank" rel="external">贴图库</a>  &nbsp;快速，免费（我使用过程中没掉过链子）</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/markdown03.png" alt="Markdown"></p>
<p>注册登录，就可以上传图片，每张图片自动生成 <strong>原图</strong>、<strong>展示图</strong>和 <strong>缩略图</strong>的<u>图片外链</u>、<u>html代码</u>、<u>Markdown外链</u>等。只要把对应的代码粘贴到你的文档中就可以了。。</p>
<h4 id="七牛云存储"><a href="#七牛云存储" class="headerlink" title="七牛云存储"></a>七牛云存储</h4><p>这个最近很火，可靠、可扩展、低成本等等有很多优点。你可以试一下。<br>我们主要用到他的 <strong>对象存储</strong> 服务，创建一个公开仓库，把图片上传就可以生成外链了。</p>
<h3 id="gif"><a href="#gif" class="headerlink" title="gif"></a>gif</h3><p>Github 上的开源项目，ReadMe.md 是也支持 Markdown 语法的，通常会看到很多开源项目的 ReadMe 中有 <strong>动态演示</strong>效果，看到这个项目的人一目了然，非常方便，gif本身也是一种图片格式，在 Markdown 中 <em>引用时和正常图片的引用一样</em>，但需要专门的工具生成 gif 格式的图片才行，在这里强烈推荐 <a href="http://www.cockos.com/licecap/" target="_blank" rel="external">LICEcap</a>，它是一款 windows 上的录屏软件，录制后保存的格式为 gif，体积小并且同样也可以在图床上生成链接。</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/markdown04.gif" alt="Markdown"></p>
<h3 id="插入音乐"><a href="#插入音乐" class="headerlink" title="插入音乐"></a>插入音乐</h3><p>你可以把音乐文件下载到本地，然后简单粗暴的使用 html 中的 &lt;video&gt; 标签。当然，如果这样就不必写下去了，告诉你简单的方法：<strong>网易云音乐</strong></p>
<p>打开网易云音乐网页版，搜索自己喜欢的音乐，比如我找到 <strong>告白气球</strong></p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/markdown05.png" alt="Markdown"><br>我们可以看到在图片的下边有一个 <code>生成外链播放器</code> , 点击会出现</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/markdown06.png" alt="Markdown"><br>选择 <strong>合适的尺寸</strong> 和 <strong>播放模式</strong> 之后。把下边的代码复制到你的 Markdown 文档中就可以了。试着听一下吧！！(我选择了最小尺寸)</p>
<p><div style="max-width: 450px;max-height: 180px;margin: 0 auto 40px;"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&id=423015566&auto=0&height=32"></iframe></div></p>
<p></p><p id="div-border-left-red" style="text-indent: 30px">试着去把一个 <strong>歌单生成外链播放器</strong> 插入到你的 Markdown 中，这样你跟新歌单你的博文也会跟着变化，而不必在想跟换歌曲时头疼</p><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;转自&lt;/strong&gt;： &lt;a href=&quot;http://www.cwyaml.top/&quot;&gt;http://www.cwyaml.top/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;out-img-topic&quot;&gt;&lt;img src=&quot;http://on5pjsxrv.bkt.clouddn.com/markdown.jpg&quot; alt=&quot;Markdown&quot;&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;就像 Markdown 官方文档里描述的一样：&lt;strong&gt;&lt;em&gt;可读性，无论如何，都是最重要的。&lt;/em&gt;&lt;/strong&gt; Markdown 的目标是实现 &amp;nbsp; &lt;span id=&quot;yu-1&quot;&gt;『易读易写』&lt;/span&gt; 。&amp;nbsp;Markdown 从发布到现在备受好评，经过这一段的使用，整体感觉挺顺手，不过还是存在很多问题，所以总结一下喽。。&lt;/p&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://yoursite.com/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 之 canvas的使用</title>
    <link href="http://yoursite.com/2017/02/13/html5-canvas/"/>
    <id>http://yoursite.com/2017/02/13/html5-canvas/</id>
    <published>2017-02-13T05:56:24.000Z</published>
    <updated>2017-04-13T14:25:56.519Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>转自</strong>： <a href="http://www.cwyaml.top/" target="_blank" rel="external">http://www.cwyaml.top/</a></p>
</blockquote>
<div class="out-img-topic"><img src="http://on5pjsxrv.bkt.clouddn.com/canvas.png" alt="Markdown"></div>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span id="inline-blue">canvas</span>是 html5 出现的新标签，用来替代Flash。像所有的 DOM 一样它具有自己本身的属性、方法和事件。他拥有强大的绘图功能。。下面是我在学习时做的一些总结。</p>
<a id="more"></a>
<h3 id="开始使用canvas元素"><a href="#开始使用canvas元素" class="headerlink" title="开始使用canvas元素"></a>开始使用canvas元素</h3><h4 id="创建一个画布"><a href="#创建一个画布" class="headerlink" title="创建一个画布"></a>创建一个画布</h4><p>canvas元素里的内容会在浏览器不支持该元素时显示。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span>&gt;</span></div><div class="line">    your browser doesn't support the <span class="tag">&lt;<span class="name">code</span>&gt;</span>canvas<span class="tag">&lt;/<span class="name">code</span>&gt;</span> element.</div><div class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="使用js来绘制图像"><a href="#使用js来绘制图像" class="headerlink" title="使用js来绘制图像"></a>使用js来绘制图像</h4><p>canvas本身并咩有绘图能力，所有的绘制工作必须在js内部完成。以绘制矩形为例。。</p>
<ul>
<li><p>首先找到 canvas 元素：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>然后创建 context 对象：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ctx = c.getContext(<span class="string">"2d"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>绘制一个矩形：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">75</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>就是这么简单！！</p>
<h3 id="设置画布绘制状态"><a href="#设置画布绘制状态" class="headerlink" title="设置画布绘制状态"></a>设置画布绘制状态</h3><p>绘图操作由 <em>绘制状态</em> 加以配置。后者是一组属性，指定了从线条宽度到填充色的所有参数。所以当我们绘制一个图形时，会用到当前绘制状态的设置。主要有这几种：</p>
<ul>
<li><code>fillStyle</code> 用于设置填充颜色，默认为 #000；</li>
<li><code>lineWidth</code> 用于设置线条的宽度，默认 1.0；</li>
<li><code>strokeStyle</code> 用于设置线条的颜色，默认 #000；</li>
<li><code>lineJoin</code> 用于设置线条与图形连接时的样式，有三个参数 round、bevel和miter，默认 miter.</li>
</ul>
<p>前面3个很好理解，我们介绍一下 <code>lineJoin</code> ，直接上代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=<span class="string">"myCanvas"</span> width=<span class="string">"450px"</span> height=<span class="string">"300px"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</div><div class="line">    <span class="keyword">var</span> ctx = c.getContext(<span class="string">'2d'</span>);</div><div class="line">    ctx.lineWidth = <span class="number">20</span>;</div><div class="line"></div><div class="line">    ctx.lineJoin = <span class="string">"round"</span>;</div><div class="line">    ctx.strokeRect(<span class="number">20</span>,<span class="number">20</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line"></div><div class="line">    ctx.lineJoin = <span class="string">"bevel"</span>;</div><div class="line">    ctx.strokeRect(<span class="number">160</span>,<span class="number">20</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line"></div><div class="line">    ctx.lineJoin = <span class="string">"miter"</span>;</div><div class="line">    ctx.strokeRect(<span class="number">300</span>,<span class="number">20</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>效果：（差别很明显）<br><img src="http://on5sixmz1.bkt.clouddn.com/canvas01.png" alt="Markdown"></p>
<h4 id="使用渐变"><a href="#使用渐变" class="headerlink" title="使用渐变"></a>使用渐变</h4><p>除了纯色，我们还可以把填充和笔触样式设置成渐变色。canvas元素支持两类渐变：线性和径向。</p>
<ul>
<li><code>createLinearGradient(x,y,x1,y1)</code> 创建一个线性方向和大小</li>
<li><code>createRadialGradient(x,y,r,x1,y1,r1)</code> 创建一个径向范围</li>
</ul>
<p>以上两个方法都返回一个 CanvasGradient 对象，我们对这个对象使用 <code>addColorStop(position,color)</code> 方法来实现渐变。(position的值为 0-1) 。</p>
<h5 id="实现一个线性渐变"><a href="#实现一个线性渐变" class="headerlink" title="实现一个线性渐变"></a>实现一个线性渐变</h5><blockquote>
<p><em>适当的调整 梯度线 和 绘制大小 的关系，可以实现不同的效果。。</em></p>
</blockquote>
<p>直接上代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=<span class="string">"myCanvas"</span> width=<span class="string">"450px"</span> height=<span class="string">"300px"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span>   </div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</div><div class="line">    <span class="keyword">var</span> ctx = c.getContext(<span class="string">'2d'</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> grad = ctx.createLinearGradient(<span class="number">20</span>,<span class="number">20</span>,<span class="number">300</span>,<span class="number">200</span>);</div><div class="line">    grad.addColorStop(<span class="number">0</span>,<span class="string">"red"</span>);</div><div class="line">    grad.addColorStop(<span class="number">.3</span>,<span class="string">"yellow"</span>);</div><div class="line">    grad.addColorStop(<span class="number">1</span>,<span class="string">"black"</span>);</div><div class="line"></div><div class="line">    ctx.fillStyle = grad;</div><div class="line">    ctx.fillRect(<span class="number">20</span>,<span class="number">20</span>,<span class="number">300</span>,<span class="number">200</span>);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/canvas02.png" alt="Markdown"></p>
<h5 id="实现一个径向渐变"><a href="#实现一个径向渐变" class="headerlink" title="实现一个径向渐变"></a>实现一个径向渐变</h5><p>我们用两个圆来定义径向渐变。渐变的起点由第一个圆定义，终点由第二个圆定义，在两者之间添加颜色。就像这样：（我们试着画一个太阳的样子）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=<span class="string">"myCanvas"</span> width=<span class="string">"450px"</span> height=<span class="string">"300px"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</div><div class="line">    <span class="keyword">var</span> ctx = c.getContext(<span class="string">'2d'</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> grad = ctx.createRadialGradient(<span class="number">225</span>,<span class="number">150</span>,<span class="number">20</span>,<span class="number">225</span>,<span class="number">150</span>,<span class="number">300</span>);</div><div class="line">    grad.addColorStop(<span class="number">0</span>,<span class="string">"red"</span>);</div><div class="line">    grad.addColorStop(<span class="number">.2</span>,<span class="string">"yellow"</span>);</div><div class="line">    grad.addColorStop(<span class="number">1</span>,<span class="string">"black"</span>);</div><div class="line"></div><div class="line">    ctx.fillStyle = grad;</div><div class="line">    ctx.fillRect(<span class="number">20</span>,<span class="number">20</span>,<span class="number">450</span>,<span class="number">300</span>);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/canvas03.png" alt="Markdown"></p>
<h3 id="保存和恢复绘制状态"><a href="#保存和恢复绘制状态" class="headerlink" title="保存和恢复绘制状态"></a>保存和恢复绘制状态</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;转自&lt;/strong&gt;： &lt;a href=&quot;http://www.cwyaml.top/&quot;&gt;http://www.cwyaml.top/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;out-img-topic&quot;&gt;&lt;img src=&quot;http://on5pjsxrv.bkt.clouddn.com/canvas.png&quot; alt=&quot;Markdown&quot;&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span id=&quot;inline-blue&quot;&gt;canvas&lt;/span&gt;是 html5 出现的新标签，用来替代Flash。像所有的 DOM 一样它具有自己本身的属性、方法和事件。他拥有强大的绘图功能。。下面是我在学习时做的一些总结。&lt;/p&gt;
    
    </summary>
    
      <category term="Html5" scheme="http://yoursite.com/categories/Html5/"/>
    
    
      <category term="Html5" scheme="http://yoursite.com/tags/Html5/"/>
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>简单博文加密</title>
    <link href="http://yoursite.com/2017/02/07/encrypt/"/>
    <id>http://yoursite.com/2017/02/07/encrypt/</id>
    <published>2017-02-07T02:16:31.000Z</published>
    <updated>2017-04-13T14:25:25.233Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>转自</strong>： <a href="http://www.cwyaml.top/" target="_blank" rel="external">http://www.cwyaml.top/</a></p>
</blockquote>
<div class="out-img-topic"><img src="http://on5pjsxrv.bkt.clouddn.com/%E5%8A%A0%E5%AF%86.jpg" alt="Markdown"></div>

<blockquote>
<p>即使是最简单的加密方式也足以阻止90%的访问者</p>
</blockquote>
<a id="more"></a>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>由于 Hexo 最终编译出来的是静态文件，也就意味着文章的所有信息会原封不动展示在页面中，当你输入一篇文章的地址，所有的内容就已经跟随网络传输过来了。那么博客使用加密是怎么实现的呢？</p>
<p>这就要讲到 js 的阻塞机制了，当调用 <code>alert();</code> 函数的时候，整个页面会停止运行，直到你点击确定之后，才会继续执行下去。我们这里需要的也是这样一个假象，阻止整个页面的渲染，直到你输入了正确的密码才能让页面继续渲染实际的文章。可是 <code>alert();</code> 只有提醒的功能，没有输入的功能，所以，这里要用到的是 <code>promt()</code> 方法。</p>
<h3 id="promt-方法介绍"><a href="#promt-方法介绍" class="headerlink" title="promt()方法介绍"></a>promt()方法介绍</h3><p>这个 promt() 方法有什么作用呢？查看js文档可以知道：</p>
<p></p><p id="div-border-left-red"><strong>prompt()方法 :</strong>   <em>用于<u>显示可提示用户进行输入的对话框</u>。<br>如果用户单击提示框的 <strong>取消</strong> 按钮，则返回 <strong>null</strong>。<br>如果用户单击 <strong>确认</strong>按钮，则返回 <strong>输入字段当前显示的文本</strong>（用户输入的文本）。</em></p>   我们就是利用 <code>promt()</code> 方法可以返回用户输入的文本这个特性，获取到返回数据，与我们设置的密码进行验证，从而实现文档加密的。。<p></p>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>找到 <code>themes\next\layout\_partials\head.swig</code> 文件。<br>在 &lt;meta&gt; 标签之后添加以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    (function()&#123;</div><div class="line">        if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123;</div><div class="line">            if (prompt(&apos;请输入文章密码&apos;,&apos;&apos;) !== &apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123;</div><div class="line">                alert(&apos;密码错误！&apos;);</div><div class="line">                history.back();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)();</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>这里有必要解释一下 <code>page.password</code> 是什么东西。以下我给出这篇文章的头部参考：<br>首先 <code>page</code> 是一个变量，你可以理解为这篇文章。以下面的代码为参考，那么 <code>page.title = 最简单的翻墙方法; page.comments = fasle;</code>（很好理解吧）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">title: 最简单的翻墙方法</div><div class="line">date: 2017-03-01 12:01:05</div><div class="line">tags: [翻墙,hosts]</div><div class="line">categories: [外面的世界]</div><div class="line">keywords: 翻墙,hosts</div><div class="line">comments: false</div></pre></td></tr></table></figure></p>
<p>所以，要想加密博文，我们要为文章加上 <code>password</code> 属性。<code>description</code> 属性用于对文章进行描述。（加密下显示内容）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">description: 文章访问密码：password</div><div class="line">password: password</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这种方式只能说是一点小技巧的应用吧，在大神面前可能不管用，但足以阻挡大多数用户。<br>更完美的博文加密方式请参考：<a href="http://edolphin.site/2016/05/31/encrypt-post/" target="_blank" rel="external">加密博客内容，使用密码访问</a></p>
]]></content>
    
    <summary type="html">
    
      本文访问密码：123456
    
    </summary>
    
      <category term="博客搭建" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Next+Hexo" scheme="http://yoursite.com/tags/Next-Hexo/"/>
    
      <category term="博客搭建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="encrypt" scheme="http://yoursite.com/tags/encrypt/"/>
    
  </entry>
  
</feed>
