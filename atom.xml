<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Swhite ★ Notes</title>
  <subtitle>星火燎原</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.baixiaojian.com/"/>
  <updated>2017-12-04T06:38:26.000Z</updated>
  <id>http://www.baixiaojian.com/</id>
  
  <author>
    <name>Small white</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git 笔记</title>
    <link href="http://www.baixiaojian.com/git/"/>
    <id>http://www.baixiaojian.com/git/</id>
    <published>2017-11-29T12:46:11.000Z</published>
    <updated>2017-12-04T06:38:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回退相关操作"><a href="#回退相关操作" class="headerlink" title="回退相关操作"></a>回退相关操作</h2><h3 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h3><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>git checkout – <code>file.txt</code></td>
<td>丢弃 file.txt 中的修改</td>
</tr>
<tr>
<td>git reset –hard</td>
<td>重设暂存区所有文件并且还原工作区所有修改</td>
</tr>
</tbody>
</table>
<h3 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h3><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>git reset</td>
<td>重设暂存区所有文件</td>
</tr>
<tr>
<td>git reset HEAD</td>
<td>撤销最新一次的 add 状态</td>
</tr>
<tr>
<td>git reset <code>file.txt</code></td>
<td>把 <code>file.txt</code> 的放入工作区</td>
</tr>
<tr>
<td>git reset –hard</td>
<td>重设暂存区所有文件并且还原工作区所有修改</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3 id="版本区"><a href="#版本区" class="headerlink" title="版本区"></a>版本区</h3><ul>
<li>HEAD =&gt; 当前版本</li>
<li>HEAD^ =&gt; 上一个版本</li>
<li>HEAD^^ =&gt; 上上一个版本</li>
<li>HEAD~100 =&gt; 上一100个版本</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>git revert HEAD</td>
<td>撤销最新一次的 commit ,分支没有改动文件才能执行(存在该commit记录)</td>
</tr>
<tr>
<td>git reset <code>&lt;commit&gt;</code></td>
<td>删除最新一次的 commit 并且重设暂存区所有文件 (不存在该commit版本号)</td>
</tr>
<tr>
<td>git reset HEAD~2</td>
<td>将当前分支倒退两个提交(高危操作)</td>
</tr>
<tr>
<td>git reset –hard HEAD^</td>
<td>回退上一个版本</td>
</tr>
</tbody>
</table>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>rm <code>file.txt</code></td>
<td>删除文件</td>
</tr>
<tr>
<td>git checkout – <code>file.txt</code></td>
<td>撤销删除 (未commit之前)</td>
</tr>
<tr>
<td>git clean -n</td>
<td>查看那些未被跟踪文件会被移除</td>
</tr>
<tr>
<td>git clean -f</td>
<td>移除当前目录下未被跟踪的文件</td>
</tr>
<tr>
<td>git clean -df</td>
<td>移除未跟踪的文件以及目录</td>
</tr>
<tr>
<td>git clean -f <code>&lt;path&gt;</code></td>
<td>移除未跟踪的文件，但限制在某个路径下</td>
</tr>
<tr>
<td>git clean -xf</td>
<td>移除当前目录下未跟踪的文件，以及 Git 一般忽略的文件</td>
</tr>
</tbody>
</table>
<h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>git checkout -b <code>dev</code></td>
<td>创建并且切换到dev分支</td>
</tr>
<tr>
<td>git checkout -b <code>hotfix</code> dev</td>
<td>基于dev分支创建一个hotfix分支</td>
</tr>
<tr>
<td>git checkout <code>dev</code></td>
<td>切换到dev分支</td>
</tr>
<tr>
<td>git branch</td>
<td>查看所有的分支</td>
</tr>
<tr>
<td>git branch -d <code>dev</code></td>
<td>删除dev分支(当前分支无法自行删除)</td>
</tr>
<tr>
<td>git branch -D <code>dev</code></td>
<td>强制删除分支(用于未合并分支)</td>
</tr>
<tr>
<td>git merge <code>dev</code></td>
<td>将dev分支合并到当前分支</td>
</tr>
</tbody>
</table>
<h2 id="远程仓库的操作"><a href="#远程仓库的操作" class="headerlink" title="远程仓库的操作"></a>远程仓库的操作</h2><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>git remote -v</td>
<td>查看远程仓库的详细信息</td>
</tr>
<tr>
<td>git remote add <code>remote-name</code> <code>URL</code></td>
<td>添加远程仓库</td>
</tr>
<tr>
<td>git push <code>origin</code> <code>master</code></td>
<td>将内容提交到远程仓库 origin 的 master 分支上</td>
</tr>
<tr>
<td>git remote rm <code>origin</code></td>
<td>将远程仓库 origin 删除</td>
</tr>
<tr>
<td>git remote rename <code>origin</code> <code>pb</code></td>
<td>将远程仓库 origin 改为 pb</td>
</tr>
<tr>
<td>git clone <code>URL</code></td>
<td>克隆一个远程仓库，这里的URL是远程仓库的地址</td>
</tr>
<tr>
<td>git pull origin</td>
<td>将远程仓库中更新的数据拉到本地</td>
</tr>
<tr>
<td>git pull origin dev</td>
<td>拉取远程仓库dev分支到本地</td>
</tr>
<tr>
<td>git push origin aaa</td>
<td>将 aaa 分支推送到远程仓库</td>
</tr>
<tr>
<td>git pull –rebase <code>URL</code></td>
<td>git rebase 代替 git merge 合并本地分支</td>
</tr>
<tr>
<td>git push –force</td>
<td>强制推送</td>
</tr>
</tbody>
</table>
<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>git commit –amend</td>
<td>和上一次 commit 合并,并在该基础上编辑commit信息</td>
</tr>
<tr>
<td>git commit –amend –no-edit</td>
<td>和上一次 commit 合并, 不编辑信息</td>
</tr>
<tr>
<td>git commit -a -m “some modified”</td>
<td>git add -A &amp;&amp; git commit -m ‘some modified’</td>
</tr>
</tbody>
</table>
<h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><blockquote>
<p><code>&lt;base&gt;</code> 是可以使任何类型的提交引用（ID/分支名/标签/HEAD）</p>
</blockquote>
<p><a href="https://github.com/geeeeeeeeek/git-recipes/wiki/5.1-%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6%EF%BC%9AMerge%E3%80%81Rebase-%E7%9A%84%E9%80%89%E6%8B%A9" rel="external nofollow noopener noreferrer" target="_blank">参考文档1</a></p>
<p><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA" rel="external nofollow noopener noreferrer" target="_blank">参考文档2</a></p>
<ul>
<li>什么是 git rebase(变基==改变基线)<ul>
<li>变基是将分支移到一个新的基提交的过程, 产生的是一个快速向前的合并以及完美的线性历史</li>
<li>rebase 就好像是说「我想将我的更改建立在其他人的进展之上」</li>
<li>绝不要在公共的分支上使用它</li>
</ul>
</li>
</ul>
<ul>
<li>git rebase <code>&lt;base&gt;</code> =&gt; git merge <code>&lt;base&gt;</code> 相似</li>
<li>git rebase –continue =&gt; 解决冲突后可执行的命令</li>
<li>git rebase –abort =&gt; 终止rebase的行动，并且所在分支会回到rebase开始前的状态。</li>
<li>git rebase -i <code>&lt;base&gt;</code> =&gt; 交互式<ul>
<li>fixup</li>
<li>startq</li>
<li>squash</li>
</ul>
</li>
</ul>
<h2 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h2><blockquote>
<p>Git 用引用日志这种机制来记录分支顶端的更新</p>
</blockquote>
<ul>
<li>git reflog =&gt; 显示本地仓库的引用日志</li>
<li>git reflog –relative-date =&gt; 用相对的日期显示引用日志</li>
<li>git reset –hard <code>0254ea7</code> 配合使用</li>
</ul>
<p>注: <em>引用日志提供的安全网只对提交到本地仓库的更改有效，而且只有移动操作会被记录</em></p>
<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><ul>
<li>git log –oneline =&gt; 简洁的显示 log 记录</li>
</ul>
<h2 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h2><ul>
<li><a href="http://stackoverflow.com/questions/9282632/git-index-lock-file-exists-when-i-try-to-commit-but-cannot-delete-the-file" rel="external nofollow noopener noreferrer" target="_blank">fatal: Unable to create ‘project_path/.git/index.lock’: File exists.</a><ul>
<li>删除该分支  =&gt;  <code>rm -f .git/index.lock</code></li>
</ul>
</li>
<li>error: failed to push some refs to <code>&lt;URL&gt;</code><ul>
<li>第一种解决方式:<ul>
<li>强推，即利用强覆盖方式用你本地的代码替代git仓库内的内容 =&gt; <code>git push -f</code></li>
</ul>
</li>
<li>第二种解决方式:<ul>
<li>这条命令等于合并远程分支，合并完成之后同目录会出现README.md目录 =&gt; git pull –rebase origin master</li>
</ul>
</li>
</ul>
</li>
<li>fatal: remote origin already exists<ul>
<li>先删除远程 Git 仓库 =&gt; git remote rm origin</li>
<li>再添加远程 Git 仓库 =&gt; git remote add origin <code>&lt;URL&gt;</code><ul>
<li>如果执行 git remote rm origin 还报错的话</li>
<li>我们可以手动修改 gitconfig 文件的内容 =&gt; vi .git/config</li>
<li>把 [remote “origin”] 那一行删掉就好了。</li>
</ul>
</li>
</ul>
</li>
<li>error: src refspec master does not match any<ul>
<li>引起该错误的原因是，目录中没有文件，空目录是不能提交上去的</li>
<li>touch README =&gt; git add README =&gt; git commit -m ‘first commit’ =&gt; git push origin maste</li>
</ul>
</li>
<li>用 <code>git reset --hard</code> 命令导致目录下所有文件全部被清除。<ul>
<li>首先用 <code>git reflog</code> 命令查找到对应的sha值,如：cd7b575</li>
<li>通过“git reset –hard  cd7b575”<ul>
<li>注意：第二步操作有时会报错, 如: fatal: Unable to create ‘D:/chenjunjun/.git/index.lock’: File exists.</li>
<li>需要手动删除.git目录下的index.lock文件</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;回退相关操作&quot;&gt;&lt;a href=&quot;#回退相关操作&quot; class=&quot;headerlink&quot; title=&quot;回退相关操作&quot;&gt;&lt;/a&gt;回退相关操作&lt;/h2&gt;&lt;h3 id=&quot;工作区&quot;&gt;&lt;a href=&quot;#工作区&quot; class=&quot;headerlink&quot; title=&quot;工作区&quot;&gt;&lt;/a&gt;工作区&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;git checkout – &lt;code&gt;file.txt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;丢弃 file.txt 中的修改&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git reset –hard&lt;/td&gt;
&lt;td&gt;重设暂存区所有文件并且还原工作区所有修改&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;暂存区&quot;&gt;&lt;a href=&quot;#暂存区&quot; class=&quot;headerlink&quot; title=&quot;暂存区&quot;&gt;&lt;/a&gt;暂存区&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;git reset&lt;/td&gt;
&lt;td&gt;重设暂存区所有文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git reset HEAD&lt;/td&gt;
&lt;td&gt;撤销最新一次的 add 状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git reset &lt;code&gt;file.txt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把 &lt;code&gt;file.txt&lt;/code&gt; 的放入工作区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git reset –hard&lt;/td&gt;
&lt;td&gt;重设暂存区所有文件并且还原工作区所有修改&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://www.baixiaojian.com/tags/git/"/>
    
      <category term="命令" scheme="http://www.baixiaojian.com/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>FEDAY3 笔记</title>
    <link href="http://www.baixiaojian.com/FEDAY3/"/>
    <id>http://www.baixiaojian.com/FEDAY3/</id>
    <published>2017-09-09T02:19:57.000Z</published>
    <updated>2017-09-10T09:36:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="构建大型应用"><a href="#构建大型应用" class="headerlink" title="构建大型应用"></a>构建大型应用</h2><p>分享人：孟红伦(钉钉)</p>
<h3 id="重要的俩块"><a href="#重要的俩块" class="headerlink" title="重要的俩块"></a>重要的俩块</h3><ul>
<li>使用 <code>TypeScript</code> 解决代码 <code>复杂</code> ,数据模型的问题</li>
<li>使用 <code>RxJS</code> 更好的解决 <code>异步</code> 带来的问题</li>
</ul>
<h3 id="代码如何复杂"><a href="#代码如何复杂" class="headerlink" title="代码如何复杂"></a>代码如何复杂</h3><ul>
<li>上百个 RPC 接口</li>
<li>几十种消息推送</li>
<li>10W + 行代码</li>
<li>模块依赖关系复杂</li>
<li>数据模型复杂</li>
</ul>
<h3 id="钉钉犯过的错"><a href="#钉钉犯过的错" class="headerlink" title="钉钉犯过的错"></a>钉钉犯过的错</h3><ul>
<li>开发时没有考虑到个人用户登录时的 ‘org’ 字段</li>
<li>因为开发环境中是 <code>归属某个企业</code> 的,忽视了对 <code>不归属任何企业的个人用户</code>的测试</li>
<li>最后还是用户主动反映了这个问题</li>
<li>问题责任:测试的锅</li>
</ul>
<a id="more"></a>
<h3 id="什么是Typescript"><a href="#什么是Typescript" class="headerlink" title="什么是Typescript"></a>什么是Typescript</h3><ul>
<li>它是 JS 的超集,兼容 ES5,ES2015/16/17.</li>
<li>它的编译结果是 JS , 可以运行在浏览器/Node端.</li>
<li>它支持 TS 和 JS 混用</li>
</ul>
<h3 id="主流框架支持程度"><a href="#主流框架支持程度" class="headerlink" title="主流框架支持程度"></a>主流框架支持程度</h3><ul>
<li>Angular 2.0 <code>完全支持</code></li>
<li>VUE 2.0 <code>部分支持</code><ul>
<li>模板中还不具备 Type Check 的能力</li>
</ul>
</li>
<li>React <code>完全支持</code><ul>
<li>jsx 不是 ‘模板’而是 js,所以 Type Check 支持的很好</li>
</ul>
</li>
</ul>
<h3 id="异步逻辑的处理"><a href="#异步逻辑的处理" class="headerlink" title="异步逻辑的处理"></a>异步逻辑的处理</h3><ul>
<li><code>RxJS</code> 实现渐进式搜索</li>
<li>使用 Rx.js Observable 可以更好更直观的描述这些 API,帮助你在错综复杂的异步 API 调用中少犯错</li>
</ul>
<hr>
<h2 id="项目中如何选择框架和库"><a href="#项目中如何选择框架和库" class="headerlink" title="项目中如何选择框架和库"></a>项目中如何选择框架和库</h2><p>分享人：张克军(豆瓣)</p>
<p id="border-blue"><code>特指</code>公司规模比较大,协作开发的人数比较多,商业型项目</p>

<h3 id="商业型项目的核心"><a href="#商业型项目的核心" class="headerlink" title="商业型项目的核心"></a>商业型项目的核心</h3><ol>
<li>注重以结果为导向</li>
<li>高效率高质量的产出产品</li>
</ol>
<h3 id="考虑方面"><a href="#考虑方面" class="headerlink" title="考虑方面"></a>考虑方面</h3><ol>
<li>迭代周期长,方案的选择就要 <code>长期有效性</code></li>
<li>代码可维护性</li>
<li>伸缩性,用比较小的成本应对可能随时变更的需求</li>
<li>方案的选择需要更务实</li>
</ol>
<h3 id="基本前提"><a href="#基本前提" class="headerlink" title="基本前提"></a>基本前提</h3><ul>
<li>成本和效率<ul>
<li>实现目标的成本和效率</li>
<li>团队协作的成本和效率</li>
<li>后续迭代的成本和效率</li>
</ul>
</li>
</ul>
<p><strong>选择库时经常谈到的关键词</strong></p>
<ul>
<li>模式,普及率,成熟度</li>
<li>体量,局限性,学习成本</li>
<li>性能,活跃度,周边资源</li>
<li>前景,契合度,文档质量</li>
</ul>
<h3 id="选择的原则"><a href="#选择的原则" class="headerlink" title="选择的原则"></a>选择的原则</h3><ol>
<li>妥适性原则(避免过度实现)</li>
<li>库的选择:<ol>
<li>缩小依赖范围和向稳定方向依赖</li>
<li>避重趋轻、避繁逐简、以简驭繁、避虚就实</li>
<li>可替代性</li>
</ol>
</li>
<li>主框架的选择<ol>
<li>没有不二法则</li>
<li>拥抱未来</li>
<li>经验价值高</li>
<li>架构上的优势为重</li>
</ol>
</li>
</ol>
<h3 id="选择的原则-白话版"><a href="#选择的原则-白话版" class="headerlink" title="选择的原则(白话版)"></a>选择的原则(白话版)</h3><ol>
<li>妥适性原则(避免过度实现)</li>
<li>库的选择，尽量同时满足以下条件<ol>
<li>单一性</li>
<li>普遍性</li>
<li>轻量型</li>
<li>依赖少</li>
</ol>
</li>
<li>主框架的选择：做足调研和实践，多和老司机交流</li>
<li>code Review 十分重要</li>
</ol>
<h3 id="包分析工具"><a href="#包分析工具" class="headerlink" title="包分析工具"></a>包分析工具</h3><p id="border-green">可以分析出项目中库的依赖和自己写得代码的比重</p>

<p><a href="https://www.npmjs.com/package/webpack-bundle-analyzer" rel="external nofollow noopener noreferrer" target="_blank">https://www.npmjs.com/package/webpack-bundle-analyzer</a></p>
<hr>
<h2 id="RN跨三端技术实践"><a href="#RN跨三端技术实践" class="headerlink" title="RN跨三端技术实践"></a>RN跨三端技术实践</h2><p>分享人：<a href="https://github.com/putaoshu" rel="external nofollow noopener noreferrer" target="_blank">刘威</a>(京东金融)</p>
<h3 id="移动开发常见问题"><a href="#移动开发常见问题" class="headerlink" title="移动开发常见问题"></a>移动开发常见问题</h3><ul>
<li>原生开发 <code>门槛高</code></li>
<li>原生发版到上线相对 <code>周期长</code></li>
<li>原生线上问题相对 <code>难修复</code></li>
<li>H5 相对原生 <code>体验差</code></li>
</ul>
<h3 id="RN优缺点"><a href="#RN优缺点" class="headerlink" title="RN优缺点"></a>RN优缺点</h3><ul>
<li>优点<ul>
<li>学习<code>成本低</code></li>
<li>体验<code>接近原生</code></li>
<li>二端代码<code>可复用</code></li>
<li>社区活跃</li>
</ul>
</li>
<li>缺点<ul>
<li>不支持热更新</li>
<li>不支持h5</li>
<li>向下兼容性差</li>
<li>低端机型会有崩溃</li>
</ul>
</li>
</ul>
<h3 id="三端平台-架构"><a href="#三端平台-架构" class="headerlink" title="三端平台-架构"></a>三端平台-架构</h3><p><img src="../imgs/jinrong.png" alt=""></p>
<h4 id="关于热更新"><a href="#关于热更新" class="headerlink" title="关于热更新"></a>关于热更新</h4><p id="border-green">苹果官方停掉热更新之后并不影响RN，因为RN热更新没有更改底层的OC代码</p>

<ul>
<li>缓存机制<ul>
<li>模块名称</li>
<li>bundle文件下载地址</li>
<li>文件校验安全码</li>
<li>版本号</li>
</ul>
</li>
<li>更新机制<ul>
<li>插件安全码是否一致</li>
</ul>
</li>
</ul>
<p>大体思路好像是：</p>
<ol>
<li>用户进入APP</li>
<li>默认下载一个某个接口的数据到本地<ul>
<li>接口中包括模块名称、bundle文件<code>下载地址</code>、文件校验安全码、版本号</li>
</ul>
</li>
<li>当用户再一次进入APP中的时候会再次下载接口中的数据</li>
<li>然后在对比之前的数据是否发生了变化，安全码是否一致</li>
<li>如果不一致，就重新下载一遍，以此实现热更新</li>
</ol>
<h4 id="拆分bundle"><a href="#拆分bundle" class="headerlink" title="拆分bundle"></a>拆分bundle</h4><ul>
<li>底层框架Bundle<ul>
<li>基础RN JS库</li>
<li>三端组件 JS库</li>
</ul>
</li>
<li>业务代码Bundle<ul>
<li>纯业务JS</li>
</ul>
</li>
<li><a href="https://www.npmjs.com/package/@cqingwang/react-native-split" rel="external nofollow noopener noreferrer" target="_blank">可参考react-native-split</a></li>
</ul>
<h4 id="灾备策略"><a href="#灾备策略" class="headerlink" title="灾备策略"></a>灾备策略</h4><p id="border-red">当在低版本手机点击时出现崩溃备用方案</p>

<ul>
<li>低版本的原生跳H5</li>
<li>原生连续崩溃降级至H5</li>
</ul>
<h4 id="如何支持web端"><a href="#如何支持web端" class="headerlink" title="如何支持web端"></a>如何支持web端</h4><ul>
<li>编译时转译RN API</li>
<li><a href="https://github.com/necolas/react-native-web" rel="external nofollow noopener noreferrer" target="_blank">react-native-web</a></li>
<li><a href="https://www.npmjs.com/package/node-haste-webpack-plugin" rel="external nofollow noopener noreferrer" target="_blank">node-haste-webpack-plugin</a></li>
</ul>
<h4 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h4><ul>
<li>入口配置灵活<ul>
<li>指定端和版本(可以指定版本打对应的包)</li>
<li>指定人群定向(作用主要用于测试)</li>
<li>小流量</li>
</ul>
</li>
</ul>
<h4 id="跳转中心"><a href="#跳转中心" class="headerlink" title="跳转中心"></a>跳转中心</h4><ul>
<li>低版本H5</li>
<li>高版本原生<ul>
<li>全量包URL</li>
<li>拆分包URL</li>
</ul>
</li>
<li>App 外输出H5页面</li>
</ul>
<h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><p><img src="../imgs/youhua.png" alt=""></p>
<h4 id="数据上报"><a href="#数据上报" class="headerlink" title="数据上报"></a>数据上报</h4><p><img src="../imgs/shangbao.png" alt=""></p>
<hr>
<h3 id="三端平台-集成方案"><a href="#三端平台-集成方案" class="headerlink" title="三端平台-集成方案"></a>三端平台-集成方案</h3><h4 id="三端组件"><a href="#三端组件" class="headerlink" title="三端组件"></a>三端组件</h4><ul>
<li>JS UI组件<ul>
<li>为<code>抹平</code>三端<code>差异化</code>的API，基于视觉的规范UI层JS组件</li>
<li>UIButon、UIExplain、UISwipe…</li>
</ul>
</li>
<li>JS 业务组件<ul>
<li>Fetch、Login…</li>
</ul>
</li>
</ul>
<p><a href="https://fe.jr.jd.com/" rel="external nofollow noopener noreferrer" target="_blank">变色龙三端开发平台文档</a></p>
<h4 id="三端工具"><a href="#三端工具" class="headerlink" title="三端工具"></a>三端工具</h4><ul>
<li>本地Nodejs脚手架</li>
<li>本地模拟器-Android</li>
<li>本地模拟器-IOS</li>
<li><a href="https://itunes.apple.com/cn/app/id1244996679?mt=8" rel="external nofollow noopener noreferrer" target="_blank"><code>独立调试IOS</code> APP</a></li>
<li>本地IDE客户端</li>
</ul>
<hr>
<h2 id="链家网前端工程实践"><a href="#链家网前端工程实践" class="headerlink" title="链家网前端工程实践"></a>链家网前端工程实践</h2><p>分享人：杨永林(链家)</p>
<h3 id="都说了什么"><a href="#都说了什么" class="headerlink" title="都说了什么"></a>都说了什么</h3><p><img src="../imgs/lianjia.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;构建大型应用&quot;&gt;&lt;a href=&quot;#构建大型应用&quot; class=&quot;headerlink&quot; title=&quot;构建大型应用&quot;&gt;&lt;/a&gt;构建大型应用&lt;/h2&gt;&lt;p&gt;分享人：孟红伦(钉钉)&lt;/p&gt;
&lt;h3 id=&quot;重要的俩块&quot;&gt;&lt;a href=&quot;#重要的俩块&quot; class=&quot;headerlink&quot; title=&quot;重要的俩块&quot;&gt;&lt;/a&gt;重要的俩块&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;TypeScript&lt;/code&gt; 解决代码 &lt;code&gt;复杂&lt;/code&gt; ,数据模型的问题&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;RxJS&lt;/code&gt; 更好的解决 &lt;code&gt;异步&lt;/code&gt; 带来的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;代码如何复杂&quot;&gt;&lt;a href=&quot;#代码如何复杂&quot; class=&quot;headerlink&quot; title=&quot;代码如何复杂&quot;&gt;&lt;/a&gt;代码如何复杂&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;上百个 RPC 接口&lt;/li&gt;
&lt;li&gt;几十种消息推送&lt;/li&gt;
&lt;li&gt;10W + 行代码&lt;/li&gt;
&lt;li&gt;模块依赖关系复杂&lt;/li&gt;
&lt;li&gt;数据模型复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;钉钉犯过的错&quot;&gt;&lt;a href=&quot;#钉钉犯过的错&quot; class=&quot;headerlink&quot; title=&quot;钉钉犯过的错&quot;&gt;&lt;/a&gt;钉钉犯过的错&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;开发时没有考虑到个人用户登录时的 ‘org’ 字段&lt;/li&gt;
&lt;li&gt;因为开发环境中是 &lt;code&gt;归属某个企业&lt;/code&gt; 的,忽视了对 &lt;code&gt;不归属任何企业的个人用户&lt;/code&gt;的测试&lt;/li&gt;
&lt;li&gt;最后还是用户主动反映了这个问题&lt;/li&gt;
&lt;li&gt;问题责任:测试的锅&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="FEDAY3" scheme="http://www.baixiaojian.com/tags/FEDAY3/"/>
    
      <category term="笔记" scheme="http://www.baixiaojian.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="记录" scheme="http://www.baixiaojian.com/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>RN 中 ES6 书写规范</title>
    <link href="http://www.baixiaojian.com/ReactES6/"/>
    <id>http://www.baixiaojian.com/ReactES6/</id>
    <published>2017-07-25T02:23:31.000Z</published>
    <updated>2017-07-25T03:25:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p id="border-blue">很多时候我们学会了很多东西,但是不知道 <code>怎么用、如何用、在哪用</code>这时这篇文章就显得 <code>很有用</code> 了。<br>参考依照：<a href="http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8" rel="external nofollow noopener noreferrer" target="_blank">ES5 ES6写法对照表</a></p>

<hr>
<a id="more"></a>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    Image,</div><div class="line">    Text</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div></pre></td></tr></table></figure>
<h3 id="导出单个类"><a href="#导出单个类" class="headerlink" title="导出单个类"></a>导出单个类</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 导出 */</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 引入 */</span></div><div class="line"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">'./MyComponent'</span>;</div></pre></td></tr></table></figure>
<hr>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Photo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;Image source=&#123;this.props.source&#125; /&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="给组件定义方法"><a href="#给组件定义方法" class="headerlink" title="给组件定义方法"></a>给组件定义方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Photo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    componentWillMount() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;Image source=&#123;this.props.source&#125; /&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="定义组件的-属性类型-和-默认属性"><a href="#定义组件的-属性类型-和-默认属性" class="headerlink" title="定义组件的 属性类型 和 默认属性"></a>定义组件的 <code>属性类型</code> 和 <code>默认属性</code></h3><p>在ES6里，可以统一使用 <code>static</code> 成员来实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> defaultProps = &#123;</div><div class="line">        <span class="attr">autoPlay</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">maxLoops</span>: <span class="number">10</span>,</div><div class="line">    &#125;;  <span class="comment">// 注意这里有分号</span></div><div class="line">    <span class="keyword">static</span> propTypes = &#123;</div><div class="line">        <span class="comment">// 定义 autoPlay必须是 布尔值</span></div><div class="line">        autoPlay: React.PropTypes.bool.isRequired,  </div><div class="line">        <span class="attr">maxLoops</span>: React.PropTypes.number.isRequired,</div><div class="line">        <span class="attr">posterFrameSrc</span>: React.PropTypes.string.isRequired,</div><div class="line">        <span class="attr">videoSrc</span>: React.PropTypes.string.isRequired,</div><div class="line">    &#125;;  <span class="comment">// 注意这里有分号</span></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;View /&gt;</div><div class="line">        );</div><div class="line">    &#125; // 注意这里既没有分号也没有逗号</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="初始化-STATE"><a href="#初始化-STATE" class="headerlink" title="初始化 STATE"></a>初始化 STATE</h2><p>第一种写法：方便、简单</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    state = &#123;</div><div class="line">        <span class="attr">loopsRemaining</span>: <span class="keyword">this</span>.props.maxLoops,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二种写法：语法上易理解，可以根据需要做一些计算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props)&#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            <span class="attr">loopsRemaining</span>: <span class="keyword">this</span>.props.maxLoops,</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="把方法作为-回调"><a href="#把方法作为-回调" class="headerlink" title="把方法作为 回调"></a>把方法作为 <code>回调</code></h2><p>在ES6下，需要通过bind来绑定this引用，或者使用箭头函数来调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostInfo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span></div><div class="line">&#123;</div><div class="line">    handleOptionsButtonClick(e)&#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">showOptionsModal</span>: <span class="literal">true</span>&#125;);</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;TouchableHighlight</div><div class="line">                onPress=&#123;this.handleOptionsButtonClick.bind(this)&#125; // bind绑定</div><div class="line">                onPress=&#123;e=&gt;this.handleOptionsButtonClick(e)&#125; // 箭头函数</div><div class="line">                &gt;</div><div class="line">                &lt;Text&gt;&#123;this.props.label&#125;&lt;/Text&gt;</div><div class="line">            &lt;/TouchableHighlight&gt;</div><div class="line">        )</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是，不论是bind还是箭头函数，每次被执行都返回的是一个新的函数引用，<br>因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PauseMenu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props)&#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>._onAppPaused = <span class="keyword">this</span>.onAppPaused.bind(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    componentWillMount()&#123;</div><div class="line">        AppStateIOS.addEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>._onAppPaused);</div><div class="line">    &#125;</div><div class="line">    componentDidUnmount()&#123;</div><div class="line">        AppStateIOS.removeEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>._onAppPaused);</div><div class="line">    &#125;</div><div class="line">    onAppPaused(event)&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p id=&quot;border-blue&quot;&gt;很多时候我们学会了很多东西,但是不知道 &lt;code&gt;怎么用、如何用、在哪用&lt;/code&gt;这时这篇文章就显得 &lt;code&gt;很有用&lt;/code&gt; 了。&lt;br&gt;参考依照：&lt;a href=&quot;http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;ES5 ES6写法对照表&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;
    
    </summary>
    
    
      <category term="React" scheme="http://www.baixiaojian.com/tags/React/"/>
    
      <category term="书写规范" scheme="http://www.baixiaojian.com/tags/%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/"/>
    
      <category term="ES6" scheme="http://www.baixiaojian.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>React-native 笔记</title>
    <link href="http://www.baixiaojian.com/React-native/"/>
    <id>http://www.baixiaojian.com/React-native/</id>
    <published>2017-07-12T08:47:59.000Z</published>
    <updated>2017-07-21T10:21:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>对中文网的的 ReactNative 的内容进行的 <code>提炼</code></li>
<li>对其中的内容进行了 <code>简化</code></li>
<li>对一些我个人认为较复杂且不常用的功能或概念 <code>采取忽略</code></li>
<li>对 ReactNative <code>不了解</code> 的同学可能会有一点帮助</li>
<li>如笔记整理有错误还请 <a href="https://github.com/jianxiaoBai/jianxiaobai.github.io/issues" rel="external nofollow noopener noreferrer" target="_blank">留言</a></li>
<li><p>深度阅读请访问 <a href="http://reactnative.cn/docs/0.46/getting-started.html#content" rel="external nofollow noopener noreferrer" target="_blank">ReactNative中文网</a></p>
<a id="more"></a>
</li>
</ul>
<h1 id="ReactNative-使用"><a href="#ReactNative-使用" class="headerlink" title="ReactNative 使用"></a>ReactNative 使用</h1><h2 id="安装运行-ReactNative"><a href="#安装运行-ReactNative" class="headerlink" title="安装运行 ReactNative"></a>安装运行 ReactNative</h2><ul>
<li><code>react-native init</code> AwesomeProject</li>
<li>cd AwesomeProject &amp;&amp; <code>react-native run-ios</code></li>
</ul>
<p><span id="inline-yellow">提示:</span> version参数 可用来指定版本,例如 <code>react-native init MyApp --version 0.44.3</code>。</p>
<hr>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 引用 React 的默认方法 与 Component 组件 */</span></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="comment">/* 引用 react-native 的AppRegister 与 Text 组件 */</span></div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, Text &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="comment">/* 定义 Hello 组件 并扩展到 react 的 Component 中*/</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="comment">/* JSX 渲染语法 */</span></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Text&gt;Hello world!&lt;/Text&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* AppRegistry的内置模块对 Hello组件 进行了“注册”操作,在整个应用里只会用一次 */</span></div><div class="line">AppRegistry.registerComponent(<span class="string">'Hello'</span>, () =&gt; Hello);</div></pre></td></tr></table></figure>
<hr>
<h2 id="Props-属性"><a href="#Props-属性" class="headerlink" title="Props(属性)"></a>Props(属性)</h2><p id="border-blue">多数组件在创建时就可使用 <code>props参数</code> 来定制。</p>

<h3 id="Image组件使用-props"><a href="#Image组件使用-props" class="headerlink" title="Image组件使用 props"></a>Image组件使用 <code>props</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, Image &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bananas</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">let</span> pic = &#123;</div><div class="line">      <span class="attr">uri</span>: <span class="string">'https://upload.wikimedia.org/wikipedia/commons/d/de/Bananavarieties.jpg'</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Image source=&#123;pic&#125; style=&#123;&#123;width: 193, height: 110&#125;&#125; /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent('Bananas', () =&gt; Bananas);</div></pre></td></tr></table></figure>
<h3 id="自定义的组件使用-props"><a href="#自定义的组件使用-props" class="headerlink" title="自定义的组件使用 props"></a>自定义的组件使用 <code>props</code></h3><p><img src="/imgs/RN-props.jpg" alt=""></p>
<hr>
<h2 id="State-状态"><a href="#State-状态" class="headerlink" title="State(状态)"></a>State(状态)</h2><ul>
<li>RN中可通过 props 和 state 来控制一个组件<ul>
<li><code>props</code> 数据是在父组件中指定，仅生效一次</li>
<li><code>state</code> 数据可根据需求进行改写</li>
</ul>
</li>
<li><code>constructor</code> 可用来初始化state ,需要改写时调用 <code>setState</code> 方法</li>
</ul>
<p>文字变换例子</p>
<p><img src="/imgs/RN-state.jpg" alt=""></p>
<hr>
<h2 id="Style-样式"><a href="#Style-样式" class="headerlink" title="Style(样式)"></a>Style(样式)</h2><ul>
<li>按照JS的语法要求使用了驼峰命名法</li>
<li><code>StyleSheet.create</code> 来集中定义组件的样式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, StyleSheet, Text, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LotsOfStyles</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;Text style=&#123;styles.red&#125;&gt;just red&lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.bigblue&#125;&gt;just bigblue&lt;/Text&gt;</div><div class="line"></div><div class="line">        /* 常见的做法是按顺序使用属性，即后属性会覆盖前属性 */</div><div class="line"></div><div class="line">        &lt;Text style=&#123;[styles.bigblue, styles.red]&#125;&gt;bigblue, then red&lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;[styles.red, styles.bigblue]&#125;&gt;red, then bigblue&lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">bigblue</span>: &#123;</div><div class="line">    <span class="attr">color</span>: <span class="string">'blue'</span>,</div><div class="line">    <span class="attr">fontWeight</span>: <span class="string">'bold'</span>,</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">30</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">red</span>: &#123;</div><div class="line">    <span class="attr">color</span>: <span class="string">'red'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'LotsOfStyles'</span>, () =&gt; LotsOfStyles);</div></pre></td></tr></table></figure>
<hr>
<h2 id="Flexbox-布局"><a href="#Flexbox-布局" class="headerlink" title="Flexbox 布局"></a>Flexbox 布局</h2><p id="border-yellow"> <code>flexDirection</code> 的默认值是 <code>column</code> 而不是row，而flex也只能指定一个数字值。</p>

<ul>
<li>Flexbox 主要三属性<ul>
<li>flexDirection</li>
<li>justifyContent</li>
<li>alignItems</li>
</ul>
</li>
</ul>
<p><strong>居中排列</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, View &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlignItemsBasics</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="comment">// 尝试把`alignItems`改为`flex-start`看看</span></div><div class="line">      <span class="comment">// 尝试把`justifyContent`改为`flex-end`看看</span></div><div class="line">      <span class="comment">// 尝试把`flexDirection`改为`row`看看</span></div><div class="line">      &lt;View style=&#123;&#123;</div><div class="line">        <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">flexDirection</span>: <span class="string">'row'</span>,</div><div class="line">        <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">        <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">      &#125;&#125;&gt;</div><div class="line">        &lt;View style=&#123;&#123;width: 50, height: 50, backgroundColor: 'powderblue'&#125;&#125; /&gt;</div><div class="line">        &lt;View style=&#123;&#123;width: 50, height: 50, backgroundColor: 'skyblue'&#125;&#125; /&gt;</div><div class="line">        &lt;View style=&#123;&#123;width: 50, height: 50, backgroundColor: 'steelblue'&#125;&#125; /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">AppRegistry.registerComponent('AwesomeProject', () =&gt; AlignItemsBasics);</div></pre></td></tr></table></figure>
<hr>
<h2 id="TextInput"><a href="#TextInput" class="headerlink" title="TextInput"></a>TextInput</h2><ul>
<li><code>TextInput</code> 是一个允许用户输入文本的基础组件。</li>
<li><code>onChangeText</code> 属性接受一个函数，而此函数会在 <code>文本变化时</code> 被调用。</li>
<li><code>onSubmitEditing</code> 属性，会在 <code>文本被提交后</code>（用户按下软键盘上的提交键）调用。</li>
</ul>
<hr>
<h2 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h2><ul>
<li>ScrollView 是一个通用的可滚动的容器，其中可放入多个组件和视图，<code>不区分类型</code>,可以 <code>水平滚动</code></li>
<li>ScrollView 适合用来显示 <code>数量不多</code> 的滚动元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  ScrollView,</div><div class="line">  Image</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">testApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">      <span class="keyword">return</span>(</div><div class="line">        &lt;ScrollView&gt;</div><div class="line">          &lt;Text style=&#123;&#123;fontSize:96&#125;&#125;&gt;Scroll me plz&lt;/Text&gt;</div><div class="line">          &lt;Image source=&#123;require('./src/img/aaa.png')&#125; style=&#123;&#123;height:200,width:200&#125;&#125;/&gt;</div><div class="line">          &lt;Image source=&#123;require('./src/img/aaa.png')&#125; style=&#123;&#123;height:200,width:200&#125;&#125;/&gt;</div><div class="line">          &lt;Image source=&#123;require('./src/img/bbb.jpeg')&#125; style=&#123;&#123;height:200,width:200&#125;&#125;/&gt;</div><div class="line">          &lt;Image source=&#123;require('./src/img/aaa.png')&#125; style=&#123;&#123;height:200,width:200&#125;&#125;/&gt;</div><div class="line">          &lt;Image source=&#123;require('./src/img/aaa.png')&#125; style=&#123;&#123;height:200,width:200&#125;&#125;/&gt;</div><div class="line">          &lt;Text style=&#123;&#123;fontSize:96&#125;&#125;&gt;If you like&lt;/Text&gt;</div><div class="line">          &lt;Image source=&#123;require('./src/img/bbb.jpeg')&#125; style=&#123;&#123;height:200,width:200&#125;&#125;/&gt;</div><div class="line">          &lt;Text style=&#123;&#123;fontSize:80&#125;&#125;&gt;React Native&lt;/Text&gt;</div><div class="line">        &lt;/ScrollView&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">AppRegistry.registerComponent('testApp', () =&gt; testApp);</div></pre></td></tr></table></figure>
<hr>
<h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><ul>
<li>RN 中展示长列表数据的常用组件有俩个<ul>
<li>FlatList</li>
<li>SectionList</li>
</ul>
</li>
</ul>
<h3 id="FlatList-组件"><a href="#FlatList-组件" class="headerlink" title="FlatList 组件"></a>FlatList 组件</h3><ul>
<li><p>特点</p>
<ul>
<li>适用展示一组 <code>仅数据不同的垂直滚动列表</code></li>
<li>适用 <code>长列表数据</code> 且元素的个数可以增删</li>
<li>FlatList <code>优先渲染屏幕上可见的元素</code></li>
</ul>
</li>
<li><p>使用</p>
<ul>
<li>FlatList 组件 <code>必须</code> 的两个属性是 <code>data</code> 和 <code>renderItem</code> 。<ul>
<li>data 是列表的 <code>数据源</code></li>
<li>renderItem 是从数据源中逐个 <code>解析数据</code> ，然后返回一个设定好格式的组件来渲染。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  ScrollView,</div><div class="line">  Image,</div><div class="line">  FlatList</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">testApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;FlatList</div><div class="line">          data=&#123;[</div><div class="line">            &#123;key: 'Devin'&#125;,</div><div class="line">            &#123;key: 'Jackson'&#125;,</div><div class="line">            &#123;key: 'James'&#125;,</div><div class="line">            &#123;key: 'Joel'&#125;,</div><div class="line">            &#123;key: 'John'&#125;,</div><div class="line">            &#123;key: 'Jillian'&#125;,</div><div class="line">            &#123;key: 'Jimmy'&#125;,</div><div class="line">            &#123;key: 'Julie'&#125;,</div><div class="line">            &#123;key: 'Julie'&#125;,</div><div class="line">            &#123;key: '白晓健'&#125;,</div><div class="line">            &#123;key: '白晓建'&#125;,</div><div class="line">            &#123;key: '白晓见'&#125;,</div><div class="line">            &#123;key: '白小剑'&#125;,</div><div class="line">          ]&#125;</div><div class="line">          // renderItem 一个对象, 里面有一个箭头函数其参数是一个对象,对象的值时 data 中的 每一项</div><div class="line">          renderItem=&#123;(&#123;item&#125;) =&gt; &#123;</div><div class="line"></div><div class="line">            return &lt;Text style=&#123;styles.item&#125;&gt; 你好&#123;item.key&#125; ,welcome &lt;/Text&gt;</div><div class="line">      &#125;&#125;</div><div class="line">        /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">   flex: 1,</div><div class="line">   paddingTop: 22,</div><div class="line">  &#125;,</div><div class="line">  item: &#123;</div><div class="line">    padding: 10,</div><div class="line">    fontSize: 18,</div><div class="line">    height: 44,</div><div class="line">    backgroundColor:'pink'</div><div class="line">  &#125;,</div><div class="line">&#125;)</div><div class="line">AppRegistry.registerComponent('testApp', () =&gt; testApp);</div></pre></td></tr></table></figure>
<h3 id="SectionList"><a href="#SectionList" class="headerlink" title="SectionList"></a>SectionList</h3><p id="border-blue">如果想提供一组数据分成 <code>逻辑部分</code> 或 <code>章节标题</code> ，可以使用 <code>SectionList</code> 。</p>


<h2 id="网络请求-fetch"><a href="#网络请求-fetch" class="headerlink" title="网络请求(fetch)"></a>网络请求(fetch)</h2><h3 id="发起网络请求"><a href="#发起网络请求" class="headerlink" title="发起网络请求"></a>发起网络请求</h3><p id="border-blue">想从地址获取内容,只需将网址作为参数即可</p>

<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">testApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  state = &#123;</div><div class="line">    <span class="attr">movies</span>:[</div><div class="line">      &#123;<span class="attr">key</span>: <span class="string">'白晓健'</span>&#125;,</div><div class="line">      &#123;<span class="attr">key</span>: <span class="string">'白晓建'</span>&#125;,</div><div class="line">      &#123;<span class="attr">key</span>: <span class="string">'白晓见'</span>&#125;,</div><div class="line">      &#123;<span class="attr">key</span>: <span class="string">'白小剑'</span>&#125;,</div><div class="line">    ],</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  fatchData=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    fetch(<span class="string">'https://api.douban.com/v2/movie/in_theaters'</span>)</div><div class="line">    <span class="comment">// 转换成 Text  是为了当意外发生时,更容易锁定错误</span></div><div class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.text())</div><div class="line">    .then(<span class="function">(<span class="params">responseText</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> json = <span class="built_in">JSON</span>.parse(responseText);</div><div class="line">      <span class="built_in">console</span>.log(json)</div><div class="line">      <span class="comment">// 重新设置 state 中 movies 的 值,也就是给 movies 赋值</span></div><div class="line">      <span class="keyword">this</span>.setState(&#123;<span class="attr">movies</span>:json.subjects&#125;);</div><div class="line">    &#125;)</div><div class="line">    .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.error(error);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  componentDidMount() &#123;</div><div class="line">      <span class="keyword">this</span>.fatchData()</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="comment">// const &#123; movies &#125; = this.state;</span></div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;FlatList</div><div class="line">          data=&#123;this.state.movies&#125;</div><div class="line">          // 一个对象 里面有一个</div><div class="line">          renderItem=&#123;(&#123;item&#125;) =&gt; &#123;</div><div class="line"></div><div class="line">            return &lt;Text style=&#123;styles.item&#125;&gt; 你好,&#123;item.title&#125; ,welcome &lt;/Text&gt;</div><div class="line">      &#125;&#125;</div><div class="line">        /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>fetch 的第二个可选参数,可用来定制HTTP请求一些参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 指定header参数，指定使用POST方法，提交数据 */</span></div><div class="line">fetch(<span class="string">'https://mywebsite.com/endpoint/'</span>, &#123;</div><div class="line">  <span class="attr">method</span>: <span class="string">'POST'</span>,</div><div class="line">  <span class="attr">headers</span>: &#123;</div><div class="line">    <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(&#123;</div><div class="line">    <span class="attr">firstParam</span>: <span class="string">'yourValue'</span>,</div><div class="line">    <span class="attr">secondParam</span>: <span class="string">'yourOtherValue'</span>,</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="处理响应数据"><a href="#处理响应数据" class="headerlink" title="处理响应数据"></a>处理响应数据</h3><ul>
<li>网络请求天生就是一种异步操作</li>
<li>Fetch 方法会返回一个 <code>Promise实例</code> ，其用意是简化异步风格的代码</li>
<li>默认情况下，iOS会 <code>阻止所有非https的请求</code> ,<a href="https://segmentfault.com/a/1190000002933776" rel="external nofollow noopener noreferrer" target="_blank">解决方案</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">getMoviesFromApiAsync() &#123;</div><div class="line">   <span class="keyword">return</span> fetch(<span class="string">'https://facebook.github.io/react-native/movies.json'</span>)</div><div class="line">     .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</div><div class="line">     .then(<span class="function">(<span class="params">responseJson</span>) =&gt;</span> &#123;</div><div class="line">       <span class="keyword">return</span> responseJson.movies;</div><div class="line">     &#125;)</div><div class="line">     .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</div><div class="line">       <span class="built_in">console</span>.error(error);</div><div class="line">     &#125;);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>RN 应用中使用 <code>ES7标准中</code> 的async/await 语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 注意这个方法前面有async关键字</span></div><div class="line"> <span class="keyword">async</span> getMoviesFromApi() &#123;</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">     <span class="comment">// 注意这里的await语句，其所在的函数必须有async关键字声明</span></div><div class="line">     <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(<span class="string">'https://facebook.github.io/react-native/movies.json'</span>);</div><div class="line">     <span class="keyword">let</span> responseJson = <span class="keyword">await</span> response.json();</div><div class="line">     <span class="keyword">return</span> responseJson.movies;</div><div class="line">   &#125; <span class="keyword">catch</span>(error) &#123;</div><div class="line">     <span class="comment">/* 别忘了catch住fetch可能抛出的异常，否则出错时你可能看不到任何提示。 */</span></div><div class="line">     <span class="built_in">console</span>.error(error);</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="使用其他的网络库"><a href="#使用其他的网络库" class="headerlink" title="使用其他的网络库"></a>使用其他的网络库</h3><ul>
<li>RN 中已经内置了 <code>XMLHttpRequest</code> 也就是 ajax</li>
<li>基于 <code>XMLHttpRequest</code> 封装的第三方库有 <code>frisbee</code> 或是 <code>axios</code> 等</li>
<li>没有跨域限制</li>
</ul>
<h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p id="border-blue">RN 支持 WebSocket，这种协议可以在单个 <code>TCP</code> 连接上提供 <code>全双工</code> 的通信信道</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket" rel="external nofollow noopener noreferrer" target="_blank">深度阅读</a></p>
<hr>
<h2 id="使用导航器跳转页面"><a href="#使用导航器跳转页面" class="headerlink" title="使用导航器跳转页面"></a>使用导航器跳转页面</h2><p id="border-yellow">从0.44版本开始， <code>Navigator</code> 被从react native的核心组件库中 <code>抽离</code> 到了一个名为 <code>react-native-deprecated-custom-components</code> 的单独模块中。<br>如果需要继续使用 <code>Navigator</code> ，则需要先 <code>yarn add react-native-deprecated-custom-components</code> 安装，然后从这个模块中 import，即 <code>import { Navigator } from &#39;react-native-deprecated-custom-components&#39;</code> .</p>


<h3 id="React-Navigation"><a href="#React-Navigation" class="headerlink" title="React Navigation"></a>React Navigation</h3><p id="border-blue">社区今后主推的方案是一个 <code>单独</code> 的导航库 <code>react-navigation</code> ，它的使用十分简单。</p>

<p><a href="https://reactnavigation.org/docs/intro/" rel="external nofollow noopener noreferrer" target="_blank">详细了解</a></p>
<p>首先是在当前应用中安装此库</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">yarn add react-navigation</div></pre></td></tr></table></figure>
<p>基本例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  Button</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> &#123; StackNavigator &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</div><div class="line"></div><div class="line"><span class="comment">/* 导入组件 */</span></div><div class="line"><span class="keyword">import</span> Detail <span class="keyword">from</span> <span class="string">'./src/components/Detail'</span>;</div><div class="line"><span class="keyword">import</span> ChatScreen <span class="keyword">from</span> <span class="string">'./src/components/Chat'</span>;</div><div class="line"><span class="keyword">import</span> TestScreen <span class="keyword">from</span> <span class="string">'./src/components/Test'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/* 定义本页面的导航栏设置*/</span></div><div class="line">  <span class="keyword">static</span> navigationOptions = &#123;</div><div class="line">    <span class="comment">/* 定义标题,此标题也是跳入其他页面时返回键上的信息 */</span></div><div class="line">    title: <span class="string">'Welcome'</span>,</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">/* 使标题生效 */</span></div><div class="line">    <span class="keyword">const</span> &#123; navigate &#125; = <span class="keyword">this</span>.props.navigation;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;Text&gt;Hello, Chat App!&lt;/Text&gt;</div><div class="line">        &lt;Button</div><div class="line">          /* 设置文本点击事件,进入指定组件 */</div><div class="line">          onPress=&#123;() =&gt; navigate('Chat')&#125;</div><div class="line">          title="Chat with Lucy"</div><div class="line">        /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* 在根文件中用 StackNavigator 声明这些组件(类似于定义路由),键就是 路由名称  */</div><div class="line">const testApp = StackNavigator(&#123;</div><div class="line">  Home: &#123; screen: HomeScreen &#125;,</div><div class="line">  aaa: &#123; screen: Detail &#125;,</div><div class="line">   Chat: &#123; screen: ChatScreen &#125;,</div><div class="line">   Test: &#123; screen: TestScreen &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent('testApp', () =&gt; testApp);</div></pre></td></tr></table></figure>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="静态图片资源引用方式"><a href="#静态图片资源引用方式" class="headerlink" title="静态图片资源引用方式"></a>静态图片资源引用方式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 正确</span></div><div class="line">&lt;Image source=&#123;<span class="built_in">require</span>(<span class="string">'./my-icon.png'</span>)&#125; /&gt;</div><div class="line"></div><div class="line"><span class="comment">// 错误</span></div><div class="line"><span class="keyword">var</span> icon = <span class="keyword">this</span>.props.active ? <span class="string">'my-icon-active'</span> : <span class="string">'my-icon-inactive'</span>;</div><div class="line">&lt;Image source=&#123;require('./' + icon + '.png')&#125; /&gt;</div><div class="line"></div><div class="line">// 正确</div><div class="line">var icon = this.props.active ? require('./my-icon-active.png') : require('./my-icon-inactive.png');</div><div class="line">&lt;Image source=&#123;icon&#125; /&gt;</div></pre></td></tr></table></figure>
<p>注意:require中的图片名字必须是一个静态字符串, <code>不能使用变量</code> ！</p>
<h3 id="静态非图片资源"><a href="#静态非图片资源" class="headerlink" title="静态非图片资源"></a>静态非图片资源</h3><p id="border-blue"><code>require</code> 语法也可以用来静态地加载你项目中的声音、视频或者文档等文件。</p>

<p>注意: <code>视频必须指定尺寸</code> 而不能使用flex样式.</p>
<h3 id="网络图片"><a href="#网络图片" class="headerlink" title="网络图片"></a>网络图片</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 正确</span></div><div class="line">&lt;Image source=&#123;&#123;<span class="attr">uri</span>: <span class="string">'https://facebook.github.io/react/img/logo_og.png'</span>&#125;&#125;</div><div class="line">       style=&#123;&#123;<span class="attr">width</span>: <span class="number">400</span>, <span class="attr">height</span>: <span class="number">400</span>&#125;&#125; /&gt;</div><div class="line"></div><div class="line"><span class="comment">// 错误</span></div><div class="line">&lt;Image source=&#123;&#123;<span class="attr">uri</span>: <span class="string">'https://facebook.github.io/react/img/logo_og.png'</span>&#125;&#125; /&gt;</div></pre></td></tr></table></figure>
<p>可携带参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;Image source=&#123;&#123;</div><div class="line">  <span class="attr">uri</span>: <span class="string">'https://facebook.github.io/react/img/logo_og.png'</span>,</div><div class="line">  <span class="attr">method</span>: <span class="string">'POST'</span>,</div><div class="line">  <span class="attr">headers</span>: &#123;</div><div class="line">    <span class="attr">Pragma</span>: <span class="string">'no-cache'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">body</span>: <span class="string">'Your Body goes here'</span></div><div class="line">&#125;&#125;</div><div class="line">style=&#123;&#123;<span class="attr">width</span>: <span class="number">400</span>, <span class="attr">height</span>: <span class="number">400</span>&#125;&#125; /&gt;</div></pre></td></tr></table></figure>
<h3 id="背景图片组件"><a href="#背景图片组件" class="headerlink" title="背景图片组件"></a>背景图片组件</h3><p>开发者们常面对的一种需求就是类似web中的背景图（background-image）。要实现这一用例，只需简单使用<imagebackground>组件，然后把需要背景图的子组件嵌入其中即可。</imagebackground></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">return</span> (</div><div class="line">  &lt;ImageBackground source=&#123;...&#125;&gt;</div><div class="line">    &lt;Text&gt;Inside&lt;/Text&gt;</div><div class="line">  &lt;/ImageBackground&gt;</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="处理触摸事件"><a href="#处理触摸事件" class="headerlink" title="处理触摸事件"></a>处理触摸事件</h2><h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyButton</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  _onPressButton() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"You tapped the button!"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;TouchableHighlight onPress=&#123;this._onPressButton&#125;&gt;</div><div class="line">        &lt;Text&gt;Button&lt;/Text&gt;</div><div class="line">      &lt;/TouchableHighlight&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>具体使用哪种组件，取决于希望给用户什么样的视觉反馈：<ul>
<li><code>TouchableHighlight</code>:来制作按钮或者链接。用户手指按下时 <code>背景变暗</code></li>
<li><code>TouchableNativeFeedback</code>:用户手指按下时形成类似 <code>墨水涟漪</code> 的视觉效果(限Android)</li>
<li><code>TouchableOpacity</code>:会在用户手指按下时 <code>降低透明度</code></li>
<li><code>TouchableWithoutFeedback</code>:点击事件的时 <code>无效果</code></li>
</ul>
</li>
</ul>
<p id="border-blue">某些场景中你可能需要检测用户是否进行了 <code>长按操作</code> 。<br>可以在上面列出的任意组件中使用 <code>onLongPress</code> 属性来实现。</p>

<h3 id="列表滑动"><a href="#列表滑动" class="headerlink" title="列表滑动"></a>列表滑动</h3><ul>
<li>ScrollView<ul>
<li>可实现用户会在列表中或快或慢的 <code>各种滑动</code></li>
<li>还可以配置 <code>pagingEnabled</code> 属性来让用户 <code>整屏滑动</code></li>
<li>水平方向的滑动还可以使用Android上的 <code>ViewPagerAndroid</code> 组件。</li>
</ul>
</li>
<li>ListView<ul>
<li>是一种特殊的ScrollView，用于显示 <code>较长垂直列表</code></li>
</ul>
</li>
</ul>
<hr>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ul>
<li>RN 提供了两个互补的动画系统：<ul>
<li>用于 <code>全局</code> 的布局动画 <code>LayoutAnimation</code></li>
<li>用于创建更 <code>精细</code> 的交互控制的动画 <code>Animated</code></li>
</ul>
</li>
</ul>
<p><a href="http://reactnative.cn/docs/0.46/animations.html#content" rel="external nofollow noopener noreferrer" target="_blank">深度阅读</a></p>
<hr>
<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>RN 实现了和浏览器一致的定时器 Timer 。</p>
<ul>
<li>定时器<ul>
<li>setTimeout, clearTimeout</li>
<li>setInterval, clearInterval</li>
<li><code>setImmediate</code>, clearImmediate</li>
<li><code>requestAnimationFrame</code>, cancelAnimationFrame</li>
</ul>
</li>
</ul>
<p>setImmediate 和 setTimeout 有略微不同.<br>requestAnimationFrame 和 setInterval 有略微不同.</p>
<p><a href="http://reactnative.cn/docs/0.46/timers.html#content" rel="external nofollow noopener noreferrer" target="_blank">详细阅读</a></p>
<p>注意: <code>卸载组件前务必清除定时器</code></p>
<hr>
<h2 id="直接操作"><a href="#直接操作" class="headerlink" title="直接操作"></a>直接操作</h2><p id="border-blue">在 RN 中， <code>setNativeProps</code> 就是等价于直接在底层操作DOM节点的方法。</p>

<p>注意: 在使用 <code>setNativeProps</code> 之前,先尝试用 <code>setState</code> 或 <code>shouldComponentUpdate</code> 方法来解决问题</p>
<hr>
<h1 id="ReactNative-问题"><a href="#ReactNative-问题" class="headerlink" title="ReactNative 问题"></a>ReactNative 问题</h1><h2 id="端口占用"><a href="#端口占用" class="headerlink" title="端口占用"></a>端口占用</h2><p id="border-red">当运行时提示 <code>“Packager can’t listen on port 8081”</code> ，说明 8081 端口被占用</p>

<ul>
<li>第一种<ul>
<li>检查占用端口的程序并关闭</li>
</ul>
</li>
<li>第二种<ol>
<li>启动服务时指定端口号 <code>react-native start --port 8083</code></li>
<li>手动修改项目下的 <code>node_modules/react-native/local-cli/server/server.js</code> 中的 port 字段</li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;对中文网的的 ReactNative 的内容进行的 &lt;code&gt;提炼&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对其中的内容进行了 &lt;code&gt;简化&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对一些我个人认为较复杂且不常用的功能或概念 &lt;code&gt;采取忽略&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对 ReactNative &lt;code&gt;不了解&lt;/code&gt; 的同学可能会有一点帮助&lt;/li&gt;
&lt;li&gt;如笔记整理有错误还请 &lt;a href=&quot;https://github.com/jianxiaoBai/jianxiaobai.github.io/issues&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;留言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;深度阅读请访问 &lt;a href=&quot;http://reactnative.cn/docs/0.46/getting-started.html#content&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;ReactNative中文网&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://www.baixiaojian.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ReactNative" scheme="http://www.baixiaojian.com/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>React-redux 笔记</title>
    <link href="http://www.baixiaojian.com/React-redux/"/>
    <id>http://www.baixiaojian.com/React-redux/</id>
    <published>2017-07-10T07:26:17.000Z</published>
    <updated>2017-07-27T09:29:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p id="border-blue">如果你的应用有以下场景，可以考虑使用 Redux。</p>

<ol>
<li>某个组件的状态 <code>需要共享</code></li>
<li>某个状态需要在 <code>任何地方</code> 都可以获取</li>
<li>一个组件想要 <code>改变全局状态</code></li>
<li>一个组件想要 <code>改变另一个组件状态</code></li>
</ol>
<a id="more"></a>
<h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><p id="border-green"> web 应用是一个 <code>状态机</code> ，视图与状态是 <code>相对应</code> 的,并且 <code>所有的状态都保存在一个对象里</code>。</p>


<h2 id="基本概念和-API"><a href="#基本概念和-API" class="headerlink" title="基本概念和 API"></a>基本概念和 API</h2><h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><ul>
<li>Store 就是保存数据的地方，你可以把它看成一个容器。</li>
<li><code>整个应用只能有一个 Store</code>。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div><div class="line"></div><div class="line"><span class="comment">/* createStore函数接受另一个函数作为参数，返回新生成的 Store 对象。 */</span></div></pre></td></tr></table></figure>
<h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><ul>
<li><code>Store对象包含所有数据</code>。</li>
<li><code>store.getState()</code> 可获得当前 State</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div><div class="line"></div><div class="line"><span class="keyword">const</span> state = store.getState();</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Redux 规定， 一个 State 对应一个 View。</div><div class="line"> * 只要 State 相同，View 就相同。</div><div class="line"> * 你知道 State，就知道 View 是什么样，反之亦然。</div><div class="line"> */</div></pre></td></tr></table></figure>
<h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><ul>
<li>Action 只是一个对象</li>
<li>Action 可改变 State, 其变化会同步到 View</li>
<li><code>type属性必须</code> ，表示 Action 的名称,其他属性随意</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> action = &#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'ADD_TODO'</span>,</div><div class="line">  <span class="attr">payload</span>: <span class="string">'Learn Redux'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="Action-Creator"><a href="#Action-Creator" class="headerlink" title="Action Creator"></a>Action Creator</h3><p>View 要发送多少种消息，就会有多少种 Action。<br>如果都手写，会很麻烦。可以定义一个函数来生成 Action，这个函数就叫 Action Creator。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> ADD_TODO = <span class="string">'添加 TODO'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: ADD_TODO,</div><div class="line">    text</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> action = addTodo(<span class="string">'Learn Redux'</span>);</div><div class="line"></div><div class="line"><span class="comment">/* addTodo函数就是一个 Action Creator。 */</span></div></pre></td></tr></table></figure>
<h3 id="store-dispatch"><a href="#store-dispatch" class="headerlink" title="store.dispatch()"></a>store.dispatch()</h3><p><code>store.dispatch()是 View 发出 Action 的唯一方法。</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div><div class="line"></div><div class="line"><span class="comment">/* store.dispatch接受一个 Action 对象作为参数，将它发送出去。*/</span></div><div class="line">store.dispatch(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'ADD_TODO'</span>,</div><div class="line">  <span class="attr">payload</span>: <span class="string">'Learn Redux'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/* 结合 Action Creator，这段代码可以改写如下。 */</span></div><div class="line">store.dispatch(addTodo(<span class="string">'Learn Redux'</span>));</div></pre></td></tr></table></figure>
<h3 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h3><ul>
<li>Reducer 是一个函数</li>
<li>接受 <code>当前State</code> 和 <code>Action</code> 作为参数并返回新的 <code>State</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> chatReducer = <span class="function">(<span class="params">state = defaultState, action = &#123;&#125;</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> &#123; type, payload &#125; = action;</div><div class="line">  <span class="keyword">switch</span> (type) &#123;</div><div class="line">    <span class="keyword">case</span> ADD_CHAT:</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</div><div class="line">        <span class="attr">chatLog</span>: state.chatLog.concat(payload)</div><div class="line">      &#125;);</div><div class="line">    <span class="keyword">case</span> CHANGE_STATUS:</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</div><div class="line">        <span class="attr">statusMessage</span>: payload</div><div class="line">      &#125;);</div><div class="line">    <span class="keyword">case</span> CHANGE_USERNAME:</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, &#123;</div><div class="line">        <span class="attr">userName</span>: payload</div><div class="line">      &#125;);</div><div class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> state;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="store-subscribe"><a href="#store-subscribe" class="headerlink" title="store.subscribe()"></a>store.subscribe()</h3><p id="border-blue"> <code>store.subscribe</code> 方法是用来设置监听函数，一旦 State 发生变化，就自动执行这个函数。</p>

<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 把 View 的更新函数（对于 React 项目，就是组件的render方法或setState方法）放入listen，就会实现 View 的自动渲染。</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">let</span> unsubscribe = store.subscribe(listener);</div><div class="line"></div><div class="line"><span class="comment">/* store.subscribe 方法返回一个函数，调用该函数就可以 解除监听 。 */</span></div><div class="line">unsubscribe();</div></pre></td></tr></table></figure>
<h3 id="流程步骤"><a href="#流程步骤" class="headerlink" title="流程步骤"></a>流程步骤</h3><ol>
<li>首先需要在 <code>reducer 函数内</code>,定义 type 值和默认值对应的操作</li>
<li>把 reducer 函数放到 storeCreate(reducer) <code>进行初始化</code> ,初始化时 返回的是 reducer 函数内的默认值</li>
<li>通过 store.dispatch({type:’xxx’,value:123}) 来发送 Action 数据格式,以此来触发 reducer 函数,并更新 state 当前值</li>
<li>在通过 <code>store.subscribe</code> 检测 State 的变化,以此来更新 View</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;未完待续&quot;&gt;&lt;a href=&quot;#未完待续&quot; class=&quot;headerlink&quot; title=&quot;未完待续&quot;&gt;&lt;/a&gt;未完待续&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p id=&quot;border-blue&quot;&gt;如果你的应用有以下场景，可以考虑使用 Redux。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;某个组件的状态 &lt;code&gt;需要共享&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;某个状态需要在 &lt;code&gt;任何地方&lt;/code&gt; 都可以获取&lt;/li&gt;
&lt;li&gt;一个组件想要 &lt;code&gt;改变全局状态&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个组件想要 &lt;code&gt;改变另一个组件状态&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://www.baixiaojian.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="React" scheme="http://www.baixiaojian.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React 笔记</title>
    <link href="http://www.baixiaojian.com/React/"/>
    <id>http://www.baixiaojian.com/React/</id>
    <published>2017-07-10T02:17:19.000Z</published>
    <updated>2017-07-10T07:48:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul>
<li>注意区分大小写</li>
<li>单标签后面一定要有 <code>/</code> 闭合符</li>
</ul>
<a id="more"></a>
<h2 id="ReactDOM-render"><a href="#ReactDOM-render" class="headerlink" title="ReactDOM.render()"></a>ReactDOM.render()</h2><p> React 的最基本方法，用于 将模板转为 HTML 语言，并插入到指定的 DOM 节点。</p>
<h2 id="JSX-语法"><a href="#JSX-语法" class="headerlink" title="JSX 语法"></a>JSX 语法</h2><ul>
<li>JSX 的基本语法规则：<ul>
<li>遇到 HTML 标签（以 &lt; 开头），就用 HTML 规则解析；</li>
<li>遇到代码块（以 { 开头），就用 JavaScript 规则解析;</li>
<li>JSX 允许直接在模板插入 JS 变量 <code>{x}</code>。</li>
<li>如果这个变量是一个数组，则会展开这个数组的所有成员</li>
</ul>
</li>
</ul>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>React 允许将代码封装成组件（component），然后像插入普通 HTML 标签一样，在网页中插入这个组件。</p>
<ul>
<li>组建类的第一个字母必须大写,否则会报错</li>
<li>组件类只能包含一个顶层标签,否则也会报错</li>
<li>组件可以任意加属性<ul>
<li>比如 <code>&lt;HelloMessage name=&quot;John&quot;&gt;</code></li>
<li>组件的属性可以在组件类的 <code>this.props</code>对象上获取 比如 <code>this.props.John</code><ul>
<li>添加组件属性，保留字需要注意就是</li>
<li>class 属性需要写成 className</li>
<li>for 属性需要写成 htmlFor</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="this-props-children"><a href="#this-props-children" class="headerlink" title="this.props.children"></a>this.props.children</h2><ul>
<li><code>this.props</code> 对象的属性与组件的属性一一对应.</li>
<li><code>this.props.children</code> 属性,表示组件的所有子节点</li>
</ul>
<p>React.Children.map 是专门来遍历 this.props.children 的一个方法</p>
<h2 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h2><ul>
<li>组件的属性可以接受任意值，字符串、对象、函数等等都可以。</li>
<li>有时，我们需要一种机制，验证别人使用组件时，提供的参数是否符合要求。</li>
<li><code>getDefaultProps</code> 方法可以用来设置组件属性的默认值。</li>
</ul>
<h2 id="获取真实的DOM节点"><a href="#获取真实的DOM节点" class="headerlink" title="获取真实的DOM节点"></a>获取真实的DOM节点</h2><ul>
<li>组件是存在于内存之中的一种数据结构，叫做虚拟(virtual) DOM,只有当它插入文档以后，才会变成真实的 DOM 。</li>
<li>React 中所有的 DOM 变动之前都先在虚拟 DOM 上发生，然后再将 <code>实际发生变动</code> 的部分，反映在真实DOM上，这种算法叫做 <code>DOM diff</code> ，它可以极大提高网页的性能表现。</li>
</ul>
<p>但是，有时需要从组件获取真实 DOM 的节点，这时就要用到 ref 属性.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> MyComponent = React.createClass(&#123;</div><div class="line">  <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.refs.myTextInput.focus();</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;input type="text" ref="myTextInput" /&gt;</div><div class="line">        &lt;input type="button" value="Focus the text input" onClick=&#123;this.handleClick&#125; /&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;MyComponent /&gt;,</div><div class="line">  document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>
<ul>
<li>组件 <code>MyComponent</code> 的子节点有一个文本输入框，用于获取用户的输入。</li>
<li>这时就必须获取真实的 DOM 节点，<code>虚拟 DOM 是拿不到用户输入的</code>。</li>
<li>为了做到这一点，文本输入框 <code>必须有一个 ref 属性</code>，然后 this.refs.[refName] 就会返回这个真实的 DOM 节点。</li>
<li>由于 this.refs.[refName] 属性获取的是 <code>真实 DOM</code> ，所以<code>必须等到虚拟 DOM 插入文档以后</code>，才能使用这个属性，否则会报错。</li>
<li>上面代码中，通过为组件指定 Click 事件的回调函数，确保了只有等到真实 DOM 发生 Click 事件之后，才会读取 this.refs.[refName] 属性。</li>
</ul>
<h2 id="this-state"><a href="#this-state" class="headerlink" title="this.state"></a>this.state</h2><p>React 中将组件看成是一个状态机，开始有一个初始状态，然后用户互动，导致状态变化，从而触发重新渲染 UI</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> LikeButton = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">liked</span>: <span class="literal">false</span>&#125;;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">liked</span>: !<span class="keyword">this</span>.state.liked&#125;);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> text = <span class="keyword">this</span>.state.liked ? <span class="string">'like'</span> : <span class="string">'haven\'t liked'</span>;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;p onClick=&#123;this.handleClick&#125;&gt;</div><div class="line">        You &#123;text&#125; this. Click to toggle.</div><div class="line">     &lt;/p&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;LikeButton /&gt;,</div><div class="line">  document.getElementById('example')</div><div class="line">);</div></pre></td></tr></table></figure>
<ul>
<li><code>LikeButton</code> 组件中的 <code>getInitialState</code> 方法用于定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。</li>
<li>当用户点击组件，导致状态变化，<code>this.setState</code> 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。</li>
<li>由于 this.props 和 this.state 都用于描述组件的特性，可能会产生混淆。<ul>
<li>this.props 表示那些一旦定义，就不再改变的特性</li>
<li>this.state 是会随着用户互动而产生变化的特性</li>
</ul>
</li>
</ul>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>类似于双向数据绑定</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> Input = React.createClass(&#123;</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="string">'Hello!'</span>&#125;;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">handleChange</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value&#125;);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> value = <span class="keyword">this</span>.state.value;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;input type="text" value=&#123;value&#125; onChange=&#123;this.handleChange&#125; /&gt;</div><div class="line">       &lt;p&gt;&#123;value&#125;&lt;/p&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">ReactDOM.render(&lt;Input/&gt;, document.body);</div></pre></td></tr></table></figure>
<p>文本输入框的值，不能用 this.props.value 读取，而要定义一个 <code>onChange</code> 事件的回调函数，通过 <code>event.target.value</code> 读取用户输入的值。</p>
<h2 id="组建的生命周期"><a href="#组建的生命周期" class="headerlink" title="组建的生命周期"></a>组建的生命周期</h2><ul>
<li><p>组件周期的三个状态</p>
<ul>
<li>Mounting：已插入真实 DOM</li>
<li>Updating：正在被重新渲染</li>
<li>Unmounting：已移出真实 DOM</li>
</ul>
</li>
<li><p>React 为每个状态都提供了两种处理函数，<code>will 函数在进入状态之前调用</code>，<code>did 函数在进入状态之后调用</code></p>
<ul>
<li>componentWillMount()</li>
<li>componentDidMount()</li>
<li>componentWillUpdate(object nextProps, object nextState)</li>
<li>componentDidUpdate(object prevProps, object prevState)</li>
<li>componentWillUnmount()</li>
</ul>
</li>
<li><p>此外，React 还提供两种特殊状态的处理函数。</p>
<ul>
<li>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</li>
<li>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</li>
</ul>
</li>
</ul>
<hr>
<p>参考自:<a href="http://www.ruanyifeng.com/blog/2015/03/react.html" rel="external nofollow noopener noreferrer" target="_blank">阮一峰入门实例教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;注意点&quot;&gt;&lt;a href=&quot;#注意点&quot; class=&quot;headerlink&quot; title=&quot;注意点&quot;&gt;&lt;/a&gt;注意点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;注意区分大小写&lt;/li&gt;
&lt;li&gt;单标签后面一定要有 &lt;code&gt;/&lt;/code&gt; 闭合符&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://www.baixiaojian.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="React" scheme="http://www.baixiaojian.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 笔记</title>
    <link href="http://www.baixiaojian.com/Hexo%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.baixiaojian.com/Hexo操作/</id>
    <published>2017-07-06T08:59:12.000Z</published>
    <updated>2017-07-07T04:58:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>hexo n “我的博客”</td>
<td>hexo new “我的博客” #新建文章</td>
</tr>
<tr>
<td>hexo p</td>
<td>hexo publish</td>
</tr>
<tr>
<td>hexo g</td>
<td>hexo generate#生成</td>
</tr>
<tr>
<td>hexo s</td>
<td>hexo server #启动服务预览</td>
</tr>
<tr>
<td>hexo d</td>
<td>hexo deploy#部署</td>
</tr>
</tbody>
</table>
<p id="border-purple">hexo d #部署 #可与hexo g合并为 <code>hexo d -g</code></p>

<a id="more"></a>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>hexo server</td>
<td>#Hexo 会监视文件变动并自动更新，您无须重启服务器</td>
</tr>
<tr>
<td>hexo server -s</td>
<td>#静态模式</td>
</tr>
<tr>
<td>hexo server -p 5000</td>
<td>#更改端口</td>
</tr>
<tr>
<td>hexo server -i 192.168.1.1</td>
<td>#自定义 IP</td>
</tr>
<tr>
<td>hexo clean</td>
<td>#清除缓存 网页正常情况下可以忽略此条命令</td>
</tr>
</tbody>
</table>
<h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>hexo g</td>
<td>#生成静态网页</td>
</tr>
<tr>
<td>hexo d</td>
<td>#开始部署</td>
</tr>
</tbody>
</table>
<h3 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>hexo new “postName”</td>
<td>#新建文章</td>
</tr>
<tr>
<td>hexo new page “pageName”</td>
<td>#新建页面</td>
</tr>
<tr>
<td>hexo generate</td>
<td>#生成静态页面至public目录</td>
</tr>
<tr>
<td>hexo server</td>
<td>#开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</td>
</tr>
<tr>
<td>hexo deploy</td>
<td>#将.deploy目录部署到GitHub</td>
</tr>
</tbody>
</table>
<h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>:title</td>
<td>标题</td>
</tr>
<tr>
<td>:year</td>
<td>建立的年份（4 位数）</td>
</tr>
<tr>
<td>:month</td>
<td>建立的月份（2 位数）</td>
</tr>
<tr>
<td>:i_month</td>
<td>建立的月份（去掉开头的零）</td>
</tr>
<tr>
<td>:day</td>
<td>建立的日期（2 位数）</td>
</tr>
<tr>
<td>:i_day</td>
<td>建立的日期（去掉开头的零）</td>
</tr>
</tbody>
</table>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">title: 搭建个人博客</div><div class="line">layout: post</div><div class="line">date: 2020-01-01 12:00:00</div><div class="line">comments: true</div><div class="line">categories: Blog</div><div class="line">tags: [Hexo]</div><div class="line">words: Hexo, Blog</div><div class="line">description: 搭建个人博客还是要用 Hexo</div></pre></td></tr></table></figure>
<hr>
<h2 id="书写语法"><a href="#书写语法" class="headerlink" title="书写语法"></a>书写语法</h2><h3 id="自定义图片大小"><a href="#自定义图片大小" class="headerlink" title="自定义图片大小"></a>自定义图片大小</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">标准：&#123;% img [class names] /path/image [width] [height] [title text [alt text]] %&#125;</div><div class="line">例如：&#123;% img  /imgs/baiyan.jpg 100 50  %&#125;</div></pre></td></tr></table></figure>
<h3 id="突破容器宽度限制的图片的三种方式"><a href="#突破容器宽度限制的图片的三种方式" class="headerlink" title="突破容器宽度限制的图片的三种方式"></a>突破容器宽度限制的图片的三种方式</h3><p id="border-blue">当使用此标签引用图片时，图片将自动扩大 26%，并突破文章容器的宽度。 此标签使用于需要突出显示的图片, 图片的扩大与容器的偏差从视觉上 <code>提升图片的吸引力</code> 。</p>

<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;img src=&quot;/image-url&quot; class=&quot;full-image&quot; /&gt;</div><div class="line">&#123;% fullimage /image-url, alt, title %&#125;</div><div class="line">&#123;% fi /image-url, alt, title %&#125;</div></pre></td></tr></table></figure>
<h3 id="Bootstrap-Callout"><a href="#Bootstrap-Callout" class="headerlink" title="Bootstrap Callout"></a>Bootstrap Callout</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125;</div></pre></td></tr></table></figure>
<p>其中，<code>class_name</code> 可以是以下列表中的一个值：</p>
<ul>
<li>default  默认</li>
<li>primary  提示</li>
<li>success  成功</li>
<li>info     提示</li>
<li>warning  警告</li>
<li>danger   危险</li>
</ul>
<h3 id="从书中引用"><a href="#从书中引用" class="headerlink" title="从书中引用"></a>从书中引用</h3><blockquote><p>新：DevDocs现在附带语法高亮。<a href="http://devdocs.io" rel="external nofollow noopener noreferrer" target="_blank">http://devdocs.io</a></p>
<footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" rel="external nofollow noopener noreferrer" target="_blank">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote>
<h3 id="文本居中的引用3中方式"><a href="#文本居中的引用3中方式" class="headerlink" title="文本居中的引用3中方式"></a>文本居中的引用3中方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;blockquote class=&quot;blockquote-center&quot;&gt;blah blah blah&lt;/blockquote&gt;</div><div class="line">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</div><div class="line">&#123;% cq %&#125;人一切的痛苦，本质上都是对自己的无能的愤怒&#123;% endcq %&#125;   推荐</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h2&gt;&lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;hexo n “我的博客”&lt;/td&gt;
&lt;td&gt;hexo new “我的博客” #新建文章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hexo p&lt;/td&gt;
&lt;td&gt;hexo publish&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hexo g&lt;/td&gt;
&lt;td&gt;hexo generate#生成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hexo s&lt;/td&gt;
&lt;td&gt;hexo server #启动服务预览&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hexo d&lt;/td&gt;
&lt;td&gt;hexo deploy#部署&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p id=&quot;border-purple&quot;&gt;hexo d #部署 #可与hexo g合并为 &lt;code&gt;hexo d -g&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="快捷键" scheme="http://www.baixiaojian.com/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>IDE 快捷键</title>
    <link href="http://www.baixiaojian.com/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://www.baixiaojian.com/快捷键/</id>
    <published>2017-07-06T06:57:04.000Z</published>
    <updated>2017-11-09T10:11:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/imgs/key1.jpg" alt=""></p>
<p id="border">各类开发工具中一般有很多快捷键，但常用的就那么一些，以下种类快捷键前后是根据我的 <code>使用频率</code> 进行排序</p>

<a id="more"></a>
<h2 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h2><h3 id="选择类"><a href="#选择类" class="headerlink" title="选择类"></a>选择类</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+D</td>
<td>匹配所选中的下一个相同文本</td>
</tr>
<tr>
<td>Alt+F3</td>
<td>匹配所选中的所有相同文本</td>
</tr>
<tr>
<td>Ctrl+Enter</td>
<td>在下一行插入新行</td>
</tr>
<tr>
<td>Ctrl+Shift+Enter</td>
<td>在上一行插入新行</td>
</tr>
<tr>
<td>Ctrl+Shift+←</td>
<td>向左单位性地选中文本</td>
</tr>
<tr>
<td>Ctrl+Shift+→</td>
<td>向右单位性地选中文本</td>
</tr>
<tr>
<td>Ctrl+左键</td>
<td>添加多光标</td>
</tr>
<tr>
<td>滚轮按住向下滑</td>
<td>添加多光标</td>
</tr>
<tr>
<td>Ctrl+Shift+↑</td>
<td>将光标所在行和上一行代码互换</td>
</tr>
<tr>
<td>Ctrl+Shift+↓</td>
<td>将光标所在行和下一行代码互换</td>
</tr>
<tr>
<td>Ctrl+←</td>
<td>向左单位性地移动光标，快速移动光标</td>
</tr>
<tr>
<td>Ctrl+→</td>
<td>向右单位性地移动光标，快速移动光标</td>
</tr>
<tr>
<td>shift+↑</td>
<td>向上选中行</td>
</tr>
<tr>
<td>shift+↓</td>
<td>向下选中行</td>
</tr>
<tr>
<td>Shift+←</td>
<td>向左选中文本</td>
</tr>
<tr>
<td>Shift+→</td>
<td>向右选中文本</td>
</tr>
<tr>
<td>Ctrl+M</td>
<td>光标移动至括号起始位置</td>
</tr>
<tr>
<td>Ctrl+Shift+M</td>
<td>选中括号内的内容</td>
</tr>
</tbody>
</table>
<h3 id="编辑类"><a href="#编辑类" class="headerlink" title="编辑类"></a>编辑类</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+Z</td>
<td>撤销</td>
</tr>
<tr>
<td>Ctrl+Shift+z</td>
<td>恢复撤销</td>
</tr>
<tr>
<td>Ctrl+Shift+D</td>
<td>复制光标所在整行，插入到下一行</td>
</tr>
<tr>
<td>Tab</td>
<td>向右缩进</td>
</tr>
<tr>
<td>Shift+Tab</td>
<td>向左缩进</td>
</tr>
<tr>
<td>Ctrl+F2</td>
<td>设置书签</td>
</tr>
<tr>
<td>Ctrl+/</td>
<td>注释单行</td>
</tr>
<tr>
<td>Ctrl+Shift+/</td>
<td>注释多行</td>
</tr>
</tbody>
</table>
<h3 id="搜索类"><a href="#搜索类" class="headerlink" title="搜索类"></a>搜索类</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+F</td>
<td>打开底部搜索框，查找关键字</td>
</tr>
<tr>
<td>Ctrl+shift+F</td>
<td>在 <code>文件夹</code> 内查找所要搜索的内容</td>
</tr>
<tr>
<td>Ctrl+Shift+P</td>
<td>打开命令框</td>
</tr>
<tr>
<td>Ctrl+G</td>
<td>打开搜索框，自动带：，输入数字跳转到该行代码</td>
</tr>
<tr>
<td>Ctrl+P</td>
<td>打开搜索框，可输入当前项目中的文件名，快速搜索文件</td>
</tr>
</tbody>
</table>
<h3 id="窗口类"><a href="#窗口类" class="headerlink" title="窗口类"></a>窗口类</h3><table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>alt+Shift+ <code>Number</code></td>
<td>窗口分屏，恢复默认 <code>Number</code> 屏（非小键盘的数字）</td>
</tr>
<tr>
<td>Ctrl+K+B</td>
<td>开启/关闭侧边栏</td>
</tr>
<tr>
<td>Ctrl+Tab</td>
<td>按文件浏览过的顺序，切换当前窗口的标签页</td>
</tr>
<tr>
<td>Ctrl+PageDown</td>
<td>向左切换当前窗口的标签页</td>
</tr>
<tr>
<td>Ctrl+PageUp</td>
<td>向右切换当前窗口的标签页</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/imgs/key1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p id=&quot;border&quot;&gt;各类开发工具中一般有很多快捷键，但常用的就那么一些，以下种类快捷键前后是根据我的 &lt;code&gt;使用频率&lt;/code&gt; 进行排序&lt;/p&gt;
    
    </summary>
    
    
      <category term="快捷键" scheme="http://www.baixiaojian.com/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>ES6 笔记</title>
    <link href="http://www.baixiaojian.com/es6/"/>
    <id>http://www.baixiaojian.com/es6/</id>
    <published>2017-06-23T02:15:10.000Z</published>
    <updated>2017-07-10T07:27:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>对阮一峰的ES6的内容进行的 <code>提炼</code></li>
<li>对其中的内容进行了 <code>简化</code></li>
<li>对一些我个人认为较复杂且不常用的功能或概念 <code>采取忽略</code></li>
<li>对ES6 <code>不熟悉</code> 的同学 可能会有一点帮助</li>
<li>如笔记整理有错误还请留言 <a href="https://github.com/jianxiaoBai/jianxiaobai.github.io/issues" rel="external nofollow noopener noreferrer" target="_blank">指出</a></li>
<li>深度阅读请访问 <a href="http://es6.ruanyifeng.com" rel="external nofollow noopener noreferrer" target="_blank">http://es6.ruanyifeng.com</a></li>
</ul>
<a id="more"></a>
<hr>
<h2 id="let-与-const"><a href="#let-与-const" class="headerlink" title="let 与 const"></a>let 与 const</h2><p id="border-red">代码块：外层作用域无法读取内层作用域中的变量</p>

<ul>
<li>共同点<ul>
<li>只在块级作用域中有效</li>
<li>暂时性死区</li>
<li>不允许重复声明</li>
<li>不存在变量提升</li>
</ul>
</li>
<li>不同点<ul>
<li>const 声明时 <span id="inline-red">必须赋值</span> 并且 <span id="inline-blue">值不可变</span></li>
</ul>
</li>
</ul>
<hr>
<h2 id="关于解析赋值"><a href="#关于解析赋值" class="headerlink" title="关于解析赋值"></a>关于解析赋值</h2><h3 id="数组的"><a href="#数组的" class="headerlink" title="数组的"></a>数组的</h3><p id="border-blue">数组的元素是按 <span id="inline-blue">次序排列</span> 的，变量的取值要与位置匹配</p>

<p><strong>典型例子</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line">head <span class="comment">// 1</span></div><div class="line">tail <span class="comment">// [2, 3, 4]</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">'a'</span>];</div><div class="line">x <span class="comment">// "a"</span></div><div class="line">y <span class="comment">// undefined</span></div><div class="line">z <span class="comment">// []</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</div><div class="line">a <span class="comment">// 1</span></div><div class="line">b <span class="comment">// 2</span></div><div class="line">d <span class="comment">// 4</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>设置默认值</strong> ：解构赋值允许指定默认值。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>]; <span class="comment">// x='a', y='b'</span></div><div class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>, <span class="literal">undefined</span>]; <span class="comment">// x='a', y='b'</span></div><div class="line"></div><div class="line">-------------------------------------------</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'aaa'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 函数 f 没有执行，因为 x 的值是 1 不属于 undefined</span></div><div class="line"><span class="keyword">let</span> [x = f()] = [<span class="number">1</span>];</div></pre></td></tr></table></figure>
<hr>
<h3 id="对象的"><a href="#对象的" class="headerlink" title="对象的"></a>对象的</h3><p id="border-blue">对象的属性虽没有次序，但变量必须与属性同名</p>

<p><strong>典型例子</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">let</span> &#123; bar, foo &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</div><div class="line">foo <span class="comment">// "aaa"</span></div><div class="line">bar <span class="comment">// "bbb"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123; baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</div><div class="line">baz <span class="comment">// undefined</span></div><div class="line">-------------------------------------------</div><div class="line"><span class="comment">/* 如果变量名与属性名不一致，必须写成下面这样。*/</span></div><div class="line"></div><div class="line"><span class="comment">/***********</span></div><div class="line">注意:对于let和const来说，变量不能重新声明，所以一旦赋值的变量以前声明过，就会报错。</div><div class="line">************/</div><div class="line"></div><div class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">first</span>: <span class="string">'hello'</span>, <span class="attr">last</span>: <span class="string">'world'</span> &#125;;</div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">first</span>: f, <span class="attr">last</span>: l &#125; = obj;</div><div class="line">f <span class="comment">// 'hello'</span></div><div class="line">l <span class="comment">// 'world'</span></div><div class="line"></div><div class="line">-------------------------------------------</div><div class="line"><span class="comment">/***********</span></div><div class="line">下面代码中，let命令下面一行的圆括号是必须的，否则会报错。</div><div class="line">因为解析器会将起首的大括号，理解成一个代码块，而不是赋值语句。</div><div class="line">************/</div><div class="line"></div><div class="line"><span class="keyword">let</span> foo;</div><div class="line">(&#123;foo&#125; = &#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;); <span class="comment">// 成功</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> baz;</div><div class="line">(&#123;<span class="attr">bar</span>: baz&#125; = &#123;<span class="attr">bar</span>: <span class="number">1</span>&#125;); <span class="comment">// 成功</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>设置默认值</strong> ：解构赋值允许指定默认值。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;x = <span class="number">3</span>&#125; = &#123;&#125;;</div><div class="line">x <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;x, y = <span class="number">5</span>&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</div><div class="line">x <span class="comment">// 1</span></div><div class="line">y <span class="comment">// 5</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;<span class="attr">x</span>:y = <span class="number">3</span>&#125; = &#123;&#125;;</div><div class="line">y <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;<span class="attr">x</span>:y = <span class="number">3</span>&#125; = &#123;<span class="attr">x</span>: <span class="number">5</span>&#125;;</div><div class="line">y <span class="comment">// 5</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123; <span class="attr">message</span>: msg = <span class="string">'Something went wrong'</span> &#125; = &#123;&#125;;</div><div class="line">msg <span class="comment">// "Something went wrong"</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="函数的"><a href="#函数的" class="headerlink" title="函数的"></a>函数的</h3><blockquote>
<p>经典范例</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 函数move的参数是一个对象，如果通过解构，得不到变量x或y的值，那么x和y等于默认值。*/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [x, y];</div><div class="line">&#125;</div><div class="line"></div><div class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></div><div class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, 0]. 因为 x 有值 就会赋值 ，y 没有值 就是默认值</span></div><div class="line">move(&#123;&#125;); <span class="comment">// [0, 0]</span></div><div class="line">move(); <span class="comment">// [0, 0]</span></div><div class="line">-------------------------------------------</div><div class="line"><span class="comment">/* undefined就会触发函数参数的默认值。 */</span></div><div class="line">[<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x = <span class="string">'yes'</span></span>) =&gt;</span> x);</div><div class="line"><span class="comment">// [ 1, 'yes', 3 ]</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="基本用途"><a href="#基本用途" class="headerlink" title="基本用途"></a>基本用途</h3><h4 id="交换变量的值"><a href="#交换变量的值" class="headerlink" title="交换变量的值"></a>交换变量的值</h4><blockquote>
<p>上面代码交换变量x和y的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</div><div class="line"></div><div class="line">[x, y] = [y, x];</div></pre></td></tr></table></figure>
<h4 id="从函数返回多个值"><a href="#从函数返回多个值" class="headerlink" title="从函数返回多个值"></a>从函数返回多个值</h4><blockquote>
<p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 返回一个数组</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> [a, b, c] = example();</div><div class="line"></div><div class="line"><span class="comment">// 返回一个对象</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">bar</span>: <span class="number">2</span></div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = example();</div></pre></td></tr></table></figure>
<h4 id="函数参数的定义"><a href="#函数参数的定义" class="headerlink" title="函数参数的定义"></a>函数参数的定义</h4><blockquote>
<p>解构赋值可以方便地将一组参数与变量名对应起来。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 参数是一组有次序的值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[x, y, z]</span>) </span>&#123; ... &#125;</div><div class="line">f([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div><div class="line"></div><div class="line"><span class="comment">// 参数是一组无次序的值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</div><div class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">x</span>: <span class="number">1</span>&#125;);</div></pre></td></tr></table></figure>
<h4 id="提取JSON数据"><a href="#提取JSON数据" class="headerlink" title="提取JSON数据"></a>提取JSON数据</h4><blockquote>
<p>解构赋值对提取JSON对象中的数据，尤其有用。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> jsonData = &#123;</div><div class="line">  <span class="attr">id</span>: <span class="number">42</span>,</div><div class="line">  <span class="attr">status</span>: <span class="string">"OK"</span>,</div><div class="line">  <span class="attr">data</span>: [<span class="number">867</span>, <span class="number">5309</span>]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123; id, status, <span class="attr">data</span>: number &#125; = jsonData;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(id, status, number);</div><div class="line"><span class="comment">// 42, "OK", [867, 5309]</span></div></pre></td></tr></table></figure>
<h4 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h4><blockquote>
<p>指定参数的默认值，就避免了在函数体内部再写var foo = config.foo || ‘default foo’;这样的语句。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">jQuery.ajax = <span class="function"><span class="keyword">function</span> (<span class="params">url, &#123;</span></span></div><div class="line">  async = true,</div><div class="line">  beforeSend = function () &#123;&#125;,</div><div class="line">  cache = <span class="literal">true</span>,</div><div class="line">  complete = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">  crossDomain = <span class="literal">false</span>,</div><div class="line">  global = <span class="literal">true</span>,</div><div class="line">  <span class="comment">// ... more config</span></div><div class="line">&#125;) &#123;</div><div class="line">  <span class="comment">// ... do stuff</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="遍历Map结构"><a href="#遍历Map结构" class="headerlink" title="遍历Map结构"></a>遍历Map结构</h4><blockquote>
<p>ap结构原生支持Iterator接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">map.set(<span class="string">'first'</span>, <span class="string">'hello'</span>);</div><div class="line">map.set(<span class="string">'second'</span>, <span class="string">'world'</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</div><div class="line">  <span class="built_in">console</span>.log(key + <span class="string">" is "</span> + value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// first is hello</span></div><div class="line"><span class="comment">// second is world</span></div><div class="line">-------------------------------------------</div><div class="line"><span class="comment">/* 如果只想获取键名，或者只想获取键值，可以写成下面这样。 */</span></div><div class="line"></div><div class="line"><span class="comment">// 获取键名</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key] <span class="keyword">of</span> map) &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取键值</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [,value] <span class="keyword">of</span> map) &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="输入模块的指定方法"><a href="#输入模块的指定方法" class="headerlink" title="输入模块的指定方法"></a>输入模块的指定方法</h4><blockquote>
<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class="built_in">require</span>(<span class="string">"source-map"</span>);</div></pre></td></tr></table></figure>
<hr>
<h2 id="关于类型的扩展"><a href="#关于类型的扩展" class="headerlink" title="关于类型的扩展"></a>关于类型的扩展</h2><h3 id="字符串扩展–模板字符串"><a href="#字符串扩展–模板字符串" class="headerlink" title="字符串扩展–模板字符串"></a>字符串扩展–模板字符串</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 普通字符串输出：  '\n' 换行，trim（） 消除字符前后空格</span></div><div class="line"><span class="string">` In JavaScript '\n' is a line-feed. `</span>.trim()</div><div class="line"></div><div class="line"><span class="comment">// 字符串中嵌入变量 :  `$&#123;&#125;`</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">"Bob"</span>;</div><div class="line"><span class="string">`Hello <span class="subst">$&#123;name&#125;</span>,`</span></div><div class="line"></div><div class="line"><span class="comment">// 大括号内部可以进行运算</span></div><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>，y = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="string">`<span class="subst">$&#123;x + y&#125;</span>`</span></div><div class="line"><span class="comment">// "3"</span></div><div class="line"></div><div class="line"><span class="comment">// 大括号内部可以调用函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">"Hello World"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="string">`foo <span class="subst">$&#123;fn()&#125;</span> bar`</span></div><div class="line"><span class="comment">// foo Hello World bar</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="正则的扩展–后行断言"><a href="#正则的扩展–后行断言" class="headerlink" title="正则的扩展–后行断言"></a>正则的扩展–后行断言</h3><p id="border-yellow">目前，有一个 <span id="inline-red">提案</span> ，引入后行断言。</p>

<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/* 先行断言 ,只匹配百分号之前的数字 */</span></div><div class="line">/\d+(?=%)/.exec(<span class="string">'of US presidents 100%  have been male'</span>)  <span class="comment">//["100"]</span></div><div class="line"></div><div class="line"><span class="comment">/* 后行断言 ,只匹配百分号之后的数字 */</span></div><div class="line">/(?<span class="xml"><span class="tag">&lt;<span class="name">=\$)\d+</span>/<span class="attr">.exec</span>('<span class="attr">Benjamin</span> <span class="attr">Franklin</span> <span class="attr">is</span> <span class="attr">on</span> <span class="attr">the</span> $<span class="attr">100</span> <span class="attr">bill</span>') //["<span class="attr">100</span>"]</span></span></div></pre></td></tr></table></figure>
<hr>
<h3 id="数值的扩展"><a href="#数值的扩展" class="headerlink" title="数值的扩展"></a>数值的扩展</h3><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Number.isNaN()</td>
<td>判断值是否为NaN，为NaN返回true</td>
</tr>
<tr>
<td>Number.parseInt()/parseFloat()</td>
<td>ES6将这俩个全局方法移植到了Number对象上</td>
</tr>
<tr>
<td>Number.isInteger()</td>
<td>判断值是否为整数</td>
</tr>
<tr>
<td>Math.trunc()</td>
<td>返回整数部分</td>
</tr>
<tr>
<td>Math.sign()</td>
<td>判断一个数是正数、负数、0，对应返回值 +1、-1、0</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h3><h4 id="Array-from-对象，-对象处理函数，-this指向"><a href="#Array-from-对象，-对象处理函数，-this指向" class="headerlink" title="Array.from(对象，_对象处理函数，_this指向)"></a>Array.from(对象，_对象处理函数，_this指向)</h4><p>可将 <code>数组的对象</code> 和 <code>可遍历的对象</code> 转换为数组结构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 类似数组的对象 */</span></div><div class="line"><span class="keyword">let</span> arrayLike = &#123;</div><div class="line">    <span class="string">'0'</span>: <span class="string">'a'</span>,</div><div class="line">    <span class="string">'1'</span>: <span class="string">'b'</span>,</div><div class="line">    <span class="string">'2'</span>: <span class="string">'c'</span>,</div><div class="line">    <span class="attr">length</span>: <span class="number">3</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></div><div class="line"></div><div class="line"><span class="comment">/******************************************************/</span></div><div class="line"></div><div class="line"><span class="comment">/* 可遍历的对象 */</span></div><div class="line"><span class="keyword">let</span> namesSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>]) <span class="comment">// nameSet &#123;'a','b'&#125;</span></div><div class="line"><span class="built_in">Array</span>.from(namesSet) <span class="comment">// ['a', 'b']</span></div></pre></td></tr></table></figure>
<h4 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h4><p>将一组值转换为数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3,11,8]</span></div><div class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>) <span class="comment">// [3]</span></div><div class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>,<span class="number">2</span>).length <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<h4 id="find-、findIndex-、includes"><a href="#find-、findIndex-、includes" class="headerlink" title="find()、findIndex()、includes()"></a>find()、findIndex()、includes()</h4><ul>
<li>find 方法，用于找出 <code>第一个</code> 符合条件的数组中的值，否则返回 undefined</li>
<li>findIndex 返回 <code>第一个</code> 符合条件的位置，否则返回-1。</li>
<li>includes() 和 indexOf() 很像，前者返回布尔值后者返回数值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>)</div><div class="line"><span class="comment">// -5</span></div><div class="line"></div><div class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</div><div class="line">&#125;) <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<h4 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h4><p>entries() 、keys()、values()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].keys()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(index);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].values()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(elem);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 'a'</span></div><div class="line"><span class="comment">// 'b'</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].entries()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(index, elem);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0 "a"</span></div><div class="line"><span class="comment">// 1 "b"</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h3><h4 id="函数参数的默认值-1"><a href="#函数参数的默认值-1" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h4><ul>
<li>函数内部是不可以再次声明形参</li>
<li>函数的执行时形参会形成作用域<ul>
<li>函数体内&gt;形参内&gt;全局内</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 如实例化时x、y没有传入参数，那么x、y的默认值就是 0 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x = <span class="number">0</span>, y = <span class="number">0</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = x;</div><div class="line">  <span class="keyword">this</span>.y = y;</div><div class="line">  <span class="comment">//</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point();</div><div class="line">p <span class="comment">// &#123; x: 0, y: 0 &#125;</span></div><div class="line"></div><div class="line"><span class="comment">/* 调用时不传参数会报错 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125;</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x, y);</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(&#123;&#125;) <span class="comment">// undefined, 5 , 因为只传了一个空对象，y有默认值 x等同于声明了未定义，即undefined</span></div><div class="line">foo() <span class="comment">// 报错. 因为没有传参数， 那么形参的声明的默认值就不会正确执行，即报错</span></div><div class="line"></div><div class="line"><span class="comment">/* 调用时不传参数不会报错 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125; = &#123;&#125;</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x, y);</div><div class="line">&#125;</div><div class="line">foo()  <span class="comment">// undefined, 5  这样就不会报错了</span></div></pre></td></tr></table></figure>
<h4 id="rest-形参"><a href="#rest-形参" class="headerlink" title="rest 形参"></a>rest 形参</h4><ul>
<li>rest 只能在形参中的最后一位</li>
<li>函数的length属性不包括 rest 函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mypush</span>(<span class="params">array, ...items</span>) </span>&#123;</div><div class="line">  items.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</div><div class="line">    array.push(item);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = [];</div><div class="line">mypush(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// a = [1,2,3];</span></div></pre></td></tr></table></figure>
<h4 id="扩展运算符的应用"><a href="#扩展运算符的应用" class="headerlink" title="扩展运算符的应用"></a>扩展运算符的应用</h4><h5 id="小应用"><a href="#小应用" class="headerlink" title="小应用"></a>小应用</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * 取得最大值</div><div class="line"> */</div><div class="line"><span class="built_in">Math</span>.max(...[<span class="number">14</span>, <span class="number">3</span>, <span class="number">77</span>])</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 将一个数组添加到另一个数组的尾部</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line">arr1.push(...arr2);</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 生成指定时间</div><div class="line"> */</div><div class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(...[<span class="number">2015</span>, <span class="number">1</span>, <span class="number">1</span>]);</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 合并数组</div><div class="line"> */</div><div class="line">[...arr1, ...arr2, ...arr3]</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 与解构赋值结合</div><div class="line"> */</div><div class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line">first <span class="comment">//1</span></div><div class="line">rest  <span class="comment">//[2, 3, 4, 5]</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> [first, ...rest] = [];</div><div class="line">first <span class="comment">//undefined</span></div><div class="line">rest  <span class="comment">//[]</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">"foo"</span>];</div><div class="line">first  <span class="comment">//"foo"</span></div><div class="line">rest   <span class="comment">//[]</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * 函数的返回值</div><div class="line"> * 从数据库取出一行数据，通过扩展运算符，直接将其传入构造函数Date。</div><div class="line"> */</div><div class="line">va r dateFields = readDateFields(database);</div><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(...dateFields);</div><div class="line"></div><div class="line"><span class="comment">// 将字符串转为真正的数组</span></div><div class="line">[...<span class="string">'hello'</span>]</div><div class="line"><span class="comment">// [ "h", "e", "l", "l", "o" ]</span></div></pre></td></tr></table></figure>
<h5 id="实现了-Iterator-接口的对象"><a href="#实现了-Iterator-接口的对象" class="headerlink" title="实现了 Iterator 接口的对象"></a>实现了 Iterator 接口的对象</h5><p>任何 Iterator 接口的对象，都可以用扩展运算符转为 <span id="inline-green">真正的数组</span>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> nodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</div><div class="line"><span class="keyword">var</span> array = [...nodeList];</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 扩展运算符可以将伪数组nodeList 转换真正的数组，</div><div class="line"> * 原因就在于 NodeList 对象实现了 Iterator 接口。</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">let</span> arrayLike = &#123;</div><div class="line">  <span class="string">'0'</span>: <span class="string">'a'</span>,</div><div class="line">  <span class="string">'1'</span>: <span class="string">'b'</span>,</div><div class="line">  <span class="string">'2'</span>: <span class="string">'c'</span>,</div><div class="line">  <span class="attr">length</span>: <span class="number">3</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> arr = [...arrayLike];</div><div class="line"><span class="comment">// 报错</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * arrayLike是一个类似数组的对象，但是没有部署Iterator接口，扩展运算符就会报错。</div><div class="line"> * 这时，可以改为使用Array.from方法将arrayLike转为真正的数组。</div><div class="line"> */</div></pre></td></tr></table></figure>
<h5 id="Map和Set结构，Generator函数"><a href="#Map和Set结构，Generator函数" class="headerlink" title="Map和Set结构，Generator函数"></a>Map和Set结构，Generator函数</h5><p id="border-blue">因此只要 <code>具有Iterator接口的对象</code>，都可以使用扩展运算符</p>

<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</div><div class="line">  [<span class="number">1</span>, <span class="string">'one'</span>],</div><div class="line">  [<span class="number">2</span>, <span class="string">'two'</span>],</div><div class="line">  [<span class="number">3</span>, <span class="string">'three'</span>],</div><div class="line">]);</div><div class="line"></div><div class="line"><span class="keyword">let</span> arr = [...map.keys()]; <span class="comment">// [1, 2, 3]</span></div></pre></td></tr></table></figure>
<p>Generator函数运行后，<code>返回一个遍历器对象</code>，因此也可以使用扩展运算符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> go = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">[...go()] <span class="comment">// [1, 2, 3]</span></div></pre></td></tr></table></figure>
<p>上面代码中，变量go是一个 Generator 函数，执行后返回的是一个遍历器对象，对这个遍历器对象执行扩展运算符，就会将内部遍历得到的值，转为一个数组。</p>
<hr>
<h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><h5 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h5><ol>
<li>箭头函数体内的 <code>this</code> 指向的是 <span id="inline-blue">父作用域</span></li>
<li>不可以当作构造函数</li>
<li>不可以使用 arguments 对象，可以用 rest 参数代替。</li>
<li>不可以使用 yield 命令</li>
</ol>
<h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 一个形参 */</span></div><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</div><div class="line"></div><div class="line"><span class="comment">/* 多个形参 */</span></div><div class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</div><div class="line"></div><div class="line"><span class="comment">/*  由于大括号被解释为代码块，所以返回对象时要加上小括号 */</span></div><div class="line"><span class="keyword">var</span> getTempItem = <span class="function"><span class="params">id</span> =&gt;</span> (&#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">"Temp"</span> &#125;);</div><div class="line"></div><div class="line"><span class="comment">/* 多条语句卸载大括号内 */</span></div><div class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123; <span class="keyword">return</span> num1 + num2; &#125;</div><div class="line"></div><div class="line"><span class="comment">/* 箭头函数与变量解构结合使用 */</span></div><div class="line"><span class="keyword">const</span> full = <span class="function">(<span class="params">&#123; first, last &#125;</span>) =&gt;</span> first + <span class="string">' '</span> + last;</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">full</span>(<span class="params">person</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> person.first + <span class="string">' '</span> + person.last;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="绑定-this"><a href="#绑定-this" class="headerlink" title="绑定 this"></a>绑定 this</h4><ul>
<li>绑定 this 是用来取代call、apply、bind调用</li>
<li>函数绑定运算符是并排的两个冒号（::）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">foo::bar;               <span class="comment">/* 等同于 */</span> bar.bind(foo);</div><div class="line"></div><div class="line">foo::bar(...arguments); <span class="comment">/* 等同于 */</span> bar.apply(foo, <span class="built_in">arguments</span>);</div><div class="line"></div><div class="line"><span class="comment">/* 如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面。 */</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> method = obj::obj.foo; <span class="comment">/* 等同于 */</span> <span class="keyword">var</span> method = ::obj.foo;</div><div class="line"><span class="keyword">var</span> log = ::<span class="built_in">console</span>.log;  <span class="comment">/* 等同于 */</span> <span class="keyword">var</span> log = <span class="built_in">console</span>.log.bind(<span class="built_in">console</span>);</div></pre></td></tr></table></figure>
<h4 id="尾调用-Tail-Call"><a href="#尾调用-Tail-Call" class="headerlink" title="尾调用(Tail Call)"></a>尾调用(Tail Call)</h4><p>ES6 的尾调用优化只在严格模式下开启，<code>正常模式是无效的</code>。</p>
<p id="border-blue">尾调用是<span id="inline-purple">函数式编程</span> 的一个重要概念，就是指 <span id="yu-1">某个函数 <strong>最后一步</strong> 以 <code>return</code> 的方式调用另一个函数</span> </p>

<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 尾调用 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> g(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 函数m和n都属于尾调用，因为它们都是函数f的最后一步操作。*/</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> m(x)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> n(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>对于尾调用优化的理解</strong></p>
<p id="border-purple">每函数执行时在内存中形成调用帧（保存调用位置和内部变量等信息），<code>调用帧的释放 取决于该函数是否执行了return</code> ，系统默认会自执行 return， 但前提是需要等待程序执行完毕时，那在这个过程中累积的调用帧无疑加大了内存的开销。<br>所以结尾处以 return 形式调用另一个函数 可以使 调用帧及时释放以减少无用的内存浪费</p>

<hr>
<h3 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h3><h4 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="属性的简洁表示法"></a>属性的简洁表示法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/*  对象内可以使用变量名 */</span></div><div class="line"><span class="keyword">var</span> foo = <span class="string">'bar'</span>;</div><div class="line"><span class="keyword">var</span> baz = &#123;foo&#125;;</div><div class="line">baz <span class="comment">// &#123;foo: "bar"&#125;</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line"><span class="comment">/*内部默认执行了 x = 1,y = 2 ，所以形参也是变量*/</span></div><div class="line">  <span class="keyword">return</span> &#123;x, y&#125;;</div><div class="line">&#125;</div><div class="line">f(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// Object &#123;x: 1, y: 2&#125;</span></div><div class="line"></div><div class="line"><span class="comment">/* 对象内方法的简写 */</span></div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">  method() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello!"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><p>场景一 ：对象中直接放一个变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> birth = <span class="string">'2000/01/01'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Person = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'张三'</span>,</div><div class="line">  birth,</div><div class="line">  hello() &#123; <span class="built_in">console</span>.log(<span class="string">'我的名字是'</span>, <span class="keyword">this</span>.name); &#125;</div><div class="line">&#125;;</div><div class="line">Person.birth <span class="comment">// '2000/01/01'</span></div></pre></td></tr></table></figure>
<p>场景二 ：这种写法用于函数的返回值，将会非常方便。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPoint</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line">  <span class="keyword">var</span> y = <span class="number">10</span>;</div><div class="line">  <span class="keyword">return</span> &#123;x, y&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">getPoint()</div><div class="line"><span class="comment">// &#123;x:1, y:10&#125;</span></div></pre></td></tr></table></figure>
<p>场景三 ：CommonJS <code>模块输出变量</code> ，就非常合适使用简洁写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> ms = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getItem</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> key <span class="keyword">in</span> ms ? ms[key] : <span class="literal">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setItem</span> (<span class="params">key, value</span>) </span>&#123;</div><div class="line">  ms[key] = value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  ms = &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123; getItem, setItem, clear &#125;;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">getItem</span>: getItem,</div><div class="line">  <span class="attr">setItem</span>: setItem,</div><div class="line">  <span class="attr">clear</span>: clear</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/* 例子一 */</span></div><div class="line"><span class="keyword">let</span> propKey = <span class="string">'foo'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  [propKey]: <span class="literal">true</span>,</div><div class="line">  [<span class="string">'a'</span> + <span class="string">'bc'</span>]: <span class="number">123</span></div><div class="line">&#125;;</div><div class="line">obj.foo <span class="comment">// true</span></div><div class="line">obj.abc <span class="comment">// 123</span></div><div class="line"></div><div class="line"><span class="comment">/* 例子二 */</span></div><div class="line"><span class="keyword">var</span> lastWord = <span class="string">'last word'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = &#123;</div><div class="line">  <span class="string">'first word'</span>: <span class="string">'hello'</span>,</div><div class="line">  [lastWord]: <span class="string">'world'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">a[<span class="string">'first word'</span>] <span class="comment">// "hello"</span></div><div class="line">a[lastWord] <span class="comment">// "world"</span></div><div class="line">a[<span class="string">'last word'</span>] <span class="comment">// "world"</span></div></pre></td></tr></table></figure>
<h5 id="属性表达式定义方法名"><a href="#属性表达式定义方法名" class="headerlink" title="属性表达式定义方法名"></a>属性表达式定义方法名</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  [<span class="string">'h'</span> + <span class="string">'ello'</span>]() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'hi'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">obj.hello() <span class="comment">// hi</span></div><div class="line"></div><div class="line"><span class="comment">/* 属性名表达式与简洁表示法，不能同时使用 */</span></div><div class="line"></div><div class="line"><span class="comment">// 报错</span></div><div class="line"><span class="keyword">var</span> foo = <span class="string">'aaa'</span>;</div><div class="line"><span class="keyword">var</span> aaa = <span class="string">'abc'</span>;</div><div class="line"><span class="keyword">var</span> baz = &#123; [foo] &#125;;</div><div class="line"></div><div class="line"><span class="comment">// 正确</span></div><div class="line"><span class="keyword">var</span> foo = <span class="string">'aaa'</span>;</div><div class="line"><span class="keyword">var</span> baz = &#123; [foo]: <span class="string">'abc'</span>&#125;;</div><div class="line">baz.aaa <span class="comment">// abc</span></div></pre></td></tr></table></figure>
<h4 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h4><p>比较俩个值是否相等,和 === 类似 .  Object.js(1,2) 等同于 1 === 2</p>
<h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h4><p id="border-blue">Object.assign方法用于合并对象，<code>第一个参数是目标对象</code> ，后面的参数都是源对象。</p>


<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</div><div class="line"><span class="keyword">var</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</div><div class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></div></pre></td></tr></table></figure>
<h5 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h5><ol>
<li>为对象添加属性</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;x, y&#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 通过Object.assign方法，将x、y属性添加到 Point 类的对象实例中 */</span></div></pre></td></tr></table></figure>
<ol>
<li>为对象添加方法</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> *通过 Object.assgin 函数将 aaa、bbb函数 添加到 SomeClass.prototype 原型中。</div><div class="line"> */</div><div class="line"><span class="built_in">Object</span>.assign(SomeClass.prototype, &#123;</div><div class="line">  aaa(arg1, arg2) &#123;</div><div class="line">    ···</div><div class="line">  &#125;,</div><div class="line">  bbb() &#123;</div><div class="line">    ···</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 等同于下面的写法</span></div><div class="line">SomeClass.prototype.aaa = <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</div><div class="line">  ···</div><div class="line">&#125;;</div><div class="line">SomeClass.prototype.bbb = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  ···</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ol>
<li>合并多个对象</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> merge =</div><div class="line">  <span class="function">(<span class="params">...sources</span>) =&gt;</span> <span class="built_in">Object</span>.assign(&#123;&#125;, ...sources);</div></pre></td></tr></table></figure>
<ol>
<li>为属性指定默认值</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> DEFAULTS = &#123;</div><div class="line">  <span class="attr">logLevel</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">outputFormat</span>: <span class="string">'html'</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">/* DEFAULTS对象是默认值，options对象是用户提供的参数。 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processContent</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  options = <span class="built_in">Object</span>.assign(&#123;&#125;, DEFAULTS, options);</div><div class="line">  <span class="built_in">console</span>.log(options);</div><div class="line">  <span class="comment">//  &#123;logLevel: 0, outputFormat: "html"&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="属性的遍历"><a href="#属性的遍历" class="headerlink" title="属性的遍历"></a>属性的遍历</h4><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>for…in</td>
<td>遍历自身的和继承的可枚举属性（不含 Symbol 属性）。</td>
</tr>
<tr>
<td>Object.keys(obj)</td>
<td>返回数组，（不含继承的）所有可枚举属性（不含 Symbol 属性）。</td>
</tr>
<tr>
<td>Object.getOwnPropertyNames(obj)</td>
<td>返回自身对象的一个数组，不含 Symbol 属性，但是包括不可枚举属性）。</td>
</tr>
<tr>
<td>Object.getOwnPropertySymbols(obj)</td>
<td>返回自身对象的一个数组，含所有 Symbol 属性。</td>
</tr>
<tr>
<td>Reflect.ownKeys(obj)</td>
<td>返回自身对象的一个数组，不管属性名是 Symbol 或字符串，也不管是否可枚举。</td>
</tr>
</tbody>
</table>
<ul>
<li>以上的5种方法遍历对象的属性，都遵守同样的属性遍历的次序规则。<ul>
<li>首先遍历 <code>为数值的属性</code>，按照 <code>数字排序</code> 。</li>
<li>其次遍历 <code>字符串的属性</code>，按照生成时间排序。</li>
<li>最后遍历 <code>Symbol 值的属性</code>，按照生成时间排序。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">Reflect</span>.ownKeys(&#123; [<span class="built_in">Symbol</span>()]:<span class="number">0</span>, <span class="attr">b</span>:<span class="number">0</span>, <span class="number">10</span>:<span class="number">0</span>, <span class="number">2</span>:<span class="number">0</span>, <span class="attr">a</span>:<span class="number">0</span> &#125;)</div><div class="line"><span class="comment">// ['2', '10', 'b', 'a', Symbol()]</span></div></pre></td></tr></table></figure>
<h4 id="proto-属性"><a href="#proto-属性" class="headerlink" title="proto 属性"></a><strong>proto</strong> 属性</h4><ul>
<li>Object.getprototypeOf() == 读取一个对象的原型对象</li>
<li>Object.setprototypeOf() == 设置一个对象的原型对象</li>
</ul>
<h4 id="Object-keys-values-entries"><a href="#Object-keys-values-entries" class="headerlink" title="Object.keys()/values()/entries()"></a>Object.keys()/values()/entries()</h4><p id="border-blue">可将对象中所有的 <code>键或值</code> 单独分离进行独立出来</p>

<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</div><div class="line"><span class="built_in">Object</span>.keys(obj)   <span class="comment">// ["foo", "baz"]</span></div><div class="line"><span class="built_in">Object</span>.values(obj)  <span class="comment">// ["bar", 42]</span></div><div class="line"><span class="built_in">Object</span>.entries(obj) <span class="comment">// [ ["foo", "bar"], ["baz", 42] ]</span></div></pre></td></tr></table></figure>
<h4 id="对象的扩展运算符"><a href="#对象的扩展运算符" class="headerlink" title="对象的扩展运算符"></a>对象的扩展运算符</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</div><div class="line">x <span class="comment">// 1</span></div><div class="line">y <span class="comment">// 2</span></div><div class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></div><div class="line"></div><div class="line"><span class="comment">/*******************************/</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">1</span> &#125; &#125;;</div><div class="line"><span class="keyword">let</span> &#123; ...x &#125; = obj;</div><div class="line">obj.a.b = <span class="number">2</span>;</div><div class="line">x.a.b <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="comment">/*******************************/</span></div><div class="line"><span class="keyword">let</span> z = &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</div><div class="line"><span class="keyword">let</span> n = &#123; ...z &#125;;</div><div class="line">n <span class="comment">// &#123; a: 3, b: 4 &#125;</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 扩展运算符可以用于合并两个对象。</div><div class="line"> */</div><div class="line"><span class="keyword">let</span> ab = &#123; ...a, ...b &#125;;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">let</span> ab = <span class="built_in">Object</span>.assign(&#123;&#125;, a, b);</div></pre></td></tr></table></figure>
<p><span id="yu-1">扩展运算符花样操作</span></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> aWithOverrides = &#123; ...a, <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">let</span> aWithOverrides = &#123; ...a, ...&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125; &#125;;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">let</span> x = <span class="number">1</span>, y = <span class="number">2</span>, aWithOverrides = &#123; ...a, x, y &#125;;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">let</span> aWithOverrides = <span class="built_in">Object</span>.assign(&#123;&#125;, a, &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;);</div></pre></td></tr></table></figure>
<hr>
<h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><ul>
<li>为了从根本上解决命名冲突</li>
<li>ES6 引入了一种新的原始数据类型 Symbol，<code>表示独一无二的值</code></li>
<li>目前总共7种分别是: undefined、null、Nubmber、String、Boolean、Object、 <span id="inline-blue">Symbol</span></li>
</ul>
<hr>
<h2 id="Set-和-Map-数据结构"><a href="#Set-和-Map-数据结构" class="headerlink" title="Set 和 Map 数据结构"></a>Set 和 Map 数据结构</h2><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><ul>
<li><strong>类似于数组</strong> ，但成员的值 <span id="inline-purple">没有重复</span> 的</li>
<li>可接受 <span id="inline-blue">任何数组</span> 作为参数进行初始化</li>
<li>Set 本身是一个构造函数，用来生成 Set 数据结构。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]);</div><div class="line">[...set]</div><div class="line"><span class="comment">// [1, 2, 3, 4]</span></div></pre></td></tr></table></figure>
<hr>
<h4 id="Set-属性"><a href="#Set-属性" class="headerlink" title="Set 属性"></a>Set 属性</h4><table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>构造函数</td>
<td>Set.prototype.constructor</td>
</tr>
<tr>
<td>成员总数</td>
<td>Set.prototype.size</td>
</tr>
</tbody>
</table>
<hr>
<h4 id="Set-方法"><a href="#Set-方法" class="headerlink" title="Set 方法"></a>Set 方法</h4><table>
<thead>
<tr>
<th>操作方法</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>add(value)：</td>
<td>添加某个值，返回Set结构本身。</td>
</tr>
<tr>
<td>delete(value)：</td>
<td>删除某个值，返回一个布尔值，表示删除是否成功。</td>
</tr>
<tr>
<td>has(value)：</td>
<td>返回一个布尔值，表示该值是否为Set的成员。</td>
</tr>
<tr>
<td>clear()：</td>
<td>清除所有成员，没有返回值。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>遍历方法</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>keys() / values()：</td>
<td>返回键名的遍历器</td>
</tr>
<tr>
<td>entries()：</td>
<td>返回键和值，但键和值都一样</td>
</tr>
<tr>
<td>forEach()：</td>
<td>使用回调函数遍历每个成员</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>]);</div><div class="line"></div><div class="line"><span class="comment">/* set 的默认方法就是 set.values */</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set) &#123;</div><div class="line">  <span class="built_in">console</span>.log(item);</div><div class="line">&#125;</div><div class="line"><span class="comment">// red</span></div><div class="line"><span class="comment">// green</span></div><div class="line"><span class="comment">// blue</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.entries()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(item);</div><div class="line">&#125;</div><div class="line"><span class="comment">// ["red", "red"]</span></div><div class="line"><span class="comment">// ["green", "green"]</span></div><div class="line"><span class="comment">// ["blue", "blue"]</span></div><div class="line"></div><div class="line"><span class="comment">/* forEach对每个成员执行某种操作，没有返回值。 */</span></div><div class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div><div class="line">set.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="built_in">console</span>.log(value * <span class="number">2</span>) )</div><div class="line"></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 4</span></div><div class="line"><span class="comment">// 6</span></div></pre></td></tr></table></figure>
<hr>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><h5 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">//方法一</span></div><div class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">let</span> unique = [...new <span class="built_in">Set</span>(arr)];</div><div class="line"><span class="comment">// [3, 5, 2]</span></div><div class="line"></div><div class="line"><span class="comment">//方法二</span></div><div class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]))</div><div class="line"><span class="comment">// [1, 2, 3, 4]</span></div></pre></td></tr></table></figure>
<h5 id="数组的-map-和-filter-方法结合Set轻松实现并、交、差集"><a href="#数组的-map-和-filter-方法结合Set轻松实现并、交、差集" class="headerlink" title="数组的 map 和 filter 方法结合Set轻松实现并、交、差集"></a>数组的 map 和 filter 方法结合Set轻松实现并、交、差集</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div><div class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</div><div class="line"></div><div class="line"><span class="comment">// 并集</span></div><div class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b]);</div><div class="line"><span class="comment">// Set &#123;1, 2, 3, 4&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 交集</span></div><div class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> b.has(x)));</div><div class="line"><span class="comment">// set &#123;2, 3&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 差集</span></div><div class="line"><span class="keyword">let</span> difference = <span class="keyword">new</span> <span class="built_in">Set</span>([...a].filter(<span class="function"><span class="params">x</span> =&gt;</span> !b.has(x)));</div><div class="line"><span class="comment">// Set &#123;1&#125;</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p id="border-purple">解决对象的键只能是字符串的痛点（null、undefined都可以），Map 结构提供了“值和值”的对应</p>

<h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/* 注意是 二维数组的方式 [ [],[],[] ]*/</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</div><div class="line">  [<span class="string">'name'</span>, <span class="string">'张三'</span>],</div><div class="line">  [<span class="string">'title'</span>, <span class="string">'Author'</span>]</div><div class="line">]);</div><div class="line"></div><div class="line">map.set(o, <span class="string">'content'</span>)</div><div class="line">map.has(<span class="string">'name'</span>) <span class="comment">// true</span></div><div class="line">map.get(<span class="string">'name'</span>) <span class="comment">// "张三"</span></div><div class="line">map.size <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p><span id="inline-red">注意</span> :Map 结构只会对 <span id="yu-1">有对象引用的</span> , 才将其视为一个键。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"></div><div class="line">map.set([<span class="string">'a'</span>], <span class="number">555</span>);</div><div class="line">map.get([<span class="string">'a'</span>])</div><div class="line"></div><div class="line"><span class="comment">// undefined 的原因是 set 时候的 ['a'] 和 get 时候的 ['a'] 在内存地址中不是同一个位置。</span></div><div class="line"></div><div class="line"><span class="comment">/*****************************************************/</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"></div><div class="line"><span class="keyword">const</span> k1 = [<span class="string">'a'</span>];</div><div class="line"><span class="keyword">const</span> k2 = [<span class="string">'a'</span>];</div><div class="line"></div><div class="line"><span class="comment">/* 链式写法 */</span></div><div class="line">map</div><div class="line">.set(k1, <span class="number">111</span>)</div><div class="line">.set(k2, <span class="number">222</span>);</div><div class="line"></div><div class="line">map.get(k1) <span class="comment">// 111</span></div><div class="line">map.get(k2) <span class="comment">// 222</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">  因为k1 的值是对象 ，而对象是引用类型储存在堆中，</div><div class="line">  set 和 get 用的 都是一个引用地址，所以就能取到对应的值,</div><div class="line">  k1 和 k2 的值虽然一样但是 存储的引用地址不一样，so 不会冲突</div><div class="line"> */</div></pre></td></tr></table></figure>
<h4 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h4><p>属性：<strong>size</strong> ，返回 Map结构成员总数。</p>
<p><strong>方法：</strong></p>
<table>
<thead>
<tr>
<th>操作的</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>set(key,value)：</td>
<td>设置 key 对应的键值,可采用链式写法</td>
</tr>
<tr>
<td>get(key)：</td>
<td>读取 key 对应的键值，找不到返回 undefined</td>
</tr>
<tr>
<td>has(value)：</td>
<td>返回一个布尔值，表示该值是否为 Map 的成员。</td>
</tr>
<tr>
<td>delete(value)：</td>
<td>删除某个值，返回一个布尔值，表示删除是否成功。</td>
</tr>
<tr>
<td>clear()：</td>
<td>清除所有成员，没有返回值。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>遍历的</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>keys()</td>
<td>返回键名的遍历器</td>
</tr>
<tr>
<td>values()</td>
<td>返回键值的遍历器</td>
</tr>
<tr>
<td>entries()：</td>
<td>（默认）返回键和值的遍历器</td>
</tr>
<tr>
<td>forEach()：</td>
<td>遍历map的所有成员</td>
</tr>
</tbody>
</table>
<p id="border-blue">forEach方法还可以接受第二个参数，用来绑定 this。</p>

<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> reporter = &#123;</div><div class="line">  <span class="attr">report</span>: <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Key: %s, Value: %s"</span>, key, value);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">map.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, key, map</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.report(key, value);</div><div class="line">&#125;, reporter);</div></pre></td></tr></table></figure>
<hr>
<h4 id="与其他数据结构的互相转换"><a href="#与其他数据结构的互相转换" class="headerlink" title="与其他数据结构的互相转换"></a>与其他数据结构的互相转换</h4><h5 id="Map-转为数组"><a href="#Map-转为数组" class="headerlink" title="Map 转为数组"></a>Map 转为数组</h5><blockquote>
<p>直接用扩展运算符就可以很方便的进行转化</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>()</div><div class="line">  .set(<span class="literal">true</span>, <span class="number">7</span>)</div><div class="line">  .set(&#123;<span class="attr">foo</span>: <span class="number">3</span>&#125;, [<span class="string">'abc'</span>]);</div><div class="line">[...myMap]</div><div class="line"><span class="comment">// [ [ true, 7 ], [ &#123; foo: 3 &#125;, [ 'abc' ] ] ]</span></div></pre></td></tr></table></figure>
<h5 id="数组转为-Map"><a href="#数组转为-Map" class="headerlink" title="数组转为 Map"></a>数组转为 Map</h5><blockquote>
<p>直接将数组传入 Map 构造函数，就可以转化为 Map 。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Map</span>([</div><div class="line">  [<span class="literal">true</span>, <span class="number">7</span>],</div><div class="line">  [&#123;<span class="attr">foo</span>: <span class="number">3</span>&#125;, [<span class="string">'abc'</span>]]</div><div class="line">])</div><div class="line"><span class="comment">// Map &#123;</span></div><div class="line"><span class="comment">//   true =&gt; 7,</span></div><div class="line"><span class="comment">//   Object &#123;foo: 3&#125; =&gt; ['abc']</span></div><div class="line"><span class="comment">// &#125;</span></div></pre></td></tr></table></figure>
<h5 id="Map-转为对象"><a href="#Map-转为对象" class="headerlink" title="Map 转为对象"></a>Map 转为对象</h5><blockquote>
<p>如果所有 Map 的键都是字符串，它可以转为对象。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">strMapToObj</span>(<span class="params">strMap</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [k,v] <span class="keyword">of</span> strMap) &#123;</div><div class="line">    obj[k] = v;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>()</div><div class="line">  .set(<span class="string">'yes'</span>, <span class="literal">true</span>)</div><div class="line">  .set(<span class="string">'no'</span>, <span class="literal">false</span>);</div><div class="line">strMapToObj(myMap)</div><div class="line"><span class="comment">// &#123; yes: true, no: false &#125;</span></div></pre></td></tr></table></figure>
<h5 id="对象转为-Map"><a href="#对象转为-Map" class="headerlink" title="对象转为 Map"></a>对象转为 Map</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">objToStrMap</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> strMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</div><div class="line">    strMap.set(k, obj[k]);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> strMap;</div><div class="line">&#125;</div><div class="line"></div><div class="line">objToStrMap(&#123;<span class="attr">yes</span>: <span class="literal">true</span>, <span class="attr">no</span>: <span class="literal">false</span>&#125;)</div><div class="line"><span class="comment">// Map &#123;"yes" =&gt; true, "no" =&gt; false&#125;</span></div></pre></td></tr></table></figure>
<h5 id="Map-转为-JSON"><a href="#Map-转为-JSON" class="headerlink" title="Map 转为 JSON"></a>Map 转为 JSON</h5><blockquote>
<p>Map 转为 JSON 要区分两种情况。一种情况是，Map 的键名都是字符串，这时可以选择转为对象 JSON。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">strMapToJson</span>(<span class="params">strMap</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(strMapToObj(strMap));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">'yes'</span>, <span class="literal">true</span>).set(<span class="string">'no'</span>, <span class="literal">false</span>);</div><div class="line">strMapToJson(myMap)</div><div class="line"><span class="comment">// '&#123;"yes":true,"no":false&#125;'</span></div><div class="line"></div><div class="line"><span class="comment">/************************************************************/</span></div><div class="line"></div><div class="line"><span class="comment">/* 另一种情况是，Map 的键名有非字符串，这时可以选择转为数组 JSON。 */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapToArrayJson</span>(<span class="params">map</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify([...map]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="literal">true</span>, <span class="number">7</span>).set(&#123;<span class="attr">foo</span>: <span class="number">3</span>&#125;, [<span class="string">'abc'</span>]);</div><div class="line">mapToArrayJson(myMap)</div><div class="line"><span class="comment">// '[[true,7],[&#123;"foo":3&#125;,["abc"]]]'</span></div></pre></td></tr></table></figure>
<h5 id="JSON-转-Map"><a href="#JSON-转-Map" class="headerlink" title="JSON 转 Map"></a>JSON 转 Map</h5><blockquote>
<p>JSON 转为 Map，正常情况下，所有键名都是字符串。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonToStrMap</span>(<span class="params">jsonStr</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> objToStrMap(<span class="built_in">JSON</span>.parse(jsonStr));</div><div class="line">&#125;</div><div class="line"></div><div class="line">jsonToStrMap(<span class="string">'&#123;"yes": true, "no": false&#125;'</span>)</div><div class="line"><span class="comment">// Map &#123;'yes' =&gt; true, 'no' =&gt; false&#125;</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="Proxy-（代理）"><a href="#Proxy-（代理）" class="headerlink" title="Proxy （代理）"></a>Proxy （代理）</h2><p><a href="http://es6.ruanyifeng.com/#docs/proxy" rel="external nofollow noopener noreferrer" target="_blank">详细介绍</a></p>
<p id="border-blue">在目标对象之前设置了一个中间人，外界访问该对象时都必须先通过这个中间人，这种机制就可以对外界的访问进行过滤和改写</p>

<p>ES6 原声提供 Proxy 构造函数，用来生成 proxy 实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</div></pre></td></tr></table></figure>
<ul>
<li>new Proxy(): 表示生成一个 <code>Proxy实例</code></li>
<li>target :  参数表示所要 <code>拦截的目标对象</code></li>
<li>handler: 参数也是一个对象，用来 <code>定制拦截行为</code>。</li>
</ul>
<h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><p id="border-purple">Proxy 对象可以拦截目标对象的任意属性，这使得它很合适用来写 Web 服务的客户端。<br></p>

<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 新建了一个 Web 服务的接口，这个接口返回各种数据。*/</span></div><div class="line"><span class="keyword">const</span> service = createWebService(<span class="string">'http://example.com/data'</span>);</div><div class="line"></div><div class="line">service.employees().then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> employees = <span class="built_in">JSON</span>.parse(json);</div><div class="line">  <span class="comment">// ···</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">/***********************************************/</span></div><div class="line"><span class="comment">/*</span></div><div class="line">Proxy 可以拦截这个对象的任意属性，</div><div class="line">所以不用为每一种数据写一个适配方法，只</div><div class="line">要写一个 Proxy 拦截就可以了。</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWebService</span>(<span class="params">baseUrl</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</div><div class="line">    get(target, propKey, receiver) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> httpGet(baseUrl+<span class="string">'/'</span> + propKey);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="Promise（承诺）-对象"><a href="#Promise（承诺）-对象" class="headerlink" title="Promise（承诺） 对象"></a>Promise（承诺） 对象</h2><h3 id="了解-Promise"><a href="#了解-Promise" class="headerlink" title="了解 Promise"></a>了解 Promise</h3><ul>
<li>Promise 是异步编程的一种解决方案</li>
<li>Promise 是一个保存着一个未来才会结束的事件</li>
<li>Promise 的俩个特点<ul>
<li>只有异步操作的 <span id="inline-blue">结果</span>，才能决定当前是哪一种 <span id="line-yellow">状态</span><ul>
<li>Pending（进行中）</li>
<li>Resolved（已完成，又称 Fulfilled）</li>
<li>Rejected（已失败）</li>
</ul>
</li>
<li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。<ul>
<li>状态的改变只有两种可能：从 <code>Pending</code> 变为 Resolved 和 从 <code>Pending</code> 变为 Rejected。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p id="border-red">如果某些事件不断地反复发生，一般来说，使用 <code>Stream</code> 模式是比部署Promise更好的选择。</p>

<hr>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p id="border-blue">ES6 规定，Promise对象是一个 <code>构造函数</code> ，用来生成Promise实例。</p>

<ul>
<li><code>Promise构造函数</code> 接受一个函数作为参数，该函数的两个参数也是函数分别是resolve和reject。</li>
<li>resolve 函数： 在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</li>
<li>reject 函数：在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 生成 promise 实例 */</span></div><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="comment">// ... some code</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</div><div class="line">    resolve(value);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    reject(error);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Promise实例生成以后，可以用then方法 分别指定Resolved状态 和 Reject状态的回调函数。</div><div class="line"> */</div><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="comment">// 成功时</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">  <span class="comment">// 失败时 （该函数可选）</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>一个 Promise 对象的简单例子</p>
<p><img src="/imgs/promise.jpg" alt=""></p>
<p>一个用Promise对象实现的 Ajax 操作的例子</p>
<p><img src="/imgs/getJSON.jpg" alt=""></p>
<h3 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h3><ul>
<li>then方法是定义在原型对象Promise.prototype上的</li>
<li>then(Resolved状态回调函数,Rejected 状态的回调函数)</li>
</ul>
<p>then方法返回的是一个 <code>新的</code> Promise实例,因此可以采用链式写法，即then方法后面再调用另一个then方法。</p>
<p><img src="/imgs/then.jpg" alt=""></p>
<h3 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h3><p id="border-blue">Promise.prototype.catch 方法是 .then(null, rejection)的别名，用于 <code>指定发生错误时的回调函数</code>。 </p>

<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">p.then(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'fulfilled:'</span>, val))</div><div class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'rejected'</span>, err));</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line">p.then(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'fulfilled:'</span>, val))</div><div class="line">  .then(<span class="literal">null</span>, (err) =&gt; <span class="built_in">console</span>.log(<span class="string">"rejected:"</span>, err));</div></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'test'</span>);</div><div class="line">&#125;);</div><div class="line">promise.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(error);</div><div class="line">&#125;);</div><div class="line"><span class="comment">/* promise抛出一个错误，就被catch方法指定的回调函数捕获。 */</span></div><div class="line"><span class="comment">// Error: test</span></div></pre></td></tr></table></figure>
<p>俩种捕捉错误的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">promise</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="comment">// success</span></div><div class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="comment">// error</span></div><div class="line">  &#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">promise</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; <span class="comment">//cb</span></div><div class="line">    <span class="comment">// success</span></div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="comment">// error</span></div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><a href="http://es6.ruanyifeng.com/#docs/promise" rel="external nofollow noopener noreferrer" target="_blank">深度阅读</a></p>
<h4 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h4><p><span id="border-blue">Promise.all用于将多个 Promise 实例，包装成一个新的 Promise 实例。</span></p>
<h4 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h4><p><span id="border-blue">有时需要将现有对象转为Promise对象，Promise.resolve 方法就起到这个作用。</span></p>
<h4 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h4><p><span id="border-blue">也会返回一个新的 Promise 实例，该实例的状态为 rejected。</span></p>
<hr>
<h2 id="Iterator-和-for…of循环"><a href="#Iterator-和-for…of循环" class="headerlink" title="Iterator 和 for…of循环"></a>Iterator 和 for…of循环</h2><h3 id="Iterator-概念"><a href="#Iterator-概念" class="headerlink" title="Iterator 概念"></a>Iterator 概念</h3><ol>
<li>ES6中有四种数据集合分别是：<strong>数组、对象(没有Iterator接口)、Map、Set</strong></li>
<li>用户如果想组合使用这些数据，就需要一种统一的接口机制，来处理所有不同的数据结构。</li>
<li>遍历器（Iterator）就是为各种不同的数据结构 <strong>提供统一的访问机制的接口</strong> 。</li>
<li>任何数据结构只要部署Iterator接口 ，就可以完成遍历操作。</li>
</ol>
<ul>
<li>Iterator的三个作用<ul>
<li>为各种数据结构，<code>提供一个统一访问接口</code> ；</li>
<li>使得数据结构的成员能够按 <code>某种次序排列</code> ；</li>
<li>Iterator接口主要 <code>配合for...of</code> 。</li>
</ul>
</li>
</ul>
<h3 id="默认的-Iterator-接口"><a href="#默认的-Iterator-接口" class="headerlink" title="默认的 Iterator 接口"></a>默认的 Iterator 接口</h3><ul>
<li>默认的Iterator接口 部署在数据结构的 <code>Symbol.iterator属性</code></li>
<li>也就是，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历的”。</li>
<li>Symbol.iterator就是 默认生成遍历器的函数,执行它就会返回一个遍历器。</li>
<li>原生具备 Iterator 接口的数据结构：Array、Map、Set、<code>String</code>、TypedArray、函数的 arguments 对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 具备原生 Iterator ：Array */</span></div><div class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line"><span class="comment">/*执行它就会返回一个遍历器,根本特征就是具有 next 方法 */</span></div><div class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</div><div class="line"></div><div class="line">iter.next() <span class="comment">// &#123; value: 'a', done: false &#125;</span></div><div class="line">iter.next() <span class="comment">// &#123; value: 'b', done: false &#125;</span></div><div class="line">iter.next() <span class="comment">// &#123; value: 'c', done: false &#125;</span></div><div class="line">iter.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure>
<p> <img src="/imgs/symbol.jpg" alt=""></p>
<h3 id="调用-Iterator-接口的场合"><a href="#调用-Iterator-接口的场合" class="headerlink" title="调用 Iterator 接口的场合"></a>调用 Iterator 接口的场合</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 1.解析赋值</div><div class="line"> */</div><div class="line"><span class="keyword">let</span> [first, ...rest] = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</div><div class="line"><span class="comment">// first='a'; rest=['b','c'];</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 2.扩展运算符</div><div class="line"> */</div><div class="line"><span class="keyword">let</span> arr = [<span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line">[<span class="string">'a'</span>, ...arr, <span class="string">'d'</span>]</div><div class="line"><span class="comment">// ['a', 'b', 'c', 'd']</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 3. yield*</div><div class="line"> * yield*后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口。</div><div class="line"> */</div><div class="line"><span class="keyword">let</span> generator = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">yield</span>* [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> iterator = generator();</div><div class="line"></div><div class="line">iterator.next() <span class="comment">// &#123; value: 1, done: false &#125;</span></div><div class="line">iterator.next() <span class="comment">// &#123; value: 2, done: false &#125;</span></div><div class="line">iterator.next() <span class="comment">// &#123; value: 3, done: false &#125;</span></div><div class="line">iterator.next() <span class="comment">// &#123; value: 4, done: false &#125;</span></div><div class="line">iterator.next() <span class="comment">// &#123; value: 5, done: false &#125;</span></div><div class="line">iterator.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure>
<h3 id="遍历器对象的-return-throw"><a href="#遍历器对象的-return-throw" class="headerlink" title="遍历器对象的 return(),throw()"></a>遍历器对象的 return(),throw()</h3><p>遍历器对象具有next、_return、_throw方法。</p>
<p>return方法的使用场合是，<code>如果for...of循环提前退出</code>（通常是因为出错，或者有break语句或continue语句），就会调用return方法。</p>
<h3 id="for…of-循环"><a href="#for…of-循环" class="headerlink" title="for…of 循环"></a>for…of 循环</h3><p>for…of循环 <code>内部调用</code> 的是数据结构的<code>Symbol.iterator方法</code>，所以只要数据结构只要部署了Symbol.iterator属性，就可以用for…of循环遍历它的成员</p>
<h3 id="与其他遍历语法比较"><a href="#与其他遍历语法比较" class="headerlink" title="与其他遍历语法比较"></a>与其他遍历语法比较</h3><ul>
<li>for循环<ul>
<li>没有 fo…of 简洁</li>
</ul>
</li>
<li>forEach<ul>
<li>无法中途跳出forEach循环，break命令或return命令都不能奏效</li>
</ul>
</li>
<li>for…in<ul>
<li>主要是为遍历对象而设计的，不适用于遍历数组</li>
</ul>
</li>
</ul>
<h2 id="Generator-函数的语法"><a href="#Generator-函数的语法" class="headerlink" title="Generator 函数的语法"></a>Generator 函数的语法</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>Generator 函数是 ES6 提供的一种 <code>异步编程解决方案</code> ，语法行为与传统函数 <code>完全不同</code> 。</p>
<ul>
<li><p>Generator 函数有多种理解角度。</p>
<ul>
<li>从语法上，首先可以把它理解成，<code>Generator 函数是一个状态机</code>，封装了多个内部状态。</li>
<li>同时执行 Generator 函数会 <code>返回一个遍历器对象</code></li>
<li>返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</li>
</ul>
</li>
<li><p>Generator 函数形式上的两个特征。</p>
<ul>
<li>function 与函数名的中间有一个星号；</li>
<li>函数体内部使用yield表达式，定义不同的内部状态（ yield 在英语里的意思就是“产出”）。</li>
</ul>
<p><img src="/imgs/Generator.jpg" alt=""></p>
</li>
</ul>
<h4 id="yield-表达式"><a href="#yield-表达式" class="headerlink" title="yield 表达式"></a>yield 表达式</h4><p id="border-blue">由于 Generator 函数返回的遍历器对象，只有调用next方法才会遍历下一个内部状态，所以其实提供了一种可以 <code>暂停执行的函数</code>,yield表达式就是暂停标志。</p>

<ul>
<li><p>遍历器对象的next方法的运行逻辑如下。</p>
<ol>
<li>遇到yield表达式，暂停并将 <code>紧跟在yield后面</code>的那个 <code>表达式的值</code> ，作为返回的对象的value属性值。</li>
<li>下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式。</li>
<li>如果没有再遇到新的yield表达式，就一直运行到return语句为止，并以对象行使返回return语句后面的表达式的值</li>
<li>如果该函数没有return语句，则返回的对象的value属性值为undefined。</li>
</ol>
</li>
<li><p>yield 于 return 的区别</p>
<ul>
<li>yield 函数暂停执行，下一次再从该位置继续向后执行，具备记忆</li>
<li>一个函数里面，只能执行一次return语句，但是可以执行多个yield表达式。</li>
<li>正常函数只能返回一个值，因为只能执行一次return；</li>
<li>函数可以返回一系列的值，因为可以有任意多个yield。</li>
</ul>
</li>
</ul>
<p>yield表达式如果用在另一个表达式之中，必须放在圆括号里面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span> + <span class="keyword">yield</span>); <span class="comment">// SyntaxError</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span> + <span class="keyword">yield</span> <span class="number">123</span>); <span class="comment">// SyntaxError</span></div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span> + (<span class="keyword">yield</span>)); <span class="comment">// OK</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span> + (<span class="keyword">yield</span> <span class="number">123</span>)); <span class="comment">// OK</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="next-方法的参数"><a href="#next-方法的参数" class="headerlink" title="next 方法的参数"></a>next 方法的参数</h3><p id="border-blue">next方法的参数 表示 <code>上一个yield表达式的返回值</code> </p>

<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 简单例子 */</span></div><div class="line">  <span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; <span class="literal">true</span>; i++) &#123;</div><div class="line">      <span class="keyword">var</span> reset = <span class="keyword">yield</span> i;</div><div class="line">      <span class="keyword">if</span>(reset) &#123; i = <span class="number">-1</span>; &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> g = f();</div><div class="line"></div><div class="line">  g.next() <span class="comment">// &#123; value: 0, done: false &#125;</span></div><div class="line">  g.next() <span class="comment">// &#123; value: 1, done: false &#125;</span></div><div class="line"></div><div class="line">  <span class="comment">/*</span></div><div class="line">  当next方法带一个参数true时，</div><div class="line">  变量reset就被重置为这个参数（即true），</div><div class="line">  因此i会等于-1，下一轮循环就会从-1开始递增。</div><div class="line">  */</div><div class="line">  g.next(<span class="literal">true</span>) <span class="comment">// &#123; value: 0, done: false &#125;</span></div><div class="line"></div><div class="line"><span class="comment">/* 再看一个通过next方法的参数，向 Generator 函数内部输入值的例子 */</span></div><div class="line">  <span class="function"><span class="keyword">function</span>* <span class="title">dataConsumer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Started'</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`1. <span class="subst">$&#123;<span class="keyword">yield</span>&#125;</span>`</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`2. <span class="subst">$&#123;<span class="keyword">yield</span>&#125;</span>`</span>);</div><div class="line">    <span class="keyword">return</span> <span class="string">'result'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> genObj = dataConsumer();</div><div class="line">  genObj.next();</div><div class="line">  <span class="comment">// Started</span></div><div class="line">  genObj.next(<span class="string">'a'</span>)</div><div class="line">  <span class="comment">// 1. a</span></div><div class="line">  genObj.next(<span class="string">'b'</span>)</div><div class="line">  <span class="comment">// 2. b</span></div></pre></td></tr></table></figure>
<h3 id="Generator-prototype-throw"><a href="#Generator-prototype-throw" class="headerlink" title="Generator.prototype.throw()"></a>Generator.prototype.throw()</h3><p id="border-blue">Generator 函数返回的遍历器对象，都有一个throw方法，可以在函数体外抛出错误，然后在 Generator 函数体内捕获。</p>

<h3 id="Generator-prototype-return"><a href="#Generator-prototype-return" class="headerlink" title="Generator.prototype.return()"></a>Generator.prototype.return()</h3><p id="border-blue">Generator函数返回的遍历器对象，还有一个return方法，可以<code>返回给定的值</code>，并且终结遍历Generator函数。</p>

<h3 id="yield-表达式-1"><a href="#yield-表达式-1" class="headerlink" title="yield* 表达式"></a>yield* 表达式</h3><p>如果在 Generator 函数内部，调用另一个 Generator 函数，默认情况下是没有效果的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'hello!'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">outer2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'open'</span></div><div class="line">  <span class="keyword">yield</span>* inner()</div><div class="line">  <span class="keyword">yield</span> <span class="string">'close'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> gen = outer2()</div><div class="line">gen.next().value <span class="comment">// "open"</span></div><div class="line">gen.next().value <span class="comment">// "hello!"</span></div><div class="line">gen.next().value <span class="comment">// "close"</span></div></pre></td></tr></table></figure>
<h3 id="作为对象属性的-Generator-函数"><a href="#作为对象属性的-Generator-函数" class="headerlink" title="作为对象属性的 Generator 函数"></a>作为对象属性的 Generator 函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* myGeneratorMethod属性前面有一个星号，表示这个属性是一个 Generator 函数。 */</span></div><div class="line">  <span class="keyword">let</span> obj = &#123;</div><div class="line">    * myGeneratorMethod() &#123;</div><div class="line">      <span class="comment">// ···</span></div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line"><span class="comment">/* 与上面的写法是等价的 */</span></div><div class="line">  <span class="keyword">let</span> obj = &#123;</div><div class="line">    <span class="attr">myGeneratorMethod</span>: <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="comment">// ···</span></div><div class="line">    &#125;</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
<h3 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>异步操作的同步化表达</li>
<li>控制流管理</li>
<li>部署 Iterator 接口</li>
<li>作为数据结构</li>
</ul>
<hr>
<h2 id="Generator-函数的异步应用"><a href="#Generator-函数的异步应用" class="headerlink" title="Generator 函数的异步应用"></a>Generator 函数的异步应用</h2><p id="border-blue">异步编程对 JavaScript 语言太重要,因为 Javascript 语言的执行环境是 “单线程”的.<br></p>

<p><a href="http://es6.ruanyifeng.com/#docs/generator-async" rel="external nofollow noopener noreferrer" target="_blank">详细阅读</a></p>
<p><strong>async 函数</strong></p>
<p> 一句话，它就是 Generator 函数的语法糖</p>
<p><a href="http://es6.ruanyifeng.com/#docs/async" rel="external nofollow noopener noreferrer" target="_blank">详细阅读</a></p>
<hr>
<h2 id="Class-的基本语法"><a href="#Class-的基本语法" class="headerlink" title="Class 的基本语法"></a>Class 的基本语法</h2><p>ES6 的class写法只是让对象原型的 <code>写法更加清晰</code> 、<code>更接近主流面向对象编程</code> 的语法而已。<br><img src="/imgs/es6_1.jpg" alt=""></p>
<p><a href="http://es6.ruanyifeng.com/#docs/class" rel="external nofollow noopener noreferrer" target="_blank">深度阅读</a></p>
<p><a href="http://es6.ruanyifeng.com/#docs/class-extends" rel="external nofollow noopener noreferrer" target="_blank">Class的继承</a></p>
<hr>
<h2 id="Module-的语法"><a href="#Module-的语法" class="headerlink" title="Module 的语法"></a>Module 的语法</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul>
<li>历史上，JavaScript 一直没有模块体系，直接导致了对开发大型的、复杂的项目造成了巨大障碍。</li>
<li>ES6 实现了 <code>模块功能</code> ，而且实现得 <code>相当简单</code> ，完全可以取代其他规范。</li>
</ul>
<p id="border-blue">ES6 模块的设计思想<code>是尽量的静态化</code>，使得 <code>编译时</code> 就能 <code>确定</code> 模块的 <code>依赖关系</code> ，以及输入和输出的变量。</p>

<p><strong>CommonJS 与 ES6 模块的区别</strong></p>
<p><img src="/imgs/Module.jpg" alt=""></p>
<hr>
<h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p id="border-yellow">ES6 的模块自动采用严格模式，不管你有没有在模块头部加上 <code>&quot;use strict&quot;</code></p>

<ul>
<li>严格模式主要有以下限制<ul>
<li>变量必须声明后再使用</li>
<li>函数的参数不能有同名属性，否则报错</li>
<li>不能使用 <code>with</code> 语句</li>
<li>不能对只读属性赋值，否则报错</li>
<li>不能使用前缀0表示八进制数，否则报错</li>
<li>不能删除不可删除的属性，否则报错</li>
<li>不能删除变量 <code>delete prop</code>，会报错，只能删除属性 <code>delete global[prop]</code></li>
<li><code>eval</code> 不会在它的外层作用域引入变量</li>
<li><code>eval</code> 和 <code>arguments</code> 不能被重新赋值</li>
<li>arguments不会自动反映函数参数的变化</li>
<li>不能使用 <code>arguments.callee</code></li>
<li>不能使用 <code>arguments.caller</code></li>
<li>禁止 <code>this</code> 指向全局对象</li>
<li>不能使用 <code>fn.caller</code> 和 <code>fn.arguments</code> 获取函数调用的堆栈</li>
<li>增加了保留字（比如 <code>protected</code> 、<code>static</code> 和 <code>interface</code> ）</li>
</ul>
</li>
</ul>
<hr>
<h3 id="export-命令"><a href="#export-命令" class="headerlink" title="export 命令"></a>export 命令</h3><p id="border-blue">模块功能主要由两个命令构成：<code>export</code> 命令用于 <code>规定</code> 模块的 <code>对外接口</code> ，<code>import</code> 命令用于 <code>输入其他模块提供的功能</code>。</p>

<h4 id="输出变量"><a href="#输出变量" class="headerlink" title="输出变量"></a>输出变量</h4><ul>
<li>一个模块就是一个独立的文件，其内部所有变量 <code>外部无法获取</code>。</li>
<li>如果希望外部能够读取模块内部的某个变量，就必须使用 <code>export输出该变量</code>。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// profile.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</div><div class="line"></div><div class="line"><span class="comment">/* 上下写法等同 */</span></div><div class="line"></div><div class="line"><span class="comment">// profile.js</span></div><div class="line"><span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</div><div class="line"><span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</div><div class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123;firstName, lastName, year&#125;;</div></pre></td></tr></table></figure>
<h4 id="输出函数或类"><a href="#输出函数或类" class="headerlink" title="输出函数或类"></a>输出函数或类</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x * y;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 输出 multiply 函数</span></div></pre></td></tr></table></figure>
<h4 id="使用as关键字重命名"><a href="#使用as关键字重命名" class="headerlink" title="使用as关键字重命名"></a>使用as关键字重命名</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">v1</span>(<span class="params"></span>) </span>&#123; ... &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">v2</span>(<span class="params"></span>) </span>&#123; ... &#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123;</div><div class="line">  v1 <span class="keyword">as</span> streamV1,</div><div class="line">  v2 <span class="keyword">as</span> streamV2,</div><div class="line">  v2 <span class="keyword">as</span> streamLatestVersion</div><div class="line">&#125;;</div><div class="line"><span class="comment">/* 使用as关键字，重命名了函数v1和v2的对外接口。重命名后，v2可以用不同的名字输出两次。*/</span></div></pre></td></tr></table></figure>
<h4 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h4><p id="border-yellow"><code>export</code> 规定是: <code>对外的接口</code> 与 <code>模块内部的变量</code> 建立一一 <code>对应关系</code> 。</p>

<p><img src="/imgs/lookOut.jpg" alt=""></p>
<hr>
<h3 id="import-命令"><a href="#import-命令" class="headerlink" title="import 命令"></a>import 命令</h3><p id="border-blue">使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。</p>

<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 1.import命令，用于加载profile.js文件，并从中输入变量。</div><div class="line"> * 2.import命令接受一对大括号，里面指定要从其他模块导入的变量名。</div><div class="line"> * 3.大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。</div><div class="line"> */</div><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="keyword">import</span> &#123;firstName, lastName, year&#125; <span class="keyword">from</span> <span class="string">'./profile'</span>;</div><div class="line"></div><div class="line"><span class="comment">/* import命令要使用 as 关键字，将输入的变量重命名。*/</span></div><div class="line"><span class="comment">// import &#123; lastName as surname &#125; from './profile';</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">  element.textContent = firstName + <span class="string">' '</span> + lastName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>知识点<ul>
<li>from指定模块文件的位置时可以是相对或绝对路径，.js可以省略</li>
<li>如果只是模块名，不带有路径，那么必须有配置文件，告诉 JS 引擎该模块的位置。</li>
<li>import命令具有提升效果，会提升到整个模块的头部，首先执行。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="模块的整体加载"><a href="#模块的整体加载" class="headerlink" title="模块的整体加载"></a>模块的整体加载</h3><p>整体加载：即用星号（*）<code>指定一个对象</code>，所有输出值都加载在这个对象上面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/* 模块的整体加载 */</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">'./circle'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'圆面积：'</span> + circle.area(<span class="number">4</span>));</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'圆周长：'</span> + circle.circumference(<span class="number">14</span>));</div><div class="line"></div><div class="line"><span class="comment">/* 上下同等 */</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; area, circumference &#125; <span class="keyword">from</span> <span class="string">'./circle'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'圆面积：'</span> + area(<span class="number">4</span>));</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'圆周长：'</span> + circumference(<span class="number">14</span>));</div></pre></td></tr></table></figure>
<h3 id="export-default-命令"><a href="#export-default-命令" class="headerlink" title="export default 命令"></a>export default 命令</h3><h4 id="为模块指定默认输出"><a href="#为模块指定默认输出" class="headerlink" title="为模块指定默认输出"></a>为模块指定默认输出</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// export-default.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 模块文件export-default.js，它的默认输出是一个函数,</div><div class="line"> * 其他模块加载该模块时，import命令可以为该匿名函数指定任意名字，不需要大括号包裹</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// import-default.js</span></div><div class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">'./export-default'</span>;</div><div class="line">customName(); <span class="comment">// 'foo'</span></div></pre></td></tr></table></figure>
<h4 id="比较默认输出和正常输出"><a href="#比较默认输出和正常输出" class="headerlink" title="比较默认输出和正常输出"></a>比较默认输出和正常输出</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 第一组</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">crc32</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 输出</span></div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">import</span> crc32 <span class="keyword">from</span> <span class="string">'crc32'</span>; <span class="comment">// 输入</span></div><div class="line"></div><div class="line"><span class="comment">/********************************************/</span></div><div class="line"></div><div class="line"><span class="comment">// 第二组</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">crc32</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 输出</span></div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;crc32&#125; <span class="keyword">from</span> <span class="string">'crc32'</span>; <span class="comment">// 输入</span></div></pre></td></tr></table></figure>
<p>本质上，export default就是输出一个叫做default的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// modules.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x * y;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> &#123;add <span class="keyword">as</span> <span class="keyword">default</span>&#125;;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="comment">// export default add;</span></div><div class="line"></div><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> xxx &#125; <span class="keyword">from</span> <span class="string">'modules'</span>;</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="comment">// import xxx from 'modules';</span></div></pre></td></tr></table></figure>
<p>有了export default命令，输入模块时就非常直观了，以输入 lodash 模块为例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/* 将默认方法 赋值到 _*/</span></div><div class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span>;</div><div class="line"></div><div class="line"><span class="comment">/* 同时输入默认方法和其他接口 */</span></div><div class="line"><span class="keyword">import</span> _, &#123; each, each <span class="keyword">as</span> forEach &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 对应上面代码的export语句如下。</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="comment">// ···</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">obj, iterator, context</span>) </span>&#123;</div><div class="line">  <span class="comment">// ···</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; each <span class="keyword">as</span> forEach &#125;; <span class="comment">// 暴露出forEach接口，默认指向each接口，即forEach和each指向同一个方法。</span></div></pre></td></tr></table></figure>
<h3 id="export-与-import-的复合写法"><a href="#export-与-import-的复合写法" class="headerlink" title="export 与 import 的复合写法"></a>export 与 import 的复合写法</h3><p id="border-pruple">如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起。</p>

<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/****************************************/</span></div><div class="line"><span class="comment">// export和import语句可以结合在一起</span></div><div class="line"><span class="keyword">export</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">import</span> &#123; foo, bar &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</div><div class="line"><span class="keyword">export</span> &#123; foo, bar &#125;;</div><div class="line"></div><div class="line"><span class="comment">/****************************************/</span></div><div class="line"></div><div class="line"><span class="comment">// 接口改名</span></div><div class="line"><span class="keyword">export</span> &#123; foo <span class="keyword">as</span> myFoo &#125; <span class="keyword">from</span> <span class="string">'my_module'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 整体输出</span></div><div class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'my_module'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 默认接口的写法</span></div><div class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</div><div class="line"></div><div class="line"><span class="comment">/****************************************/</span></div><div class="line"><span class="comment">// 具名接口改为默认接口的写法</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; es6 <span class="keyword">as</span> <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">'./someModule'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./someModule'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</div><div class="line"><span class="comment">/****************************************/</span></div><div class="line"><span class="comment">// 默认接口也可以改名为具名接口</span></div><div class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> es6 &#125; <span class="keyword">from</span> <span class="string">'./someModule'</span>;</div></pre></td></tr></table></figure>
<hr>
<h3 id="模块的继承"><a href="#模块的继承" class="headerlink" title="模块的继承"></a>模块的继承</h3><p>假设有一个circleplus模块，继承了circle模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// circleplus.js 输出文件</span></div><div class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'circle'</span>;       <span class="comment">// 表示再输出circle模块的所有属性和方法</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> e = <span class="number">2.71828182846</span>; <span class="comment">// 又输出了自定义的e变量和默认方法。</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;  <span class="comment">// 输出默认方法</span></div><div class="line">  <span class="keyword">return</span> <span class="string">'test'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> &#123; area <span class="keyword">as</span> circleArea &#125; <span class="keyword">from</span> <span class="string">'circle'</span>; <span class="comment">// 只输出circle模块的area方法，且将其改名为circleArea。</span></div><div class="line"></div><div class="line"><span class="comment">//main.js 输入文件</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">'circleplus'</span>; <span class="comment">// 加载 circleplus 上所有方法</span></div><div class="line"><span class="keyword">import</span> aaa <span class="keyword">from</span> <span class="string">'circleplus'</span>;       <span class="comment">// 将circleplus的默认方法命名为 aaa</span></div><div class="line"><span class="built_in">console</span>.log(aaa());                 <span class="comment">// test</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="跨模块常量"><a href="#跨模块常量" class="headerlink" title="跨模块常量"></a>跨模块常量</h3><p>设置跨模块的常量，或者说一个值要被多个模块共享，可以采用下面的写法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// constants.js 模块</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> A = <span class="number">1</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> B = <span class="number">3</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> C = <span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="comment">// test1.js 模块</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">'./constants'</span>;</div><div class="line"><span class="built_in">console</span>.log(constants.A); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(constants.B); <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="comment">// test2.js 模块</span></div><div class="line"><span class="keyword">import</span> &#123;A, B&#125; <span class="keyword">from</span> <span class="string">'./constants'</span>;</div><div class="line"><span class="built_in">console</span>.log(A); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(B); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>如果要使用的常量非常多，可以建一个专门的constants目录，将各种常量写在不同的文件里面，保存在该目录下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// constants/db.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> db = &#123;</div><div class="line">  <span class="attr">url</span>: <span class="string">'http://my.couchdbserver.local:5984'</span>,</div><div class="line">  <span class="attr">admin_username</span>: <span class="string">'admin'</span>,</div><div class="line">  <span class="attr">admin_password</span>: <span class="string">'admin password'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// constants/user.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> users = [<span class="string">'root'</span>, <span class="string">'admin'</span>, <span class="string">'staff'</span>, <span class="string">'ceo'</span>];</div><div class="line"></div><div class="line"><span class="comment">/******************************************************/</span></div><div class="line"><span class="comment">// constants/index.js</span></div><div class="line"><span class="keyword">export</span> &#123;db&#125; <span class="keyword">from</span> <span class="string">'./db'</span>;</div><div class="line"><span class="keyword">export</span> &#123;users&#125; <span class="keyword">from</span> <span class="string">'./users'</span>;</div><div class="line"></div><div class="line"><span class="comment">/******************************************************/</span></div><div class="line"><span class="comment">// 使用的时候，直接加载 出入该模块，会自动加载其中的 index.js 文件</span></div><div class="line"></div><div class="line"><span class="comment">// script.js</span></div><div class="line"><span class="keyword">import</span> &#123;db, users&#125; <span class="keyword">from</span> <span class="string">'./constants'</span>;</div></pre></td></tr></table></figure>
<hr>
<h3 id="import"><a href="#import" class="headerlink" title="import()"></a>import()</h3><ul>
<li>只是有一个 <span id="inline-yellow">提案</span>，建议引入import()函数，完成动态加载。</li>
<li>import()类似于 Node 的require方法，区别主要是前者是异步加载，后者是同步加载。</li>
<li>适用场合<ul>
<li>按需加载</li>
<li>条件加载</li>
<li>动态的模块路径</li>
</ul>
</li>
</ul>
<hr>
<h2 id="Module-的加载实现"><a href="#Module-的加载实现" class="headerlink" title="Module 的加载实现"></a>Module 的加载实现</h2><h3 id="浏览器加载"><a href="#浏览器加载" class="headerlink" title="浏览器加载"></a>浏览器加载</h3><p><strong>传统方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;!-- 页面内嵌的脚本 --&gt;</div><div class="line">&lt;script type=&quot;application/javascript&quot;&gt;</div><div class="line">  // module code</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;!-- 外部脚本 --&gt;</div><div class="line">&lt;script type=&quot;application/javascript&quot; src=&quot;path/to/myModule.js&quot;&gt;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;!-- 异步加载的俩种方式 --&gt;</div><div class="line">&lt;script src=&quot;path/to/myModule.js&quot; defer&gt;&lt;/script&gt; // 等到整个页面正常渲染结束，才会执行</div><div class="line">&lt;script src=&quot;path/to/myModule.js&quot; async&gt;&lt;/script&gt; // 一旦下载完成，立马执行</div></pre></td></tr></table></figure>
<p><strong>加载规则</strong></p>
<p>浏览器加载 ES6 模块，也使用 <code>&lt;script&gt;</code> 标签，但是要加入 <code>type=&quot;module&quot;</code> 属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;script type=&quot;module&quot; src=&quot;foo.js&quot;&gt;&lt;/script&gt;</div><div class="line">浏览器对于带有type=&quot;module&quot; 都是执行 defer属性的异步加载</div></pre></td></tr></table></figure>
<p><a href="http://es6.ruanyifeng.com/#docs/module-loader#浏览器加载" rel="external nofollow noopener noreferrer" target="_blank">与Node相关的ES6</a></p>
<hr>
<h2 id="编程风格"><a href="#编程风格" class="headerlink" title="编程风格"></a>编程风格</h2><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><ul>
<li><code>let</code> 完全取代var</li>
<li>let 和 const 之间，优先使用 <code>const</code></li>
</ul>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>静态字符串一律使用 <code>单引号或反引号</code>，不使用双引号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> a = <span class="string">"foobar"</span>;</div><div class="line"><span class="keyword">const</span> b = <span class="string">'foo'</span> + a + <span class="string">'bar'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> a = <span class="string">'foobar'</span>;</div><div class="line"><span class="keyword">const</span> b = <span class="string">`foo<span class="subst">$&#123;a&#125;</span>bar`</span>;</div><div class="line"><span class="keyword">const</span> c = <span class="string">'foobar'</span>;</div></pre></td></tr></table></figure>
<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</div><div class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> [first, second] = arr;</div></pre></td></tr></table></figure>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><ul>
<li>单行定义的对象，最后一个成员 <code>不以逗号结尾</code>。</li>
<li>多行定义的对象，最后一个成员 <code>以逗号结尾</code>。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> a = &#123; <span class="attr">k1</span>: v1, <span class="attr">k2</span>: v2, &#125;;</div><div class="line"><span class="keyword">const</span> b = &#123;</div><div class="line">  <span class="attr">k1</span>: v1,</div><div class="line">  <span class="attr">k2</span>: v2</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> a = &#123; <span class="attr">k1</span>: v1, <span class="attr">k2</span>: v2 &#125;;</div><div class="line"><span class="keyword">const</span> b = &#123;</div><div class="line">  <span class="attr">k1</span>: v1,</div><div class="line">  <span class="attr">k2</span>: v2,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>使用扩展运算符 (…) 拷贝数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> len = items.length;</div><div class="line"><span class="keyword">const</span> itemsCopy = [];</div><div class="line"><span class="keyword">let</span> i;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">  itemsCopy[i] = items[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> itemsCopy = [...items];</div></pre></td></tr></table></figure>
<p>使用Array.from方法，将伪数组转为真数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.foo'</span>);</div><div class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</div></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 立即执行函数可以写成箭头函数的形式。</div><div class="line"> */</div><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet.'</span>);</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 需要使用函数表达式的场合，尽量用箭头函数代替</div><div class="line"> */</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 或者</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">a, b, &#123; option = false &#125; = &#123;&#125;</span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用rest运算符（...）代替 arguments</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params">...args</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置形参默认值。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Map-结构"><a href="#Map-结构" class="headerlink" title="Map 结构"></a>Map 结构</h3><ul>
<li><strong>注意区分 Object 和 Map</strong>。</li>
<li>如果只是需要key: value的数据结构，使用Map结构。</li>
</ul>
<h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><p>用Class 取代需要 prototype 的操作，因为Class的写法更简洁，更易于理解。</p>
<p><img src="/imgs/es6_1.jpg" alt=""></p>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul>
<li><p>Module 语法是 JS 模块的 标准写法 ，坚持使用这种写法。</p>
<ul>
<li>使用 <code>import</code> 取代 require。</li>
<li>使用 <code>export</code> 取代 module.exports。</li>
</ul>
</li>
<li><p>注意事项</p>
<ul>
<li>如果模块只有一个输出值，才使用export default。</li>
<li>在模块输入中使用通配符，就无法确保有一个默认输出值</li>
<li>模块默认输出一个函数，<code>函数名首字母小写</code>。</li>
<li>模块默认输出一个对象，<code>对象名首字母大写</code>。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对阮一峰的ES6的内容进行的 &lt;code&gt;提炼&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对其中的内容进行了 &lt;code&gt;简化&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对一些我个人认为较复杂且不常用的功能或概念 &lt;code&gt;采取忽略&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对ES6 &lt;code&gt;不熟悉&lt;/code&gt; 的同学 可能会有一点帮助&lt;/li&gt;
&lt;li&gt;如笔记整理有错误还请留言 &lt;a href=&quot;https://github.com/jianxiaoBai/jianxiaobai.github.io/issues&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;指出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;深度阅读请访问 &lt;a href=&quot;http://es6.ruanyifeng.com&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;http://es6.ruanyifeng.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="http://www.baixiaojian.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ES6" scheme="http://www.baixiaojian.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Flex</title>
    <link href="http://www.baixiaojian.com/flex/"/>
    <id>http://www.baixiaojian.com/flex/</id>
    <published>2017-05-30T07:58:06.000Z</published>
    <updated>2017-07-09T08:39:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Flex-布局是什么"><a href="#Flex-布局是什么" class="headerlink" title="Flex 布局是什么"></a>Flex 布局是什么</h3><blockquote>
<p>Flex 是 Flexble Box 的缩写，意为 “弹性布局”，用来为盒状提供最大的灵活性。</p>
</blockquote>
<p><strong>任何一个容器都可以指定为 Flex 布局</strong></p>
<p><em>注意，设为 Flex 布局以后，子元素 的loadt、cleat和vertical-align 将失去作用</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">    .box&#123;</div><div class="line">      display: flex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .box&#123;</div><div class="line">    /* 行内元素也可以使用 Flex 布局。 */</div><div class="line">      display: inline-flex;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>#</p>
<p><strong>flex-flow</strong>简写：这是flex-direction和flex-wrap两个属性的缩写,默认值是row nowrap。</p>
<h3 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h3><p><strong>主轴方向：flex-direction:</strong></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>属性作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>row（默认）；</td>
<td>从左到右</td>
</tr>
<tr>
<td>row-reverse；</td>
<td>从右到左</td>
</tr>
<tr>
<td>column；</td>
<td>从上到下</td>
</tr>
<tr>
<td>column-reverse；</td>
<td>从下到上</td>
</tr>
</tbody>
</table>
<p><strong>flex-wrap：是否换行</strong></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>属性作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>nowrap（默认）；</td>
<td>不换行</td>
</tr>
<tr>
<td>wrap；</td>
<td>正常换行</td>
</tr>
<tr>
<td>wrap-reverse；</td>
<td>返向换行</td>
</tr>
</tbody>
</table>
<p><strong>justify-content：设伸缩项目在相对 <code>主轴</code> 水平上的对齐方式</strong></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>属性作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>flex-start（默认）：</td>
<td>左对齐</td>
</tr>
<tr>
<td>flex-end：</td>
<td>右对齐</td>
</tr>
<tr>
<td>center：</td>
<td>居中</td>
</tr>
<tr>
<td>space-between：</td>
<td>首尾对齐，项目之间的间隔相等。</td>
</tr>
<tr>
<td>space-around：</td>
<td>每个项目两侧的间隔相等。</td>
</tr>
</tbody>
</table>
<p><strong>align-content:设伸缩项目在相对  <code>主轴</code> 水垂直的对齐方式</strong></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>属性作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>flex-start：</td>
<td>上对齐</td>
</tr>
<tr>
<td>flex-end：</td>
<td>下对齐</td>
</tr>
<tr>
<td>center：</td>
<td>居中</td>
</tr>
<tr>
<td>space-between：</td>
<td>首尾对齐，项目之间的间隔相等。</td>
</tr>
<tr>
<td>space-around：</td>
<td>每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</td>
</tr>
<tr>
<td>stretch（默认）：</td>
<td>每个项目两侧的间隔相等。</td>
</tr>
</tbody>
</table>
<p><strong>align-items：管理伸缩容<code>器侧轴方向</code>的额外空间</strong></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>属性作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>flex-start（默认）：</td>
<td>左对齐</td>
</tr>
<tr>
<td>flex-end：</td>
<td>右对齐</td>
</tr>
<tr>
<td>center：</td>
<td>居中</td>
</tr>
<tr>
<td>baseline:</td>
<td>项目的第一行文字的基线对齐。</td>
</tr>
<tr>
<td>stretch（默认）：</td>
<td>如果项目未设置高度或设为auto，将占满整个容器的高度。</td>
</tr>
</tbody>
</table>
<p>#</p>
<h3 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h3><table>
<thead>
<tr>
<th>属性作用</th>
<th>属性值说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>order</td>
<td>数值越小，排列越靠前，默认为0。</td>
</tr>
<tr>
<td>flex-grow</td>
<td>定义一个Flex项目的扩大比例，默认为0</td>
</tr>
<tr>
<td>flex-shrink</td>
<td>定义一个Flex项目的缩小比例，默认为0</td>
</tr>
<tr>
<td>flex-basis</td>
<td>定义了Flex项目在分配Flex容器剩余空间之前的一个默认尺寸，类似width</td>
</tr>
</tbody>
</table>
<p><strong>align-self：管理伸缩容<code>器侧轴方向</code>的额外空间</strong></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>属性作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>auto</td>
<td>自动</td>
</tr>
<tr>
<td>flex-start（默认）：</td>
<td>左对齐</td>
</tr>
<tr>
<td>flex-end：</td>
<td>右对齐</td>
</tr>
<tr>
<td>center：</td>
<td>居中</td>
</tr>
<tr>
<td>baseline:</td>
<td>项目的第一行文字的基线对齐。</td>
</tr>
<tr>
<td>stretch（默认）：</td>
<td>如果项目未设置高度或设为auto，将占满整个容器的高度。</td>
</tr>
</tbody>
</table>
<p><strong>简写：flex</strong></p>
<p>　　flex是flex-grow，flex-shrink，flex-basis三个属性的缩写。第二个和第三个参数是可选值。默认值是0 1 auto。</p>
<p>　　<code>建议使用缩写属性。如果flex取值为none，等于0 0 auto。</code></p>
<p> <a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" rel="external nofollow noopener noreferrer" target="_blank">参考一</a><br> <a href="http://www.cnblogs.com/fxycm/p/4649648.html" rel="external nofollow noopener noreferrer" target="_blank">参考二</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Flex-布局是什么&quot;&gt;&lt;a href=&quot;#Flex-布局是什么&quot; class=&quot;headerlink&quot; title=&quot;Flex 布局是什么&quot;&gt;&lt;/a&gt;Flex 布局是什么&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Flex 是 Flexble Box 的缩写，意为 “弹性布局”，用来为盒状提供最大的灵活性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;任何一个容器都可以指定为 Flex 布局&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意，设为 Flex 布局以后，子元素 的loadt、cleat和vertical-align 将失去作用&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .box&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      display: flex;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .box&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    /* 行内元素也可以使用 Flex 布局。 */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      display: inline-flex;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="flex" scheme="http://www.baixiaojian.com/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>node 笔记</title>
    <link href="http://www.baixiaojian.com/node%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.baixiaojian.com/node笔记/</id>
    <published>2017-05-02T13:57:04.000Z</published>
    <updated>2017-11-13T03:02:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Node-js-开发环境"><a href="#Node-js-开发环境" class="headerlink" title="Node.js 开发环境"></a>Node.js 开发环境</h2><p>检查 <code>~/.profile</code> 或者 <code>~/.bash_profile</code> 中有没有这样两句</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">export NVM_DIR="/Users/YOURUSERNAME/.nvm"</div><div class="line">[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh"  # This loads nvm</div></pre></td></tr></table></figure>
<hr>
<h2 id="1-一个最简单的-express-应用"><a href="#1-一个最简单的-express-应用" class="headerlink" title="1. 一个最简单的 express 应用"></a>1. 一个最简单的 express 应用</h2><ul>
<li>express 是 Node.js 应用最广泛的 web 框架</li>
<li>express <a href="http://expressjs.com/" rel="external nofollow noopener noreferrer" target="_blank">官网</a> ，我常常上去看它的 API</li>
</ul>
<blockquote>
<p>需求: 当访问 <code>http://localhost:3000/</code> 时，输出 <code>你好，世界</code><br>要点: 新建 express 实例并定义 routes 从而产生输出</p>
</blockquote>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 引入 `express` 模块</span></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="comment">// 调用 express 实例，不带参数调用时，会返回一个 express 实例</span></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">// app 本身有很多方法，其中包括最常用的 get、post、put/patch、delete，在这里我们调用其中的 get 方法，为我们的 `/` 路径指定一个 handler 函数。</span></div><div class="line"><span class="comment">// 这个 handler 函数会接收 req 和 res 两个对象，他们分别是请求的 request 和 response 。</span></div><div class="line"><span class="comment">// request 中包含了浏览器传来的各种信息，比如 query 啊，body 啊，headers 啊之类的，都可以通过 req 对象访问到。</span></div><div class="line"><span class="comment">// res 对象，我们一般不从里面取信息，而是通过它来定制我们向浏览器输出的信息，比如 header 信息，比如想要向浏览器输出的内容。这里我们调用了它的 #send 方法，向浏览器输出一个字符串。</span></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(<span class="string">'Hello World'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 定义好我们 app 的行为之后，让它监听本地的 3000 端口。这里的第二个函数是个回调函数，会在 listen 动作成功后执行，我们这里执行了一个命令行输出操作，告诉我们监听动作已完成。</span></div><div class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'app is listening at port 3000'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>问:node代码监听了3000端口，然后通过访问 <code>http://localhost:3000/</code> 得到了内容，为什么呢？</p>
<h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><p>端口的作用：通过 <code>端口区分</code> 电脑内不同应用或者进程，从而实现一条 <code>物理网线</code> 同时 <code>链接多个程序</code></p>
<p><code>app.listen(3000)</code>，进程就被 <code>打标</code> ，当电脑接收到的3000端口的网络消息时就会启动对应打标的进程</p>
<h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p><code>RFC1738</code> 定义的url格式笼统版本<code>&lt;scheme&gt;:&lt;scheme-specific-part&gt;</code>，<br>scheme有我们很熟悉的<code>http</code>、<code>https</code>、<code>ftp</code>，以及著名的<code>ed2k</code>，<code>thunder</code>。</p>
<p>精简版<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/&lt;url-path&gt;</div></pre></td></tr></table></figure></p>
<p>scheme=http, host=localhost, port=3000, url-path=/, 再联想对照一下浏览器端<code>window.location</code>对象。<br>著名的<code>localhost</code>，你可以在电脑的hosts文件上找到</p>
<hr>
<h2 id="2-学习使用外部模块"><a href="#2-学习使用外部模块" class="headerlink" title="2. 学习使用外部模块"></a>2. 学习使用外部模块</h2><blockquote>
<p>需求: 访问 <code>http://localhost:3000/?q=alsotang</code> 时，输出 <code>alsotang</code> 的 sha1 值，即 <code>e3c766d71667567e18f77869c65cd62f6a1b9ab9</code><br>要点: 掌握 req.query 的用法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 引入依赖</span></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> utility = <span class="built_in">require</span>(<span class="string">'utility'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 建立 express 实例</span></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="comment">// 从 req.query 中取出我们的 q 参数。</span></div><div class="line">  <span class="comment">// 如果是 post 传来的 body 数据，则是在 req.body 里面，不过 express 默认不处理 body 中的信息，需要引入 https://github.com/expressjs/body-parser 这个中间件才会处理，这个后面会讲到。</span></div><div class="line">  <span class="comment">// 如果分不清什么是 query，什么是 body 的话，那就需要补一下 http 的知识了</span></div><div class="line">  <span class="keyword">var</span> q = req.query.q;</div><div class="line"></div><div class="line">  <span class="comment">// 调用 utility.md5 方法，得到 md5 之后的值</span></div><div class="line">  <span class="comment">// 之所以使用 utility 这个库来生成 md5 值，其实只是习惯问题。每个人都有自己习惯的技术堆栈，</span></div><div class="line">  <span class="comment">// 我刚入职阿里的时候跟着苏千和朴灵混，所以也混到了不少他们的技术堆栈，仅此而已。</span></div><div class="line">  <span class="comment">// utility 的 github 地址：https://github.com/node-modules/utility</span></div><div class="line">  <span class="comment">// 里面定义了很多常用且比较杂的辅助方法，可以去看看</span></div><div class="line">  <span class="keyword">var</span> md5Value = utility.md5(q);</div><div class="line"></div><div class="line">  res.send(md5Value);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'app is running at port 3000'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="3-使用-superagent-与-cheerio-完成简单爬虫"><a href="#3-使用-superagent-与-cheerio-完成简单爬虫" class="headerlink" title="3. 使用 superagent 与 cheerio 完成简单爬虫"></a>3. 使用 <code>superagent</code> 与 <code>cheerio</code> 完成简单爬虫</h2><blockquote>
<p>需求: 访问 <a href="http://localhost:3000/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3000/</a> 时，以 json 形式输出包括主题的作者</p>
</blockquote>
<p>例如:<br><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"【公告】发招聘帖的同学留意一下这里"</span>,</div><div class="line">    <span class="attr">"href"</span>: <span class="string">"http://cnodejs.org/topic/541ed2d05e28155f24676a12"</span>,</div><div class="line">    <span class="attr">"author"</span>: <span class="string">"alsotang"</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"发布一款 Sublime Text 下的 JavaScript 语法高亮插件"</span>,</div><div class="line">    <span class="attr">"href"</span>: <span class="string">"http://cnodejs.org/topic/54207e2efffeb6de3d61f68f"</span>,</div><div class="line">    <span class="attr">"author"</span>: <span class="string">"otheruser"</span></div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<blockquote>
<p>要点: 使用 superagent 抓取网页 、使用 cheerio 分析网页</p>
</blockquote>
<ul>
<li><a href="http://visionmedia.github.io/superagent/" rel="external nofollow noopener noreferrer" target="_blank">superagent</a> 是 http 的一个库，可以发送 get/post 请求</li>
<li><a href="https://github.com/cheeriojs/cheerio" rel="external nofollow noopener noreferrer" target="_blank">cheerio</a> 就是 Node.js 中的 jquery</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="comment">// 用 superagent 去抓取 https://cnodejs.org/ 的内容</span></div><div class="line">  superagent.get(<span class="string">'https://cnodejs.org/'</span>)</div><div class="line">    .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, sres</span>) </span>&#123;</div><div class="line">      <span class="comment">// 常规的错误处理</span></div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="keyword">return</span> next(err);</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// sres.text 里面存储着网页的 html 内容，将它传给 cheerio.load 之后</span></div><div class="line">      <span class="comment">// 就可以得到一个实现了 jquery 接口的变量，我们习惯性地将它命名为 `$`</span></div><div class="line">      <span class="comment">// 剩下就都是 jquery 的内容了</span></div><div class="line">      <span class="keyword">var</span> $ = cheerio.load(sres.text);</div><div class="line">      <span class="keyword">var</span> items = [];</div><div class="line">      $(<span class="string">'#topic_list .topic_title'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">idx, element</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> $element = $(element);</div><div class="line">        items.push(&#123;</div><div class="line">          <span class="attr">title</span>: $element.attr(<span class="string">'title'</span>),</div><div class="line">          <span class="attr">href</span>: $element.attr(<span class="string">'href'</span>)</div><div class="line">        &#125;);</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      res.send(items);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="4-使用-eventproxy-控制并发"><a href="#4-使用-eventproxy-控制并发" class="headerlink" title="4. 使用 eventproxy 控制并发"></a>4. 使用 eventproxy 控制并发</h2><blockquote>
<p>需求: 以上文目标为基础，输出 comment1 的作者，以及他在 cnode 社区的积分值<br>要点: 体会 Node.js 的 回调地狱 之美 、使用 <code>eventproxy</code> 这一利器控制并发</p>
</blockquote>
<p>注意: cnodejs.org 网站有 <code>并发连接数</code> 的限制，当请求发送太快时会导致返回值为空或报错</p>
<ol>
<li>抓取所有的 a 链接</li>
<li>访问 a 链接并收集所需数据</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> eventproxy = <span class="built_in">require</span>(<span class="string">'eventproxy'</span>);</div><div class="line"><span class="keyword">var</span> superagent = <span class="built_in">require</span>(<span class="string">'superagent'</span>);</div><div class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> cnodeUrl = <span class="string">'https://cnodejs.org/'</span>;</div><div class="line"></div><div class="line">superagent.get(cnodeUrl)</div><div class="line">  <span class="comment">// 请求结束后</span></div><div class="line">  .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</div><div class="line">    <span class="comment">// error 处理</span></div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 初始化储存 a 链接的数组</span></div><div class="line">    <span class="keyword">var</span> topicUrls = [];</div><div class="line">    <span class="comment">// 成功返回信息 $ 化</span></div><div class="line">    <span class="keyword">var</span> $ = cheerio.load(res.text);</div><div class="line">    <span class="comment">// 处理信息中的 href 字段并放入数组中</span></div><div class="line">    $(<span class="string">'#topic_list .topic_title'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">idx, element</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> $element = $(element);</div><div class="line">      <span class="keyword">var</span> href = url.resolve(cnodeUrl, $element.attr(<span class="string">'href'</span>));</div><div class="line">      topicUrls.push(href);</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">// 初始 eventProxy (事件代理)</span></div><div class="line">    <span class="keyword">var</span> ep = <span class="keyword">new</span> eventproxy();</div><div class="line">    <span class="comment">// 当 topic_html emit topicUrls.length 次时 , 回调函数就会触发</span></div><div class="line">    ep.after(<span class="string">'topic_html'</span>, topicUrls.length, <span class="function"><span class="keyword">function</span> (<span class="params">topics</span>) </span>&#123;</div><div class="line">      <span class="comment">// topics 是个二维数组，类似 [[url, text], [url,text]]</span></div><div class="line">      topics = topics.map(<span class="function"><span class="keyword">function</span> (<span class="params">topicPair</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> topicUrl = topicPair[<span class="number">0</span>];</div><div class="line">        <span class="keyword">var</span> topicHtml = topicPair[<span class="number">1</span>];</div><div class="line">        <span class="keyword">var</span> $ = cheerio.load(topicHtml);</div><div class="line">        <span class="keyword">return</span> (&#123;</div><div class="line">          <span class="attr">title</span>: $(<span class="string">'.topic_full_title'</span>).text().trim(),</div><div class="line">          <span class="attr">href</span>: topicUrl,</div><div class="line">          <span class="attr">comment1</span>: $(<span class="string">'.reply_content'</span>).eq(<span class="number">0</span>).text().trim(),</div><div class="line">        &#125;);</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'final:'</span>);</div><div class="line">      <span class="built_in">console</span>.log(topics);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    topicUrls.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">topicUrl</span>) </span>&#123;</div><div class="line">      superagent.get(topicUrl)</div><div class="line">        .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'fetch '</span> + topicUrl + <span class="string">' successful'</span>);</div><div class="line">          <span class="comment">// 触发 topic_html 事件并发送响应的数据</span></div><div class="line">          ep.emit(<span class="string">'topic_html'</span>, [topicUrl, res.text]);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<hr>
<h2 id="5-使用-async-控制并发"><a href="#5-使用-async-控制并发" class="headerlink" title="5. 使用 async 控制并发"></a>5. 使用 async 控制并发</h2><blockquote>
<p>需求: 当请求很多请求并发时, 有的网站有可能会因为发出的并发连接数太多而当做恶意请求，把其 IP 封掉。<br>要点: 使用 async 来 <code>控制并发连接数</code></p>
</blockquote>
<ul>
<li><p>此次示例所用且常用到的 async 接口</p>
<ul>
<li>mapLimit(arr, limit, iterator, callback)</li>
<li>queue(worker, concurrency) <code>控制并发连接数</code></li>
</ul>
<ul>
<li>什么时候用 <code>eventproxy</code> ，什么时候使用 <code>async</code> 呢？它们不都是用来做异步流程控制的吗？</li>
</ul>
<ul>
<li>当需要去多个源(一般是小于 10 个)汇总数据的时候，用 eventproxy 方便</li>
<li>当你需要用到队列，需要控制并发数，使用 async。</li>
</ul>
</li>
</ul>
<p><img src="desktop/asdc.png" alt=""></p>
<hr>
<h2 id="6-测试用例：mocha，should，istanbul"><a href="#6-测试用例：mocha，should，istanbul" class="headerlink" title="6. 测试用例：mocha，should，istanbul"></a>6. 测试用例：mocha，should，istanbul</h2><p><em><a href="https://github.com/alsotang/node-lessons/blob/master/lesson6/README.md" rel="external nofollow noopener noreferrer" target="_blank">待掌握</a></em></p>
<ul>
<li><p>要点</p>
<ul>
<li>学习使用测试框架 <a href="http://mochajs.org/" rel="external nofollow noopener noreferrer" target="_blank">mocha</a></li>
<li>学习使用断言库 <a href="https://github.com/tj/should.js" rel="external nofollow noopener noreferrer" target="_blank">should</a></li>
<li>学习使用测试率覆盖工具 <a href="https://github.com/gotwarlost/istanbul" rel="external nofollow noopener noreferrer" target="_blank">istanbul</a></li>
<li>简单 <a href="http://blog.csdn.net/haoel/article/details/2886" rel="external nofollow noopener noreferrer" target="_blank">Makefile</a> 的编写</li>
</ul>
</li>
<li><p>mocha  输出测试结果</p>
</li>
<li>istanbul cover _mocha 输出覆盖率</li>
<li>open coverage/lcov-report/index.html 浏览器查看</li>
</ul>
<h2 id="7-浏览器端测试-mocha-chai-phantomjs"><a href="#7-浏览器端测试-mocha-chai-phantomjs" class="headerlink" title="7. 浏览器端测试: mocha, chai, phantomjs"></a>7. 浏览器端测试: mocha, chai, phantomjs</h2><p><em><a href="https://github.com/alsotang/node-lessons/blob/master/lesson7/README.md" rel="external nofollow noopener noreferrer" target="_blank">待掌握</a></em></p>
<ul>
<li>要点<ul>
<li>学习使用测试框架 <a href="http://mochajs.org/" rel="external nofollow noopener noreferrer" target="_blank">mocha</a> 进行前端测试</li>
<li>了解全栈的断言库 <a href="http://chaijs.com/" rel="external nofollow noopener noreferrer" target="_blank">chai</a></li>
<li>了解 headless 浏览器 <a href="http://phantomjs.org/" rel="external nofollow noopener noreferrer" target="_blank">phantomjs</a></li>
</ul>
</li>
</ul>
<h2 id="8-测试用例-supertest"><a href="#8-测试用例-supertest" class="headerlink" title="8. 测试用例: supertest"></a>8. 测试用例: supertest</h2><p><em><a href="https://github.com/alsotang/node-lessons/blob/master/lesson8/README.md" rel="external nofollow noopener noreferrer" target="_blank">待掌握</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Node-js-开发环境&quot;&gt;&lt;a href=&quot;#Node-js-开发环境&quot; class=&quot;headerlink&quot; title=&quot;Node.js 开发环境&quot;&gt;&lt;/a&gt;Node.js 开发环境&lt;/h2&gt;&lt;p&gt;检查 &lt;code&gt;~/.profile&lt;/code&gt; 或者 &lt;code&gt;~/.bash_profile&lt;/code&gt; 中有没有这样两句&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;export NVM_DIR=&quot;/Users/YOURUSERNAME/.nvm&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;amp;&amp;amp; . &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-一个最简单的-express-应用&quot;&gt;&lt;a href=&quot;#1-一个最简单的-express-应用&quot; class=&quot;headerlink&quot; title=&quot;1. 一个最简单的 express 应用&quot;&gt;&lt;/a&gt;1. 一个最简单的 express 应用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;express 是 Node.js 应用最广泛的 web 框架&lt;/li&gt;
&lt;li&gt;express &lt;a href=&quot;http://expressjs.com/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;官网&lt;/a&gt; ，我常常上去看它的 API&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;需求: 当访问 &lt;code&gt;http://localhost:3000/&lt;/code&gt; 时，输出 &lt;code&gt;你好，世界&lt;/code&gt;&lt;br&gt;要点: 新建 express 实例并定义 routes 从而产生输出&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="快捷键" scheme="http://www.baixiaojian.com/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>如何才能成为很厉害的人</title>
    <link href="http://www.baixiaojian.com/rexue/"/>
    <id>http://www.baixiaojian.com/rexue/</id>
    <published>2017-04-13T14:33:40.000Z</published>
    <updated>2017-07-09T08:36:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/imgs/hzw1.jpg" alt="markdown"></p>
<embed src="//music.163.com/style/swf/widget.swf?sid=33682157&type=2&auto=0&width=320&height=66" width="340" height="86" allownetworking="all">

<div class="note primary"><p>首先，少年，答应别人的承诺，就一定要兑现。</p>
</div>
<p>我以前啊，和你一样，很想成为一个很厉害很厉害很厉害的人。</p>
<p>喜欢看热血的东西，幻想自己是屠龙的勇士，登塔的先锋，我左手有剑，右手有光，没头没脑的燃烧自己，敌人的骑军来了，我说你们何人堪与之战，我的女人在等我。</p>
<a id="more"></a>
<p>后来我现实了一点，我觉得我要成为那种说走就走，说日就日的男人，我梳大背头，流浪在欧洲或者新几内亚的，我拍孩子，拍野兽，拍流浪的雏妓，与罗伯特德尼罗握手，说嘿，我给你写了愤怒的公牛2。</p>
<p>再后来，我觉得我人生的梦想，是在城市中心买上一间顶层公寓，把一整面墙都改造成钢化玻璃，在灯火通明的夜晚，我就要端着酒站在巨大的窗前，看整个城市在呼吸，然后我的朋友叩门，他带来了一打嫩模，我们就玩一些成年人的游戏现在，我发现龙并不存在，我不会骑马，不会用单反，家住2楼，我能做的，就是把眼前的事儿做好，赚到足够的钱，这样我可以给我的姑娘一个地球仪，然后用飞镖扎它，扎到哪儿，就去哪儿玩。</p>
<p>这样看来，虽然我的想法随着生殖器的发育，始终在变，但那个很厉害很厉害的人，一直离我很远，甚至越来越远。</p>
<p><strong>我心中曾经执剑的少年，此刻也混迹在市井之间。</strong></p>
<p>血似乎都凉了。</p>
<p>我也不是没有惶恐过，是不是我这一生，都不能左手持剑，右手握着罗伯特德尼罗，说这里的嫩模随便你玩但是你他妈别从窗户上掉下去。</p>
<p>这样一看，我逊得不行，我的朋友都是一些凡人，比我还逊，业余生活就是推塔、中单、跪。</p>
<p>我心想，我是不是这辈子都要做一个逊逼，直到我的坟墓上写好墓志铭，我甚至都想好了：我来，我见，我挂了。</p>
<p>最后我给了自己一个否定的答复，我不要。</p>
<p>我喜欢我的朋友们，喜欢我现在的生活，首先我希望你明白，没有厉害与逊逼得区分，只有血的凉与热，有的人觉得生活就这样吧，我算了，现在没什么不好。</p>
<p>有的人觉得生活这样挺好，但是我还要更好。</p>
<p>这种只要剧情稍微热血一点就会热泪盈眶的傻逼，已经不多了，一刻也不要停留。</p>
<p>所以现在，我和你不一样了，我仍然想成为一个很厉害很厉害很厉害的人，像我们这种剧情稍微热血一点就会热泪盈眶的傻逼，要好好珍惜自己。</p>
<p>很多人坐下来了，跟你说你不行，说你省点儿心吧，说你请静一静。</p>
<p>汹涌的人群就把你这样的少年淹没了，人群散去的时候，你也不见了，你那些承诺，谁也听不见，这个世界对于你，就再不可能有什么更有趣更漂亮的女朋友。</p>
<p>你就失约了，小逼崽子。</p>
<p>这么跟你说。</p>
<p>虽然随着年龄的增长，我趋于现实，不能像你那样分分钟冲动的燃烧，然而我每时每刻都有想做的事，有想达成的目标。</p>
<p>不排除以后的某一年，我会握着罗伯特德尼罗的手，他说这是你写得吗，愤怒的公牛2，只要他还没死。</p>
<p>故事里拳王拉莫塔忍着伤，他举着铁拳，挥汗如雨，要和命运斗争，他说我怎么能失约呢，我是那个要成为很厉害很厉害的拳王拉莫塔！小伙儿，成为很厉害很厉害的人，最重要的，就是要热血，永远也不要让你的血凉下去，你凉下去了，就再也不能找到一个更有趣更漂亮的女友，你就失约了，于是那天她踏梦而来，就成了一个彻头彻尾的笑话。</p>
<p>当有一天你成为你讨厌的那种人，浑浑噩噩，你走在街上，看见那些更有趣更漂亮的女孩，你会不会想起多年以前，你说我答应你，在一个承诺就是永远的年纪。</p>
<p>读书，交友，美容，都不如你这一腔狗血，滚烫，灼人，你要燃上大半辈子，才对得起你现在说的这些话。</p>
<p><code>我听闻最美的故事，是公主死去了，屠龙的少年还在燃烧。</code></p>
<p>火苗再小，你都要反复的点燃。</p>
<p>所谓热血的少年，青涩的爱恋，死亡与梦之约。</p>
<p>这么好的故事。</p>
<p>你可别演砸了。</p>
<p>最后我给你点个人建议：<br>  1.读书，读到倦，网上有很多方法，但你从来沉不下心看。<br>  2.学习，学到疼，网上有很多方法，但你从来沉不下心看。<br>  3.开口说话，冷场也要说话，脸皮薄也要说话，挨打也要说话。<br>  4.如果你现在不知道做什么，至少你还可以先从做一个牛逼的学生开始。<br>  5.更漂亮更有趣的女孩，五年以后再找。<br>  6.承诺是鞭子，不是兴奋剂。<br>  7.年纪大了，也不要说什么心如死灰。</p>
<p>改变自己是非常，非常，非常痛苦的，我能看出来你一腔热血的优点，自然知道你孤僻懒散自以为是的缺点，方法很多，不过我不确定你吃不吃得了苦，我和你共勉吧。</p>
<p>在成为最厉害最厉害最厉害的道路上。</p>
<p>作者：朱炫<br>链接：<a href="https://www.zhihu.com/question/22921426/answer/23330366" rel="external nofollow noopener noreferrer" target="_blank">https://www.zhihu.com/question/22921426/answer/23330366</a><br>来源：知乎</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/imgs/hzw1.jpg&quot; alt=&quot;markdown&quot;&gt;&lt;/p&gt;
&lt;embed src=&quot;//music.163.com/style/swf/widget.swf?sid=33682157&amp;type=2&amp;auto=0&amp;width=320&amp;height=66&quot; width=&quot;340&quot; height=&quot;86&quot; allownetworking=&quot;all&quot;&gt;

&lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;首先，少年，答应别人的承诺，就一定要兑现。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我以前啊，和你一样，很想成为一个很厉害很厉害很厉害的人。&lt;/p&gt;
&lt;p&gt;喜欢看热血的东西，幻想自己是屠龙的勇士，登塔的先锋，我左手有剑，右手有光，没头没脑的燃烧自己，敌人的骑军来了，我说你们何人堪与之战，我的女人在等我。&lt;/p&gt;
    
    </summary>
    
      <category term="成长" scheme="http://www.baixiaojian.com/categories/%E6%88%90%E9%95%BF/"/>
    
    
      <category term="知乎" scheme="http://www.baixiaojian.com/tags/%E7%9F%A5%E4%B9%8E/"/>
    
  </entry>
  
  <entry>
    <title>Quotation</title>
    <link href="http://www.baixiaojian.com/quotation/"/>
    <id>http://www.baixiaojian.com/quotation/</id>
    <published>2017-04-09T15:56:04.000Z</published>
    <updated>2017-07-26T09:24:55.000Z</updated>
    
    <content type="html"><![CDATA[<embed src="//music.163.com/style/swf/widget.swf?sid=26577096&type=2&auto=0&width=320&height=66" width="340" height="86" allownetworking="all">



<div class="note info"><p>苟利国家生以死,岂因祸福趋避之<br><span style="margin-left: 50%"><strong><em>出自『林则徐』</em></strong></span></p>
</div>
<div class="note danger"><p>只比你努力一点的人,其实已经甩你很远<br><span style="margin-left: 50%"><strong><em>出自『☆』</em></strong></span></p>
</div>
<div class="note primary"><p>主动往往能为你赢得更多机会<br><span style="margin-left: 50%"><strong><em>出自『☆』</em></strong></span></p>
</div>
<div class="note danger"><p>世界的模样在于你看它的角度<br><span style="margin-left: 50%"><strong><em>出自『☆』</em></strong></span></p>
</div>
<a id="more"></a>
<div class="note primary"><p>真正成熟的人,脾气永远不会大于他的能力<br><span style="margin-left: 50%"><strong><em>出自『☆』</em></strong></span></p>
</div>
<div class="note danger"><p>不要用 “作” 来找存在感<br><span style="margin-left: 50%"><strong><em>出自『☆』</em></strong></span></p>
</div>
<div class="note primary"><p>人不牺牲什么就什么也得不到，为了得到什么就要付出同样的代价，那就是炼金术的等价交换原则，那个时候，我们相信那是世界的真实。<br><span style="margin-left: 50%"><strong><em>出自『钢之炼金术师』</em></strong></span></p>
</div>
<div class="note danger"><p>思想中一旦有了依附，骨子里便失去了坚强；<br><span style="margin-left: 50%"><strong><em>出自『网络』</em></strong></span></p>
</div>
<div class="note info"><p>星星之火，可以燎原。<br><span style="margin-left: 50%"><strong><em>出自『张居正』</em></strong></span></p>
</div>
<div class="note danger"><p>纸上得来终觉浅，绝知此事要躬行。<br><span style="margin-left: 50%"><strong><em>出自『陆游』</em></strong></span></p>
</div>
<div class="note warning"><p>要保持剑的锋利就得时时磨拭，要保持头脑灵光就得看书。<br><span style="margin-left: 50%"><strong><em>出自『乔治·马丁』</em></strong></span></p>
</div>
<div class="note default"><p>俗话说不耻下问是一时之耻，耻而不问是一生之耻。<br><span style="margin-left: 50%"><strong><em>出自『白箱』</em></strong></span></p>
</div>
<div class="note default"><p>累过方得闲，苦过方知甜。<br><span style="margin-left: 50%"><strong><em>出自『网络』</em></strong></span></p>
</div>
<div class="note primary"><p>不以物喜，不以己悲。<br><span style="margin-left: 50%"><strong><em>出自『范仲淹』</em></strong></span></p>
</div>
<div class="note primary"><p>若有恒，何必三更眠五更起；最无益，莫过一日曝十日寒；<br><span style="margin-left: 50%"><strong><em>出自『毛泽东』</em></strong></span></p>
</div>
<div class="note default"><p>战略上藐视敌人，战术上重视敌人；<br><span style="margin-left: 50%"><strong><em>出自『毛泽东』</em></strong></span></p>
</div>
<div class="note default"><p>人生路很长，永远不要高兴太早。<br><span style="margin-left: 50%"><strong><em>出自『平常心』</em></strong></span></p>
</div>
<div class="note default"><p>人生就像一盒的巧克力，你永远不知道下一块是什么口味。<br><span style="margin-left: 50%"><strong><em>出自『阿甘正传』</em></strong></span></p>
</div>
<div class="note default"><p>如果你不努力，一天比一天容易，但一年比一年难；如果你努力了，一天比一天难，但一年比一年容易。<br><span style="margin-left: 50%"><strong><em>出自『网络』</em></strong></span></p>
</div>
<div class="note default"><p>只有内心强大，才能实现自我救赎；<br><span style="margin-left: 50%"><strong><em>出自『9.18』</em></strong></span></p>
</div>
<div class="note default"><p>富，亦指精神；强，亦指内心；<br><span style="margin-left: 50%"><strong><em>出自『9.18』</em></strong></span></p>
</div>
<div class="note default"><p>人一定要认清自己，自己能干什么，干得了什么，不要人云亦云。<br><span style="margin-left: 50%"><strong><em>出自『★』</em></strong></span></p>
</div>
<div class="note default"><p>对社会不要有太多的抱怨。创业的时候不要把自己当人看。有行动不一定能成功，没有行动就一定失败。<br><span style="margin-left: 50%"><strong><em>出自『俞敏洪』</em></strong></span></p>
</div>
<div class="note default"><p>那家伙永远都是挑战者<br><span style="margin-left: 50%"><strong><em>出自『棒球大联盟』</em></strong></span></p>
</div>
<div class="note default"><p>做没做过的事情是要建立在老老实实的成功之后的基础之上。<br><span style="margin-left: 50%"><strong><em>出自『★』</em></strong></span></p>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;embed src=&quot;//music.163.com/style/swf/widget.swf?sid=26577096&amp;type=2&amp;auto=0&amp;width=320&amp;height=66&quot; width=&quot;340&quot; height=&quot;86&quot; allownetworking=&quot;all&quot;&gt;



&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;苟利国家生以死,岂因祸福趋避之&lt;br&gt;&lt;span style=&quot;margin-left: 50%&quot;&gt;&lt;strong&gt;&lt;em&gt;出自『林则徐』&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;只比你努力一点的人,其实已经甩你很远&lt;br&gt;&lt;span style=&quot;margin-left: 50%&quot;&gt;&lt;strong&gt;&lt;em&gt;出自『☆』&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;note primary&quot;&gt;&lt;p&gt;主动往往能为你赢得更多机会&lt;br&gt;&lt;span style=&quot;margin-left: 50%&quot;&gt;&lt;strong&gt;&lt;em&gt;出自『☆』&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;世界的模样在于你看它的角度&lt;br&gt;&lt;span style=&quot;margin-left: 50%&quot;&gt;&lt;strong&gt;&lt;em&gt;出自『☆』&lt;/em&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
    
    </summary>
    
      <category term="语录" scheme="http://www.baixiaojian.com/categories/%E8%AF%AD%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>photo</title>
    <link href="http://www.baixiaojian.com/photo/"/>
    <id>http://www.baixiaojian.com/photo/</id>
    <published>2017-04-07T06:04:32.000Z</published>
    <updated>2017-07-05T05:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="http://oapjp6spr.bkt.clouddn.com/224147.jpg" alt=""></div><div class="group-picture-column" style="width: 50%;"><img src="http://oapjp6spr.bkt.clouddn.com/196232.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="http://oapjp6spr.bkt.clouddn.com/18210.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="http://oapjp6spr.bkt.clouddn.com/213318.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="http://oapjp6spr.bkt.clouddn.com/199301.jpg" alt=""></div></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;group-picture&quot;&gt;&lt;div class=&quot;group-picture-container&quot;&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;widt
    
    </summary>
    
    
      <category term="picture" scheme="http://www.baixiaojian.com/tags/picture/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.baixiaojian.com/hello-world/"/>
    <id>http://www.baixiaojian.com/hello-world/</id>
    <published>2017-04-05T02:15:10.000Z</published>
    <updated>2017-07-05T05:42:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="历程"><a href="#历程" class="headerlink" title="历程"></a>历程</h3><p>还记得在 Github 上生成的第一个page时的新奇<br>还记得在 CSDN 的第一次开通博客的 Hello world 的兴奋<br>如今在Github的page上生成了自己的博客，那可谓是即新奇 + 兴奋带来的激动<br>可以在自己的这块领地为所欲为，光想想就有一种迎风而来的酸爽</p>
<h3 id="致敬"><a href="#致敬" class="headerlink" title="致敬"></a>致敬</h3><p>每一次的开始都仿佛打开一扇门<br>而每扇门的背后都有着无数默默付出和无私奉献的人<br>是他们让现在的这个圈子有了生态<br>没有他们的付出我不会这么顺利的把这个博客搭建起来<br>再次由衷的致敬这些人<br>我愿成为向你们一样的人</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;历程&quot;&gt;&lt;a href=&quot;#历程&quot; class=&quot;headerlink&quot; title=&quot;历程&quot;&gt;&lt;/a&gt;历程&lt;/h3&gt;&lt;p&gt;还记得在 Github 上生成的第一个page时的新奇&lt;br&gt;还记得在 CSDN 的第一次开通博客的 Hello world 的兴奋&lt;br&gt;
    
    </summary>
    
    
      <category term="Hello" scheme="http://www.baixiaojian.com/tags/Hello/"/>
    
  </entry>
  
  <entry>
    <title>HEXO+GitHub,搭建博客 - 域名绑定</title>
    <link href="http://www.baixiaojian.com/wwwyuming/"/>
    <id>http://www.baixiaojian.com/wwwyuming/</id>
    <published>2017-03-09T06:50:21.000Z</published>
    <updated>2017-07-09T08:36:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面也讲过了，我们把博客同时托管到 Github 和 Coding。我们就有两个域名可以访问站点，但是又出现几个问题：使用的不是自己的域名；两个地址的统计信息（文章阅读量，访问量等）相互独立，不能合并；github pages国内访问速度慢（300ms左右，毕竟国外的服务器）。</p>
<p>这就有点坑爹了，强迫症怎么能忍。下面给出解决方法。。</p>
<a id="more"></a>
<p><span id="inline-blue">解决方案：</span><br>我们知道 github 和 coding 的 pages 服务都提供 <code>自定义域名</code> 功能。我们可以利用这一点，绑定自己的域名。域名解析的时候实现国内访问 coding pages ，国外访问 github pages ,从而加快访问速度。 具体怎么实现，往下看：</p>
<h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><p>首先我们要购买一个域名，推荐到 <a href="https://wanwang.aliyun.com/?spm=5176.8142029.388261.25.nvxK84" rel="external nofollow noopener noreferrer" target="_blank">万网</a> 购买。（毕竟很方便）<br>具体步骤可以参考这篇文章：<a href="http://jingyan.baidu.com/article/4853e1e513d0061908f7265b.html" rel="external nofollow noopener noreferrer" target="_blank">万网域名注册教程</a>。</p>
<p id="border-red">购买域名一定要实名认证，否则会停止解析</p>

<h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>这一步是最重要的，我们要把域名指向 github 和 coding 的服务器空间。</p>
<ul>
<li>登录阿里云，进入 <strong>控制台</strong> 。依次点击 <strong>域名与网站</strong> &gt; <strong>云解析DNS</strong> 就会出现你购买的域名信息</li>
</ul>
<p><img src="http://on5sixmz1.bkt.clouddn.com/%E5%9F%9F%E5%90%8D01.png" alt="Markdown"></p>
<ul>
<li>点击 <strong>解析</strong>，然后按照下图依次添加解析：（这张图片可以放大）</li>
</ul>
<p><img src="http://on5sixmz1.bkt.clouddn.com/%E5%9F%9F%E5%90%8D02.png" alt="Markdown"></p>
<p id="border-red">从上图可以看出，我们的解析实现了分流。国内线路访问Coding pages，国际线路访问Github Pages。</p>

<h3 id="托管平台设置"><a href="#托管平台设置" class="headerlink" title="托管平台设置"></a>托管平台设置</h3><h4 id="Coding平台"><a href="#Coding平台" class="headerlink" title="Coding平台"></a>Coding平台</h4><p>进入对应项目的 pages 设置页面（项目 &gt; 代码 &gt; pages服务）</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/%E5%9F%9F%E5%90%8D04.png" alt="Markdown"></p>
<p>成功后会显示：</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/%E5%9F%9F%E5%90%8D03.png" alt="Markdown"></p>
<h4 id="Github平台"><a href="#Github平台" class="headerlink" title="Github平台"></a>Github平台</h4><p>进入对应项目的 pages 设置页面（setting &gt; github pages &gt; Custom domain)</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/%E5%9F%9F%E5%90%8D05.png" alt="Markdown"></p>
<p>成功后会显示：</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/%E5%9F%9F%E5%90%8D06.png" alt="Markdown"></p>
<p>到此我们的博客就可以正常运行了！！</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一切搞定后，在回头看一下我们的问题：<br><strong>@</strong> 两个地址的统计信息（文章阅读量，访问量等）相互独立，不能合并；</p>
<blockquote>
<p>从两个地址访问都会跳转到我们绑定的域名。统计信息自然也是绑定后域名的信息。</p>
</blockquote>
<p><strong>@</strong> github pages国内访问速度慢（300ms左右）</p>
<blockquote>
<p>我们测试一下 Ping：(表现不错)</p>
</blockquote>
<p><img src="http://on5sixmz1.bkt.clouddn.com/%E5%9F%9F%E5%90%8D07.png" alt="Markdown"></p>
<p><strong>@</strong> 托管平台给出的二级域名太丑。</p>
<blockquote>
<p>不存在的…..</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前面也讲过了，我们把博客同时托管到 Github 和 Coding。我们就有两个域名可以访问站点，但是又出现几个问题：使用的不是自己的域名；两个地址的统计信息（文章阅读量，访问量等）相互独立，不能合并；github pages国内访问速度慢（300ms左右，毕竟国外的服务器）。&lt;/p&gt;
&lt;p&gt;这就有点坑爹了，强迫症怎么能忍。下面给出解决方法。。&lt;/p&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="http://www.baixiaojian.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Next+Hexo" scheme="http://www.baixiaojian.com/tags/Next-Hexo/"/>
    
      <category term="博客搭建" scheme="http://www.baixiaojian.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="域名" scheme="http://www.baixiaojian.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>HEXO 博客同时部署到 GitHub 和 Coding</title>
    <link href="http://www.baixiaojian.com/github%E5%92%8Ccoding/"/>
    <id>http://www.baixiaojian.com/github和coding/</id>
    <published>2017-03-08T05:08:44.000Z</published>
    <updated>2017-07-09T09:27:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很多人都把 hexo 托管到 Github 上，因为 Github 大家都用的比较久了。但是，你的博客主要访问者肯定还是国内的用户，国内的用户访问 coding 比 github 是要快不少的。还可以<u>利用域名解析实现国内的走 coding，海外的走github，</u>分流网站的访问。</p>
<a id="more"></a>
<h3 id="注册GitHub和Coding"><a href="#注册GitHub和Coding" class="headerlink" title="注册GitHub和Coding"></a>注册GitHub和Coding</h3><p><a href="https://github.com/" rel="external nofollow noopener noreferrer" target="_blank">github官网</a>  &nbsp;&nbsp;||&nbsp;&nbsp;   <a href="https://coding.net" rel="external nofollow noopener noreferrer" target="_blank">Coding官网</a> &nbsp;&nbsp;注册就不必多说，不会的可自行百度。<br><strong>需要注意的是</strong>：最好使用同一个 <strong>用户名</strong> 和 <strong>邮箱</strong> ，以免引起不必要的麻烦。</p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>在GitHub上创建项目，名称为：<strong>yourname.github.io</strong><br>在Coding上创建项目，名称为：<strong>yourname</strong></p>
<h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><p>配置 shh key 是让本地 git 项目与远程的 github 建立联系</p>
<h4 id="获取ssh"><a href="#获取ssh" class="headerlink" title="获取ssh"></a>获取ssh</h4><ul>
<li><p>检查是否已经有SSH Key，打开 <code>Git Bash</code>，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd ~/.ssh</div></pre></td></tr></table></figure>
</li>
<li><p>如果没有 <strong>.ssh</strong> 这个目录，则生成一个新的 SSH，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;your e-mail&quot;</div></pre></td></tr></table></figure>
<p id="border-red"> <strong>注意:</strong>  此处的邮箱地址，是你注册 <strong>GitHub</strong> 和 <strong>coding</strong> 时的邮箱地址; 此处的<strong>「-C」</strong>的是大写的<strong>「C」</strong> 。</p>
</li>
<li><p>接下来几步都直接按回车键,然后系统会要你输入密码 (防止别人往你的项目里提交内容)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;</div><div class="line">Enter same passphrase again:&lt;再次输入加密串&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>成功后，我们打开 <em>C:\Users\cwyaml.ssh</em> 打开 <em>id_rsa.pub</em> 文件。里面的代码就是 ssh key。</p>
<h4 id="添加-SSH-Key-到-GitHub-和-Coding"><a href="#添加-SSH-Key-到-GitHub-和-Coding" class="headerlink" title="添加 SSH Key 到 GitHub 和 Coding"></a>添加 SSH Key 到 GitHub 和 Coding</h4><p><strong>GitHub添加方法：</strong></p>
<ul>
<li>进入Github官网，点击头像，再按 <em>settings</em> 进入设置。</li>
<li>点击 <em>New SSH key</em> 创建</li>
<li>title输入邮箱，key里面粘贴刚才右击复制的内容,再点 <em>Add SSH key</em> 即可。（会让你输入密码）</li>
</ul>
<p><img src="http://on5sixmz1.bkt.clouddn.com/github&amp;coding01.png" alt="Markdown"></p>
<p><strong>Coding添加方法：</strong></p>
<ul>
<li>登录账号后点击 <em>左侧账户</em></li>
<li>在点 <em>SSH公钥</em> 设置即可 。（同样要输入密码）</li>
</ul>
<p><img src="http://on5sixmz1.bkt.clouddn.com/github&amp;coding02.png" alt="Markdown"></p>
<h4 id="测试SSH是否配置成功"><a href="#测试SSH是否配置成功" class="headerlink" title="测试SSH是否配置成功"></a>测试SSH是否配置成功</h4><p>打开 <code>Git Bash</code>，首先测试 GitHub 是否成功？输入:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>(如配置了密码则要输入密码,输完按回车。)如果显示以下内容，则说明 Github 中的 ssh 配置成功。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not</div><div class="line">provide shell access.</div></pre></td></tr></table></figure></p>
<p>然后测试 Coding 是否成功？<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ssh -T git@git.coding.net</div></pre></td></tr></table></figure></p>
<p>如果显示以下则说明配置成功：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Hello username You&apos;ve connected to Coding.net by SSH successfully!</div></pre></td></tr></table></figure></p>
<h3 id="上传博客文件"><a href="#上传博客文件" class="headerlink" title="上传博客文件"></a>上传博客文件</h3><p><strong>修改站点配置文件：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo:</div><div class="line">    github: git@github.com:cwyaml/cwyaml.github.io.git,master</div><div class="line">    coding: git@git.coding.net:cwyaml/cwyaml.git,master</div></pre></td></tr></table></figure></p>
<p>然后你就可以 <code>hexo c、hexo g、hexo d</code> 了。</p>
<h3 id="开启pages服务"><a href="#开启pages服务" class="headerlink" title="开启pages服务"></a>开启pages服务</h3><p>GitHub 已经默认开启，就不必多说了。<br>Coding 进入对应项目，点击 <strong>代码&gt;pages服务</strong> ，把部署来源改为 <strong>master</strong> 即可。</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/github&amp;coding03.png" alt="Markdown"></p>
<h3 id="访问博客"><a href="#访问博客" class="headerlink" title="访问博客"></a>访问博客</h3><p>这样我们整个部署过程就完成了。有两个地址可以访问我们的博客：<br>GitHub pages：<a href="https://cwyaml.github.io" rel="external nofollow noopener noreferrer" target="_blank">https://cwyaml.github.io</a><br>Coding pages：<a href="https://cwyaml.coding.me" rel="external nofollow noopener noreferrer" target="_blank">https://cwyaml.coding.me</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;很多人都把 hexo 托管到 Github 上，因为 Github 大家都用的比较久了。但是，你的博客主要访问者肯定还是国内的用户，国内的用户访问 coding 比 github 是要快不少的。还可以&lt;u&gt;利用域名解析实现国内的走 coding，海外的走github，&lt;/u&gt;分流网站的访问。&lt;/p&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="http://www.baixiaojian.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Next+Hexo" scheme="http://www.baixiaojian.com/tags/Next-Hexo/"/>
    
      <category term="博客搭建" scheme="http://www.baixiaojian.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>HEXO+GitHub,搭建博客 - 备份</title>
    <link href="http://www.baixiaojian.com/backup/"/>
    <id>http://www.baixiaojian.com/backup/</id>
    <published>2017-03-07T08:26:30.000Z</published>
    <updated>2017-06-23T06:17:35.000Z</updated>
    
    <content type="html"><![CDATA[<!-- <div class="out-img-topic">![Markdown](http://on5pjsxrv.bkt.clouddn.com/backup.png)</div> -->
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用Hexo写博客是一件比较享受的事情，无奈如果换电脑或者系统崩了的话，你就会一脸懵B了，备份博客就显得尤为重要。先说说我的感受，博客刚搭建好的时候就想过这个问题，那时候对 <code>git</code> 似懂非懂吧。在网上找了很多教程方法，大概就是说要创建一个分支来存放 blog 文件，但是翻腾来翻腾去还是没有搞定。<a id="more"></a> 最后索性简单粗暴点，<u><strong>在 GitHub 上创建一个仓库，把 blog 文件整个打包上传。</strong></u>使用过程中发现这个方法还不错，至少对于小白来说很容易理解，也很难出错，就一直沿用到现在。</p>
<p id="border-red">这种方式虽然能够备份 Hexo 博客的源文件，但是对于博主这种懒人，每次更新博文都需要输入两三行重复的Git命令真是一件麻烦的事情。</p>

<h3 id="自动备份"><a href="#自动备份" class="headerlink" title="自动备份"></a>自动备份</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>本方法需要提前将 Hexo 加入 Git仓库 并与 Github 远程仓库绑定之后，才能正常工作。<br><strong>具体做法可以参考：</strong><a href="https://cwyaml.github.io/2017/01/08/update%20to%20github/" rel="external nofollow noopener noreferrer" target="_blank">上传本地项目到GitHub</a></p>
<h4 id="安装-shelljs-模块"><a href="#安装-shelljs-模块" class="headerlink" title="安装 shelljs 模块"></a>安装 shelljs 模块</h4><p>要实现这个自动备份功能，需要依赖 <code>NodeJs</code> 的一个 <code>shelljs 模块</code>,该模块重新包装了 child_process,调用系统命令更加的方便。<br>使用以下命令，完成 shelljs 模块的安装：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install --save shelljs</div></pre></td></tr></table></figure></p>
<h4 id="编写自动备份脚本"><a href="#编写自动备份脚本" class="headerlink" title="编写自动备份脚本"></a>编写自动备份脚本</h4><p>待到模块安装完成，在<strong>Hexo根目录</strong> 的 <strong>scripts</strong>文件夹下新建一个js文件，文件名随意取。<br><strong><em>如果没有scripts目录，请新建一个。</em></strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">require(&apos;shelljs/global&apos;);</div><div class="line">try &#123;</div><div class="line">    hexo.on(&apos;deployAfter&apos;, function() &#123;//当deploy完成后执行备份</div><div class="line">        run();</div><div class="line">    &#125;);</div><div class="line">&#125; catch (e) &#123;</div><div class="line">    console.log(&quot;产生了一个错误&lt;(￣3￣)&gt; !，错误详情为：&quot; + e.toString());</div><div class="line">&#125;</div><div class="line">function run() &#123;</div><div class="line">    if (!which(&apos;git&apos;)) &#123;</div><div class="line">        echo(&apos;Sorry, this script requires git&apos;);</div><div class="line">        exit(1);</div><div class="line">    &#125; else &#123;</div><div class="line">        echo(&quot;======================Auto Backup Begin===========================&quot;);</div><div class="line">        cd(&apos;C:/Blog&apos;);    //此处修改为Hexo根目录路径</div><div class="line">        if (exec(&apos;git add .&apos;).code !== 0) &#123;</div><div class="line">            echo(&apos;Error: Git add failed&apos;);</div><div class="line">            exit(1);</div><div class="line">        &#125;</div><div class="line">        if (exec(&apos;git commit -m &quot;Form auto backup script\&apos;s commit&quot;&apos;).code !== 0) &#123;</div><div class="line">            echo(&apos;Error: Git commit failed&apos;);</div><div class="line">            exit(1);</div><div class="line">        &#125;</div><div class="line">        if (exec(&apos;git push origin master&apos;).code !== 0) &#123;</div><div class="line">            echo(&apos;Error: Git push failed&apos;);</div><div class="line">            exit(1);</div><div class="line">        &#125;</div><div class="line">        echo(&quot;==================Auto Backup Complete============================&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><span id="inline-red">注意：</span></p>
<ul>
<li>其中，需要修改第17行的 <code>D:/hexo</code> 路径为 <code>Hexo的根目录</code> 路径。（脚本中的路径为博主的Hexo路径）</li>
<li>如果你的Git远程仓库名称不为 <code>origin</code> 的话，还需要修改第28行执行的push命令，修改成自己的远程仓库名和相应的分支名。</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>保存脚本并退出，然后执行 <code>hexo d</code> 命令，将会得到类似以下结果:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">INFO  Deploying: git</div><div class="line">INFO  Clearing .deploy_git folder...</div><div class="line">INFO  Copying files from public folder...</div><div class="line">......</div><div class="line">======================Auto Backup Begin===========================</div><div class="line">warning: LF will be replaced by CRLF in package.json.</div><div class="line">The file will have its original line endings in your working directory.</div><div class="line">warning: LF will be replaced by CRLF in source/_posts/hexo1.md.</div><div class="line">The file will have its original line endings in your working directory.</div><div class="line">warning: LF will be replaced by CRLF in source/_posts/update to github.md.</div><div class="line">The file will have its original line endings in your working directory.</div><div class="line">warning: LF will be replaced by CRLF in source/_posts/wangyimusic.md.</div><div class="line">The file will have its original line endings in your working directory.</div><div class="line">warning: LF will be replaced by CRLF in themes/next-5.0.1/layout/_partials/head.swig.</div><div class="line">The file will have its original line endings in your working directory.</div><div class="line">warning: LF will be replaced by CRLF in source/_posts/backup.md.</div><div class="line">The file will have its original line endings in your working directory.</div><div class="line">warning: LF will be replaced by CRLF in source/_posts/encrypt.md.</div><div class="line">The file will have its original line endings in your working directory.</div><div class="line">[master 1bb6cc5] Form auto backup script&apos;s commit</div><div class="line"> Committer: unknown</div><div class="line">Your name and email address were configured automatically based</div><div class="line">on your username and hostname. Please check that they are accurate.</div><div class="line">You can suppress this message by setting them explicitly. Run the</div><div class="line">following command and follow the instructions in your editor to edit</div><div class="line">your configuration file:</div><div class="line"></div><div class="line">    git config --global --edit</div><div class="line"></div><div class="line">After doing this, you may fix the identity used for this commit with:</div><div class="line"></div><div class="line">    git commit --amend --reset-author</div><div class="line"></div><div class="line"> 6 files changed, 177 insertions(+), 2 deletions(-)</div><div class="line"> create mode 100644 scripts/autobackup.js</div><div class="line"> create mode 100644 source/_posts/backup.md</div><div class="line"> create mode 100644 source/_posts/encrypt.md</div><div class="line">To https://github.com/cwyaml/blog-backup.git</div><div class="line">   d7bc718..1bb6cc5  master -&gt; master</div><div class="line">==================Auto Backup Complete============================</div></pre></td></tr></table></figure></p>
<p>这样子，每次更新博文并 deploy 到服务器上之后，备份就自动启动并完成备份啦~是不是很方便呢？</p>
<p><strong>Enjoy it！</strong></p>
<blockquote>
<p>参考：wanghao大神 <a href="https://notes.wanghao.work/2015-07-06-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6.html" rel="external nofollow noopener noreferrer" target="_blank">自动备份Hexo博客源文件</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;!-- &lt;div class=&quot;out-img-topic&quot;&gt;![Markdown](http://on5pjsxrv.bkt.clouddn.com/backup.png)&lt;/div&gt; --&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;用Hexo写博客是一件比较享受的事情，无奈如果换电脑或者系统崩了的话，你就会一脸懵B了，备份博客就显得尤为重要。先说说我的感受，博客刚搭建好的时候就想过这个问题，那时候对 &lt;code&gt;git&lt;/code&gt; 似懂非懂吧。在网上找了很多教程方法，大概就是说要创建一个分支来存放 blog 文件，但是翻腾来翻腾去还是没有搞定。
    
    </summary>
    
      <category term="博客搭建" scheme="http://www.baixiaojian.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Next+Hexo" scheme="http://www.baixiaojian.com/tags/Next-Hexo/"/>
    
      <category term="博客搭建" scheme="http://www.baixiaojian.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="backup" scheme="http://www.baixiaojian.com/tags/backup/"/>
    
  </entry>
  
  <entry>
    <title>教你制作音乐外链</title>
    <link href="http://www.baixiaojian.com/wangyimusic/"/>
    <id>http://www.baixiaojian.com/wangyimusic/</id>
    <published>2017-03-02T13:12:04.000Z</published>
    <updated>2017-07-05T05:42:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章讲怎样制作音乐外链，我主要用来为自己的博客添加背景音乐。（其实主要用来装X）</p>
<a id="more"></a>
<h2 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h2><p>首先你需要下载想要的歌曲：<br>QQ音乐、网易云音乐需要安装客户端才能下载。虾米音乐可以在网页直接下载。<br>总之把需要的歌曲下载下来就可以了！！</p>
<p>我们利用 <a href="http://www.qiniu.com/" rel="external nofollow noopener noreferrer" target="_blank">七牛云存储</a> 来自动生成歌曲外链。<br>第一步：注册、登录<br>第二步：在对象存储中新建一个仓库，命名为 music 。<br>第三步：在内容管理中上传歌曲文件</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/%E7%BD%91%E6%98%93%E4%BA%91.png" alt="markdown"></p>
<p></p><p id="border-red">用这种方法所有歌曲（只要能下载）都能获得，并且永久有效</p><p></p>
<h2 id="网易云音乐获取方法"><a href="#网易云音乐获取方法" class="headerlink" title="网易云音乐获取方法"></a>网易云音乐获取方法</h2><p>第一步： 先获取歌曲id，直接打开网易云音乐网页版: <a href="http://music.163.com" rel="external nofollow noopener noreferrer" target="_blank">http://music.163.com</a><br>搜索自己喜欢的音乐，并获取歌曲的 <code>ID</code> 。举个例子：（id很明显吧）</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://music.163.com/#/song?id=443205403" rel="external nofollow noopener noreferrer" target="_blank">http://music.163.com/#/song?id=443205403</a></p>
<p>第二步： 将下面网址中的两处id替换成的歌曲id<br><a href="http://music.163.com/api/song/detail/?id=425137664&amp;ids=[425137664]&amp;csrf_token=" rel="external nofollow noopener noreferrer" target="_blank">http://music.163.com/api/song/detail/?id=425137664&amp;ids=[425137664]&amp;csrf_token=</a><br>你将会获得一大串代码：<u>外链就隐藏其中。</u>。<br>找不到的话就把这段代码复制到编辑器里，ctrl+F 查找 <strong>.mp3</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;&quot;songs&quot;:[&#123;&quot;name&quot;:&quot;原来都是梦 &quot;,&quot;id&quot;:425137664,&quot;position&quot;:1,&quot;alias&quot;:[],&quot;status&quot;:0,&quot;fee&quot;:0,&quot;copyrightId&quot;:0,&quot;disc&quot;:&quot;&quot;,&quot;no&quot;:1,&quot;artists&quot;:[&#123;&quot;name&quot;:&quot;李行</div><div class="line">亮&quot;,&quot;id&quot;:4093,&quot;picId&quot;:0,&quot;img1v1Id&quot;:0,&quot;briefDesc&quot;:&quot;&quot;,&quot;picUrl&quot;:&quot;http://p3.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;,&quot;img1v1Url&quot;:&quot;http://p4.music.126.net/6y</div><div class="line">-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;,&quot;albumSize&quot;:0,&quot;alias&quot;:[],&quot;trans&quot;:&quot;&quot;,&quot;musicSize&quot;:0&#125;],&quot;album&quot;:&#123;&quot;name&quot;:&quot;原来都是</div><div class="line">梦&quot;,&quot;id&quot;:34816208,&quot;type&quot;:&quot;EP/Single&quot;,&quot;size&quot;:2,&quot;picId&quot;:3432675310535810,&quot;blurPicUrl&quot;:&quot;http://p3.music.126.net/LNL0l5xhstsgIILEaVkprg==/3432675310535810.jpg&quot;,&quot;companyId&quot;:0,&quot;pic&quot;:3432675310535810,&quot;picUrl&quot;:&quot;http://p3.music.126.net/LNL0l5xhstsgIILEaVkprg==/3432675310535810.jpg&quot;,&quot;publishTime&quot;:1470844800007,&quot;description&quot;:&quot;&quot;,&quot;tags&quot;:&quot;&quot;,&quot;company&quot;:&quot;百</div><div class="line">纳娱乐&quot;,&quot;briefDesc&quot;:&quot;&quot;,&quot;artist&quot;:&#123;&quot;name&quot;:&quot;&quot;,&quot;id&quot;:0,&quot;picId&quot;:0,&quot;img1v1Id&quot;:0,&quot;briefDesc&quot;:&quot;&quot;,&quot;picUrl&quot;:&quot;http://p3.music.126.net/6y-</div><div class="line">UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;,&quot;img1v1Url&quot;:&quot;http://p3.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;,&quot;albumSize&quot;:0,&quot;alias&quot;:[],&quot;trans&quot;:&quot;&quot;,&quot;musicSize&quot;:0&#125;,&quot;songs&quot;:[],&quot;alias&quot;:[],&quot;status&quot;:0,&quot;copyrightId&quot;:0,&quot;commentThreadId&quot;:&quot;R_AL_3_34816208&quot;,&quot;artists&quot;:[&#123;&quot;name&quot;:&quot;李行</div><div class="line">亮&quot;,&quot;id&quot;:4093,&quot;picId&quot;:0,&quot;img1v1Id&quot;:0,&quot;briefDesc&quot;:&quot;&quot;,&quot;picUrl&quot;:&quot;http://p3.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;,&quot;img1v1Url&quot;:&quot;http://p3.music.126.net/6y-</div><div class="line">UleORITEDbvrOLV0Q8A==/5639395138885805.jpg&quot;,&quot;albumSize&quot;:0,&quot;alias&quot;:[],&quot;trans&quot;:&quot;&quot;,&quot;musicSize&quot;:0&#125;],&quot;subType&quot;:&quot;录音室</div><div class="line">版&quot;&#125;,&quot;starred&quot;:false,&quot;popularity&quot;:100.0,&quot;score&quot;:100,&quot;starredNum&quot;:0,&quot;duration&quot;:262500,&quot;playedNum&quot;:0,&quot;dayPlays&quot;:0,&quot;hearTime&quot;:0,&quot;ringtone&quot;:null,&quot;crbt&quot;:null,&quot;audition&quot;:null,&quot;copyFrom&quot;:&quot;&quot;,&quot;commentThreadId&quot;:&quot;R_SO_4_425137664&quot;,&quot;rtUrl&quot;:null,&quot;ftype&quot;:0,&quot;rtUrls&quot;:</div><div class="line">[],&quot;copyright&quot;:0,&quot;rurl&quot;:null,&quot;mvid&quot;:0,&quot;rtype&quot;:0,&quot;bMusic&quot;:</div><div class="line">&#123;&quot;name&quot;:null,&quot;id&quot;:1225538623,&quot;size&quot;:3150725,&quot;extension&quot;:&quot;mp3&quot;,&quot;sr&quot;:44100,&quot;dfsId&quot;:1413971967605233,&quot;bitrate&quot;:96000,&quot;playTime&quot;:262500,&quot;volumeDelta&quot;:-2.21&#125;,&quot;mp3Url&quot;:&quot;http://m2.music.126.net/eU871p87-mpm5JcrqnsP2w==/1413971967605233.mp3&quot;,&quot;hMusic&quot;:</div><div class="line">&#123;&quot;name&quot;:null,&quot;id&quot;:1225538621,&quot;size&quot;:10502313,&quot;extension&quot;:&quot;mp3&quot;,&quot;sr&quot;:44100,&quot;dfsId&quot;:1413971967605231,&quot;bitrate&quot;:320000,&quot;playTime&quot;:262500,&quot;volumeDelta&quot;:-2.63&#125;,&quot;mMusic&quot;:</div><div class="line">&#123;&quot;name&quot;:null,&quot;id&quot;:1225538622,&quot;size&quot;:5251179,&quot;extension&quot;:&quot;mp3&quot;,&quot;sr&quot;:44100,&quot;dfsId&quot;:1413971967605232,&quot;bitrate&quot;:160000,&quot;playTime&quot;:262500,&quot;volumeDelta&quot;:-2.19&#125;,&quot;lMusic&quot;:</div><div class="line">&#123;&quot;name&quot;:null,&quot;id&quot;:1225538623,&quot;size&quot;:3150725,&quot;extension&quot;:&quot;mp3&quot;,&quot;sr&quot;:44100,&quot;dfsId&quot;:1413971967605233,&quot;bitrate&quot;:96000,&quot;playTime&quot;:262500,&quot;volumeDelta&quot;:-2.21&#125;&#125;],&quot;equalizers&quot;:&#123;&#125;,&quot;code&quot;:200&#125;</div></pre></td></tr></table></figure></p>
<p>第三步： 将上一步中获取到的网址放到地址栏中，若能正常播放音乐说明获取到的网址是正确的。然后你就可以把这些歌曲添加到自己的网页中了！！</p>
<p></p><p id="border-red">用这种方法有些歌曲并不能获得，不过时效很长（只要网易云能听）</p><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章讲怎样制作音乐外链，我主要用来为自己的博客添加背景音乐。（其实主要用来装X）&lt;/p&gt;
    
    </summary>
    
      <category term="Music" scheme="http://www.baixiaojian.com/categories/Music/"/>
    
    
      <category term="Music" scheme="http://www.baixiaojian.com/tags/Music/"/>
    
      <category term="网易云音乐" scheme="http://www.baixiaojian.com/tags/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 使用中常见的问题及解决方法</title>
    <link href="http://www.baixiaojian.com/markdown/"/>
    <id>http://www.baixiaojian.com/markdown/</id>
    <published>2017-02-14T13:05:06.000Z</published>
    <updated>2017-06-23T06:17:39.000Z</updated>
    
    <content type="html"><![CDATA[<!-- <div class="out-img-topic">![Markdown](http://on5pjsxrv.bkt.clouddn.com/markdown.jpg)</div> -->
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;就像 Markdown 官方文档里描述的一样：<strong><em>可读性，无论如何，都是最重要的。</em></strong> Markdown 的目标是实现 &nbsp; <span id="yu-1">『易读易写』</span> 。&nbsp;Markdown 从发布到现在备受好评，经过这一段的使用，整体感觉挺顺手，不过还是存在很多问题，所以总结一下喽。。</p>
<a id="more"></a>
<h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><p>其实自己喜欢的才是最好的。(像 vim 、emacs什么的不推荐，因为我也不会用)</p>
<h3 id="MAC平台"><a href="#MAC平台" class="headerlink" title="MAC平台"></a>MAC平台</h3><p>自己没用过，不做推荐。你可以看看这个帖子：<a href="https://www.zhihu.com/question/28886671" rel="external nofollow noopener noreferrer" target="_blank">Mac 上适合码农用的 Markdown 编辑器是什么？</a></p>
<h3 id="Windows平台"><a href="#Windows平台" class="headerlink" title="Windows平台"></a>Windows平台</h3><h4 id="印象笔记"><a href="#印象笔记" class="headerlink" title="印象笔记"></a>印象笔记</h4><p><a href="https://maxiang.io/" rel="external nofollow noopener noreferrer" target="_blank">马克飞象传送门</a>，界面不是很好看，书写的时候感觉很别扭</p>
<h4 id="有道云笔记"><a href="#有道云笔记" class="headerlink" title="有道云笔记"></a>有道云笔记</h4><p><a href="http://note.youdao.com/" rel="external nofollow noopener noreferrer" target="_blank">有道传送门</a>，同样很丑，强迫症受不了</p>
<h4 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h4><p>强大的 Sublime Text 总是能给我们很多惊喜，经过各种对比，sublime 满足了我对审美的要求。首先我们需要安装两个插件：（至于怎么安装就不说了）</p>
<ul>
<li><strong>markdownEditing</strong> 用来书写</li>
<li><strong>markdownPreview</strong> 用来预览</li>
</ul>
<h4 id="Atom（强烈推荐）"><a href="#Atom（强烈推荐）" class="headerlink" title="Atom（强烈推荐）"></a>Atom（强烈推荐）</h4><p>GitHub 推出的编辑器，界面很好（就是启动有点慢），必须支持一下。默认继承了 markdown 预览，快捷键为 <code>Ctrl+shift+M</code>。推荐插件：</p>
<ul>
<li><strong>markdown-preview</strong> 实时预览</li>
<li><strong>markdown-scroll-sync</strong>  编辑区和预览区同步滚动</li>
<li><strong>markdown-writer</strong> 方便管理图片链接等</li>
<li><strong>markdown-table-formatte</strong> 表格格式化</li>
</ul>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p><a href="http://www.markdown.cn/" rel="external nofollow noopener noreferrer" target="_blank">Markdown官方文档</a></p>
<h2 id="常见问题汇总"><a href="#常见问题汇总" class="headerlink" title="常见问题汇总"></a>常见问题汇总</h2><h3 id="html标签显示"><a href="#html标签显示" class="headerlink" title="html标签显示"></a>html标签显示</h3><p>比如说我要写一篇博客，标题为“html中 &lt;canvas&gt; 的使用”<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">## html中 &lt;canvas&gt; 的使用</div></pre></td></tr></table></figure></p>
<p>如果这样写就会出现排版上的问题（不信你试一下），那么怎么解决呢？其实认真想一下就能明白，Markdown 的语法是基于 html 的，我们直接写 &lt;canvas&gt;，自然会被理解为一个标签，而不是要显示的文本。。所以，问题回归到 html 上。在网页中，我们要显示 &lt;canvas&gt; 时要用到 <code>转义字符</code>, 所以 Markdown 中也一样，我们应该这样写：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">## html中 &amp;lt;canvas&amp;gt; 的使用</div></pre></td></tr></table></figure></p>
<h3 id="代码语法高亮"><a href="#代码语法高亮" class="headerlink" title="代码语法高亮"></a>代码语法高亮</h3><p>这个问题困扰了我好久，官方文档里竟然没有说明！只好自己去查找方法。Markdown 中显示代码块是这样的格式：<br><img src="http://on5sixmz1.bkt.clouddn.com/markdown01.png" alt="Markdown"><br>显示为：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;p&gt;这是一个p标签&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>而我们这样写：<br><img src="http://on5sixmz1.bkt.clouddn.com/markdown02.png" alt="Markdown"><br>就可以实现代码高亮了<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>据说这种方式一共支持四十多种语言，有兴趣的话你可以研究一下。</p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>Markdown 中嵌入图片，如果使用本地图片就要用到 html 标签来引用，这种方法很稳定，但是使文档变得很大（一张图片最少几百k吧）。所以我们要用到 <strong>图床</strong> 。</p>
<h4 id="贴图库"><a href="#贴图库" class="headerlink" title="贴图库"></a>贴图库</h4><p>推荐使用 &nbsp; <a href="http://www.tietuku.com/" rel="external nofollow noopener noreferrer" target="_blank">贴图库</a>  &nbsp;快速，免费（我使用过程中没掉过链子）</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/markdown03.png" alt="Markdown"></p>
<p>注册登录，就可以上传图片，每张图片自动生成 <strong>原图</strong>、<strong>展示图</strong>和 <strong>缩略图</strong>的<u>图片外链</u>、<u>html代码</u>、<u>Markdown外链</u>等。只要把对应的代码粘贴到你的文档中就可以了。。</p>
<h4 id="七牛云存储"><a href="#七牛云存储" class="headerlink" title="七牛云存储"></a>七牛云存储</h4><p>这个最近很火，可靠、可扩展、低成本等等有很多优点。你可以试一下。<br>我们主要用到他的 <strong>对象存储</strong> 服务，创建一个公开仓库，把图片上传就可以生成外链了。</p>
<h3 id="gif"><a href="#gif" class="headerlink" title="gif"></a>gif</h3><p>Github 上的开源项目，ReadMe.md 是也支持 Markdown 语法的，通常会看到很多开源项目的 ReadMe 中有 <strong>动态演示</strong>效果，看到这个项目的人一目了然，非常方便，gif本身也是一种图片格式，在 Markdown 中 <em>引用时和正常图片的引用一样</em>，但需要专门的工具生成 gif 格式的图片才行，在这里强烈推荐 <a href="http://www.cockos.com/licecap/" rel="external nofollow noopener noreferrer" target="_blank">LICEcap</a>，它是一款 windows 上的录屏软件，录制后保存的格式为 gif，体积小并且同样也可以在图床上生成链接。</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/markdown04.gif" alt="Markdown"></p>
<h3 id="插入音乐"><a href="#插入音乐" class="headerlink" title="插入音乐"></a>插入音乐</h3><p>你可以把音乐文件下载到本地，然后简单粗暴的使用 html 中的 &lt;video&gt; 标签。当然，如果这样就不必写下去了，告诉你简单的方法：<strong>网易云音乐</strong></p>
<p>打开网易云音乐网页版，搜索自己喜欢的音乐，比如我找到 <strong>告白气球</strong></p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/markdown05.png" alt="Markdown"><br>我们可以看到在图片的下边有一个 <code>生成外链播放器</code> , 点击会出现</p>
<p><img src="http://on5sixmz1.bkt.clouddn.com/markdown06.png" alt="Markdown"><br>选择 <strong>合适的尺寸</strong> 和 <strong>播放模式</strong> 之后。把下边的代码复制到你的 Markdown 文档中就可以了。试着听一下吧！！(我选择了最小尺寸)</p>
<p><div style="max-width: 450px;max-height: 180px;margin: 0 auto 40px;"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&id=423015566&auto=0&height=32"></iframe></div></p>
<p></p><p id="border-red" style="text-indent: 30px">试着去把一个 <strong>歌单生成外链播放器</strong> 插入到你的 Markdown 中，这样你跟新歌单你的博文也会跟着变化，而不必在想跟换歌曲时头疼</p><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- &lt;div class=&quot;out-img-topic&quot;&gt;![Markdown](http://on5pjsxrv.bkt.clouddn.com/markdown.jpg)&lt;/div&gt; --&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;就像 Markdown 官方文档里描述的一样：&lt;strong&gt;&lt;em&gt;可读性，无论如何，都是最重要的。&lt;/em&gt;&lt;/strong&gt; Markdown 的目标是实现 &amp;nbsp; &lt;span id=&quot;yu-1&quot;&gt;『易读易写』&lt;/span&gt; 。&amp;nbsp;Markdown 从发布到现在备受好评，经过这一段的使用，整体感觉挺顺手，不过还是存在很多问题，所以总结一下喽。。&lt;/p&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://www.baixiaojian.com/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="http://www.baixiaojian.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
